{"version":3,"sources":["types/Actions/index.ts","types/Albums/index.ts","types/Apis/index.ts","types/Bot/index.ts","types/Events/index.ts","types/Instructions/index.ts","types/Login/index.ts","types/Threads/index.ts","services/LoginContext/index.tsx","types/types.ts","services/Api/services/SetValue/index.ts","services/Api/services/Actions/DeleteTrigger/index.ts","services/JSONParseRegExReviver/index.ts","services/Api/services/Actions/ConvertTrigger/index.ts","services/Api/services/Actions/SetTriggerValue/index.ts","services/Api/services/Actions/index.ts","services/Api/services/AuthFetch/index.ts","services/Api/services/Albums/Images/AcceptImage/index.ts","services/Api/services/Albums/Images/RejectImage/index.ts","services/Api/services/Albums/CreateNewAlbum/index.ts","services/Api/services/Albums/DeleteAlbum/index.ts","services/Api/services/Albums/index.ts","services/Api/services/Bot/index.ts","services/Api/services/BotSettings/index.ts","components/Albums/components/ImageReview/index.tsx","services/Api/services/OpenFetch/index.ts","services/Api/services/Instructions/index.ts","services/Api/services/Token/index.ts","services/Api/services/Login/index.ts","services/Api/services/Logout/index.ts","services/Api/services/Threads/UnbookmarkThread/index.ts","services/Api/services/Threads/BookmarkThread/index.ts","services/Api/services/Threads/MarkLastRead/index.ts","services/Api/services/Threads/index.ts","services/Api/index.ts","components/LoginModal/index.tsx","services/Log/index.ts","services/BotContext/index.tsx","services/InstructionsContext/index.tsx","components/TopBar/components/ControlPanelLink/index.tsx","components/TopBar/components/SaveInstructionsButton/index.tsx","components/TopBar/components/InstructionsLink/index.tsx","components/TopBar/index.tsx","components/Actions/components/SideBarAction/index.tsx","services/ActionsContext/index.tsx","components/Actions/components/SideBarActions/index.tsx","services/Api/services/SetProperty/index.ts","components/EditableInput/services/DispatchAll/index.ts","components/EditableInput/components/CheckboxChild/index.tsx","components/EditableInput/components/InputChild/index.tsx","components/EditableInput/components/TextAreaChild/index.tsx","components/EditableInput/index.tsx","components/Markdown/index.tsx","components/APIs/components/Instructions/GenericInstructions/services/UseResize/index.ts","components/Actions/components/Instructions/index.tsx","services/Spacing/index.ts","components/Actions/components/RegexTriggerDisplay/index.tsx","components/Actions/components/TriggerInstruction/index.tsx","components/Actions/components/CurrentAction/components/AddTriggerButton/index.tsx","components/Actions/components/TriggerInput/index.tsx","components/Actions/components/CurrentAction/components/Triggers/index.tsx","components/Actions/components/CurrentAction/index.tsx","components/Actions/index.tsx","services/AlbumsContext/index.tsx","components/Albums/components/AlbumInput/index.tsx","components/Albums/components/DeleteAlbumModal/index.tsx","components/Albums/components/Album/index.tsx","services/UsePrevious/index.ts","components/Albums/components/ImageReview/components/ImageReviewControls/index.tsx","components/Albums/components/ImageReview/components/AnimatedImage/index.tsx","components/User/index.tsx","components/Albums/components/ImageReview/components/ReviewImage/index.tsx","components/Albums/components/ImageReview/services/GetDate/index.ts","services/Api/services/Albums/AddExistingAlbum/index.ts","components/Albums/components/AddOrCreateAlbumModal/components/AddExistingAlbumModal/index.tsx","components/Albums/components/AddOrCreateAlbumModal/components/CreateAlbumModal/index.tsx","components/Albums/components/AddOrCreateAlbumModal/index.tsx","components/Albums/components/SidebarAlbum/index.tsx","components/Albums/components/SideBar/index.tsx","components/Albums/index.tsx","services/ApiContext/index.tsx","components/APIs/components/ApiInput/index.tsx","components/APIs/components/ObjectDisplay/index.tsx","components/APIs/components/ArrayDisplay/index.tsx","components/APIs/components/Instructions/GenericInstructions/index.tsx","services/Api/services/APIs/index.ts","components/APIs/components/Instructions/ImgurInstructions/GetTokenModal/index.tsx","components/APIs/components/Instructions/ImgurInstructions/index.tsx","services/Api/services/APIs/Twitter/index.ts","components/APIs/components/Instructions/TwitterInstructions/index.tsx","components/APIs/components/Instructions/index.tsx","components/APIs/components/ApiDisplay/index.tsx","components/APIs/index.tsx","components/Credentials/components/Cookies/index.tsx","components/Credentials/components/LoginButton/index.tsx","components/Credentials/components/BotName/index.tsx","components/Credentials/components/Signature/index.tsx","components/Credentials/index.tsx","services/MillisToMinutesAndSeconds/index.ts","services/Api/services/Timer/index.ts","services/Generators/UserGenerator/index.ts","services/Generators/LogEvents/index.ts","services/ThreadsContext/index.tsx","services/EventsContext/index.tsx","components/Settings/components/Timer/index.tsx","components/RotatingCog/index.tsx","components/Settings/components/BotStateDisplay/index.tsx","components/Settings/components/ControlButtons/index.tsx","components/Settings/components/Interval/index.tsx","components/LogViewer/components/AnimatedEllipse/index.tsx","components/LogViewer/components/ErrorEvent/index.tsx","components/LogViewer/components/ArrayDisplay/index.tsx","components/LogViewer/components/ObjectDisplay/index.tsx","components/LogViewer/components/DisplayBox/index.tsx","components/Post/index.tsx","components/LogViewer/components/Instructions/index.tsx","components/LogViewer/components/PostMadeByBot/index.tsx","components/LogViewer/components/GetChildren/index.tsx","components/LogViewer/components/LogEvent/index.tsx","services/GetLineHeight/index.ts","components/LogViewer/index.tsx","components/Settings/index.tsx","components/Threads/components/ThreadInput/index.tsx","components/Threads/components/RunOnceForThreadButton/index.tsx","components/Threads/components/SetLastRead/index.tsx","components/Threads/components/CurrentThread/index.tsx","components/Threads/components/SideBarThread/index.tsx","components/Threads/components/SideBarThreads/index.tsx","components/Threads/index.tsx","components/ControlPanel/index.tsx","components/Instructions/components/Instruction/index.tsx","components/Instructions/components/Threads/index.tsx","components/Instructions/components/RegexTriggerDisplay/index.tsx","components/Instructions/components/TriggerInstruction/index.tsx","components/Instructions/components/AlbumActionInstruction/index.tsx","components/Instructions/components/ActionsInstructions/index.tsx","components/Instructions/index.tsx","components/Providers/index.tsx","services/Api/services/Headers/index.ts","services/Generators/ThreadsGenerator/index.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["ActionsActionTypes","AlbumsActionTypes","ImageReviewStatus","APITypes","ApiActionTypes","BotActionTypes","BotFetchKeys","EventsActionTypes","LogEventTypes","InstructionsActionTypes","LoginActionTypes","ThreadsActionTypes","initialState","isLoggedIn","loggingIn","modalOpen","dispatch","action","reducer","state","type","console","log","LoginContext","createContext","LoginProvider","props","useReducer","value","Provider","children","dummySAUser","avatar","id","name","profile","regDate","title","setValue","jsonBody","a","JSON","stringify","deleteTrigger","actions","index","oldValue","triggers","splice","newValue","setAction","key","configKeys","getTriggerConfigKeys","reviver","test","toString","indexOf","m","split","match","regExp","RegExp","err","convertTrigger","trigger","regExpValue","isRegExp","validRegExp","result","error","setTriggerValue","validRegex","undefined","authFetch","route","post","body","apiUrl","status","json","authFetchJSON","acceptImage","hash","accept","rejectImage","reject","createNewAlbum","album","description","setAlbum","deleteAlbumAPI","response","deleteAlbum","getAlbums","albums","imageQueue","loadAlbums","fetchAlbumsAttempt","fetchAlbumsSuccess","fetchAlbumsFailure","runOnce","setRunning","running","startBot","start","stopBot","on","stop","directions","setBotInterval","f","waitFor","timer","args","clearTimeout","Promise","resolve","setTimeout","debounce","interval","clearCookies","setCookies","cookies","exist","refreshing","work","testing","cleared","refreshCookies","testCookies","openFetch","openFetchJSON","responsePromise","getInstructions","fetchAttempt","instructions","parse","bot","general","homepage","threads","setInstructions","done","saveInstructions","success","deleteToken","localStorage","removeItem","saveToken","token","setItem","login","attempt","failure","logout","unbookmarkThreadApi","threadId","unbookmarkThread","setBookmarked","bookmarkThreadApi","bookmarkThread","threadBookmarked","markLastRead","page","getRandomInt","min","max","Math","ceil","floor","random","loadThreads","newThreads","map","thread","unreadPosts","setThreads","LoginModal","useContext","useState","Modal","open","Header","icon","content","Content","Actions","Button","basic","color","onClick","Icon","loading","message","api","APIs","fetching","hasFailed","pending","settings","botName","sigLinkInstructions","sigShowText","sigText","minutes","seconds","getNewInterval","newInterval","filter","failed","BotContext","BotProvider","testState","testDispatch","example","InstructionsContext","InstructionsProvider","ControlPanelLink","link","size","openModal","SaveInstructionsButton","saving","setSaving","setFailed","Popup","style","cursor","saved","InstructionsLink","href","target","rel","Title","instructionsBotName","setBotName","useEffect","menuItems","element","Menu","Item","TopBar","inverted","SideBarAction","labelColor","selectAction","padding","Label","AddImageToAlbum","active","DeathToll","ImageCloser","ImageFromAlbum","ImageRedder","ImageWider","NoneAThisMatters","PostCat","PostTrumpTweet","SASmiley","Tayne","Thoughts","TrumpWeight","Tweet","WhatIsLove","newActions","newAction","ActionsContext","ActionsProvider","SideBarActions","Object","entries","sort","b","localeCompare","currentAction","setProperty","dispatchAll","forEach","CheckboxChild","handleBlur","Checkbox","data-testid","checked","onChange","e","InputChild","password","setTemp","temp","Input","onBlur","onKeyPress","TextAreaChild","Form","TextArea","EditableInput","callback","checkbox","dispatchBefore","dispatchOnFailure","dispatchOnSuccess","input","labelText","renameValueTo","targetsProperty","tellParentOpen","textArea","setOpen","checkboxChild","inputChild","textareaChild","child","length","marginTop","marginBottom","fontSize","MyMarkdown","maxWidth","imageNodes","Map","renderers","image","alt","src","allowNodes","node","position","set","linkTarget","rawSourcePos","useResize","myRef","getWidth","useCallback","current","offsetWidth","width","setWidth","handleResize","window","addEventListener","removeEventListener","getInstructionsObject","Instructions","addChildren","divRef","React","useRef","escapeHtml","source","push","noInstructions","ref","disabled","Segment","spacing","RegexTriggerDisplay","instructionsObject","noExample","as","Trigger","TriggerInstruction","hasRegExp","some","el","AddTriggerButton","triggersKeys","addTrigger","TriggerInput","changing","setChanging","triggersLength","Loader","changeTrigger","Triggers","actionsConfigKeys","NoAction","CurrentAction","setActive","Grid","columns","divided","Column","Schnorkles","Snoo","Corn","review","find","accepted","newAlbums","newAlbum","newQueue","currentAlbum","newImageQueue","rejected","AlbumsContext","AlbumsProvider","AlbumInput","DeleteAlbumModal","close","Boolean","canDelete","setCanDelete","closeOnDimmerClick","onClose","Description","Message","warning","toLowerCase","Album","showDeleteButton","setShowDeleteButton","showDeleteModal","setShowDeleteModal","thisAlbum","setName","isOpen","setDescription","setHash","setStatus","usePrevious","ImageReviewControls","lastImage","firstImage","nextImage","prevImage","variants","enter","enterDirection","x","left","right","opacity","center","zIndex","exit","exitDirection","y","down","up","AnimatedImage","custom","keyProp","initial","img","animate","maxHeight","transition","stiffness","damping","duration","User","Image","ReviewImage","animatedImage","reviewImage","height","submittedBy","submittedDate","Date","slice","hours","amPm","Number","date","getDate","submittedAt","display","justifyContent","alignItems","numbers","ImageReview","qIndex","setQIndex","setKey","setEnterDirection","setExitDirection","overrideImage","setOverrideImage","animateOut","newDirection","filteredQueue","i","previousAlbum","previousReviewImage","previousKey","previousFilteredQueueLength","selectImage","addExistingAlbum","AddExistingAlbumModal","showCreateNew","floated","preventDefault","label","CreateAlbumModal","addExisting","AddOrCreateAlbumModal","setAddExisting","float","SidebarAlbum","images","setReview","SideBar","sideBarAlbums","keys","NoAlbum","Albums","toReview","singular","stopPropagation","apis","catAPI","deepAi","imgur","accessToken","clientId","clientSecret","twitter","bearerToken","consumerKey","consumerSecret","includes","ApiContext","ApiProvider","ApiInput","setApi","Array","isArray","hasOwnProperty","ObjectDisplay","object","array","ArrayDisplay","elKeys","isValidElement","GenericInstructions","getImgurToken","username","Error","GetTokenModal","setUsername","setPassword","isFetching","closeOnEscape","ImgurInstructions","setModalOpen","getTwitterToken","TwitterInstructions","default","ApiDisplay","instructionChild","thisApi","apiChild","NoAPI","setCurrent","dummy","Cookies","LoginButton","setIsFetching","setSuccess","hasFetched","setHasFetched","testCreds","BotName","settingsConfigKeys","Signature","setSigLinkInstructions","setSigShowText","setSigText","Credentials","millisToMinutesAndSeconds","millis","toFixed","getTimer","loadTimer","setTimer","generateUsers","fetch","users","results","user","picture","thumbnail","uuid","location","street","city","registered","toLocaleString","month","day","year","getDelay","longer","delayedDispatch","addEvent","event","makeEvent","data","text","time","preRun","setting","postRun","generateInstructionsForThread","numberOfInstructions","activeActions","randomUser","actionIndex","thisAction","instruction","author","all","simulateRunForAllThreads","scanningEvents","reduce","acc","simulateRunForThread","preRunSingle","concat","findIndex","t","newThread","bookmarked","ThreadsContext","ThreadsProvider","events","listening","EventsContext","EventsProvider","Timer","flash","setFlash","prevRunning","prevInterval","eventsDispatch","doRunOnce","myInterval","setInterval","clearInterval","noTime","timeout","backgroundColor","RotatingCog","div","rotate","ease","times","loop","Infinity","repeatDelay","BotStateDisplay","ControlButtons","Interval","priorValue","setPriorValue","trySetInterval","resetValue","Fragment","increaseInterval","decreaseInterval","onKeyDown","isNaN","placeholder","AnimatedEllipse","number","setNumber","periods","ErrorEvent","newest","visible","setVisible","outline","outlineColor","margin","getChildren","DisplayBox","Post","popperModifiers","preventOverflow","boundariesElement","PostMadeByBot","thisSetting","displayThreads","timeLeft","LogEvent","print","assertIsKeyStringInterface","getPrint","parsedTime","getHours","getMinutes","getSeconds","getLineHeight","root","document","getElementById","createElement","innerHTML","appendChild","lineHeight","parseInt","getComputedStyle","removeChild","LogViewer","lines","eventsEndRef","scrollIntoView","block","behavior","getHeight","overflow","Settings","ThreadInput","RunOnceForThreadButton","SetLastRead","pages","lastRead","setLastRead","replace","NoThread","CurrentThread","currentThread","SideBarThread","selectThread","SideBarThreads","Threads","tabs","menuItem","render","Tab","Pane","ControlPanel","setListening","threadText","panes","Instruction","forceOpen","markdownChild","inputName","trim","zero","AlbumTriggersInstruction","hasRegex","stringChildren","AlbumActionInstruction","actionInstruction","ActionsInstructions","albumActions","notAlbumActions","Container","Providers","getHeaders","getItem","Headers","Accept","Authorization","threadsGenerator","baseUrl","proxyurl","$","cheerio","titleElement","attr","pageNumbers","unreadPages","toArray","returnThreads","numberOfThreads","App2","threadsDispatch","albumsDispatch","hasMounted","setHasMounted","checkToken","loadImageQueue","makeImage","setImageQueue","App","hostname","ReactDOM","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.696166dc.chunk.js","sourcesContent":["export type Trigger = string | RegExp;\r\n\r\nexport interface DisplayAction {\r\n    active: boolean;\r\n    instructions?: string;\r\n    name: string;\r\n    triggers: Trigger[];\r\n}\r\n\r\nexport enum ActionsActionTypes {\r\n    currentAction = 'currentAction',\r\n    fetchAttempt = 'fetchAttempt',\r\n    failed = 'failed',\r\n    setActions = 'setActions',\r\n    setAction = 'setAction',\r\n    setActive = 'setActive',\r\n}\r\n\r\nexport type ActionsAction =\r\n    //sets the current action that the user is viewing\r\n    | { type: ActionsActionTypes.currentAction; key: string }\r\n\r\n    //sets the entire actions object, retrieved from API\r\n    | {\r\n          type: ActionsActionTypes.setActions;\r\n          actions: { [key: string]: DisplayAction };\r\n      }\r\n    //fetching failed\r\n    | { type: ActionsActionTypes.failed }\r\n\r\n    //currently fetching\r\n    | { type: ActionsActionTypes.fetchAttempt }\r\n\r\n    //set the value of an action\r\n    | { type: ActionsActionTypes.setAction; key: string; value: DisplayAction }\r\n\r\n    //set the active value of an action\r\n    //refer to action as 'key'\r\n    | { type: ActionsActionTypes.setActive; key: string; value: boolean };\r\n\r\n//The Dispatch function\r\ninterface ActionsDispatch {\r\n    dispatch: (action: ActionsAction) => void;\r\n}\r\n\r\nexport interface ActionsType {\r\n    action?: string;\r\n    actions: { [key: string]: DisplayAction };\r\n    fetching: boolean;\r\n    failed: boolean;\r\n}\r\n\r\n//a union type. The Albums state will have a Stats object for any given key\r\n//except dispatch will return the LoggedInDispatch function\r\nexport type ActionsState = ActionsType & ActionsDispatch;\r\n","import { SAUser } from '../types';\r\n\r\nexport interface Album {\r\n    description: string;\r\n    hash: string;\r\n    status: boolean;\r\n}\r\n\r\nexport interface Albums {\r\n    [key: string]: Album;\r\n}\r\n\r\nexport enum AlbumsActionTypes {\r\n    accept = 'accept',\r\n    addExistingAlbum = 'addExistingAlbum',\r\n    createNewAlbum = 'createNewAlbum',\r\n    delete = 'delete',\r\n    deleteAlbum = 'deleteAlbum',\r\n    fetchAlbumsAttempt = 'fetchAlbumsAttempt',\r\n    fetchAlbumsFailure = 'fetchAlbumsFailure',\r\n    fetchAlbumsSuccess = 'fetchAlbumsSuccess',\r\n    pending = 'pending',\r\n    reject = 'reject',\r\n    report = 'report',\r\n    removeImage = 'removeImage',\r\n    setAlbum = 'setAlbum',\r\n    setDescription = 'setDescription',\r\n    setFetchingImageQueue = 'setFetchingImageQueue',\r\n    setHash = 'setHash',\r\n    setImageQueue = 'setImageQueue',\r\n    setName = 'setName',\r\n    setReview = 'setReview',\r\n    setStatus = 'setStatus',\r\n}\r\n\r\nexport type AlbumsAction =\r\n    //accepts adds an image to an album\r\n    | { type: AlbumsActionTypes.accept; hash: number }\r\n\r\n    //adds an exisiting imgur album\r\n    | {\r\n          type: AlbumsActionTypes.addExistingAlbum;\r\n          album?: string;\r\n          description?: string;\r\n          hash: string;\r\n          status?: boolean;\r\n      }\r\n\r\n    //create a new album. user must provide the hash\r\n    | {\r\n          type: AlbumsActionTypes.createNewAlbum;\r\n          album: string;\r\n          description?: string;\r\n          hash?: string;\r\n      }\r\n\r\n    //deletes an image from the queue\r\n    | { type: AlbumsActionTypes.delete; hash: number }\r\n\r\n    //delete an album. From the bot? or from imgur altogether?\r\n    | { type: AlbumsActionTypes.deleteAlbum; album: string }\r\n\r\n    //trying to fetch the albums\r\n    | { type: AlbumsActionTypes.fetchAlbumsAttempt }\r\n\r\n    //failed to fetch the albums\r\n    | { type: AlbumsActionTypes.fetchAlbumsFailure }\r\n\r\n    //got the albums from the api\r\n    | {\r\n          type: AlbumsActionTypes.fetchAlbumsSuccess;\r\n          albums: Albums;\r\n          imageQueue?: ReviewImage[];\r\n      }\r\n\r\n    //sets the status of an image to pending\r\n    | { type: AlbumsActionTypes.pending; hash: number }\r\n\r\n    //reject adding an image to an album\r\n    | { type: AlbumsActionTypes.reject; hash: number }\r\n\r\n    //remove an image from an album\r\n    | { type: AlbumsActionTypes.removeImage }\r\n\r\n    //the image is obscene or illegal\r\n    | { type: AlbumsActionTypes.report }\r\n\r\n    //sets the current album to string or undefined\r\n    | { type: AlbumsActionTypes.setAlbum; album?: string }\r\n\r\n    //sets the description of an album\r\n    | {\r\n          type: AlbumsActionTypes.setDescription;\r\n          album: string;\r\n          value: string;\r\n      }\r\n\r\n    //sets the fetching boolean\r\n    | {\r\n          type: AlbumsActionTypes.setFetchingImageQueue;\r\n          fetching: boolean;\r\n      }\r\n\r\n    //sets the image queue array\r\n    | {\r\n          type: AlbumsActionTypes.setImageQueue;\r\n          imageQueue: ReviewImage[];\r\n      }\r\n    //sets the name of the album\r\n    | {\r\n          type: AlbumsActionTypes.setName;\r\n          album: string;\r\n          value: string;\r\n      }\r\n    //turns image review on or off\r\n    | {\r\n          type: AlbumsActionTypes.setReview;\r\n          review?: boolean;\r\n      }\r\n\r\n    //sets the album active status\r\n    //if true, album is available for posters to invoke or request image addition\r\n    | {\r\n          type: AlbumsActionTypes.setStatus;\r\n          album: string;\r\n          value: boolean;\r\n      }\r\n\r\n    //sets the hash of an album\r\n    | { type: AlbumsActionTypes.setHash; album: string; value: string };\r\n\r\n//The Dispatch function\r\ninterface AlbumsDispatch {\r\n    dispatch: (action: AlbumsAction) => void;\r\n}\r\n\r\nexport interface AlbumsType {\r\n    album?: string;\r\n    albums?: Albums;\r\n    imageQueue?: ReviewImage[];\r\n    fetching: boolean;\r\n    hasFailed: boolean;\r\n    review: boolean;\r\n}\r\n\r\n//a union type. The Albums state will have a Stats object for any given key\r\n//except dispatch will return the LoggedInDispatch function\r\nexport type AlbumsState = AlbumsType & AlbumsDispatch;\r\n\r\n//the possible states of an image submitted to be added to an album\r\nexport enum ImageReviewStatus {\r\n    //not reviewed yet\r\n    pending = 'PENDING',\r\n\r\n    //accepted into the album\r\n    accepted = 'ACCEPTED',\r\n\r\n    //rejected from the album\r\n    rejected = 'REJECTED',\r\n\r\n    //image is obscene or illegal\r\n    reported = 'REPORTED',\r\n}\r\n\r\nexport interface ReviewImage {\r\n    album: string;\r\n    hash: number;\r\n    image: string;\r\n    submittedAt: string;\r\n    submittedBy: SAUser;\r\n    status: ImageReviewStatus;\r\n}\r\n","enum APITypes {\r\n    accessToken = 'accessToken',\r\n    access_token = 'access_token',\r\n    access_token_secret = 'access_token_secret',\r\n    bearerToken = 'bearerToken',\r\n    clientId = 'clientId',\r\n    clientSecret = 'clientSecret',\r\n    consumerKey = 'consumerKey',\r\n    consumerSecret = 'consumerSecret',\r\n}\r\n\r\nexport type Api = string | { [A in APITypes]?: any };\r\n\r\nexport interface Apis {\r\n    [key: string]: Api;\r\n}\r\n\r\nexport enum ApiActionTypes {\r\n    failed = 'failed',\r\n    fetching = 'fetching',\r\n    setCurrent = 'setCurrent',\r\n    setApis = 'setApis',\r\n    setApi = 'setApi',\r\n}\r\n\r\nexport type ApiAction =\r\n    //failed to fetch an api\r\n    | { type: ApiActionTypes.failed; api: string }\r\n\r\n    //getting an api\r\n    | { type: ApiActionTypes.fetching; api: string }\r\n\r\n    //setting the currently viewed api\r\n    | { type: ApiActionTypes.setCurrent; current: string }\r\n\r\n    //loading all apis\r\n    | { type: ApiActionTypes.setApis; apis: Apis }\r\n\r\n    //loading a single api\r\n    | { type: ApiActionTypes.setApi; api: string; value: Api };\r\n\r\n//The Dispatch function\r\ninterface ApiDispatch {\r\n    dispatch: React.Dispatch<ApiAction>;\r\n}\r\n\r\ninterface ApiType {\r\n    apis: Apis;\r\n    current: string;\r\n    failed: string[];\r\n    fetching: string[];\r\n}\r\n//a union type. The LoggedIn state will have a Stats object for any given key\r\n//except dispatch will return the LoggedInDispatch function\r\nexport type ApiState = ApiType & ApiDispatch;\r\n","import { Apis } from '../types';\r\n\r\n//the types of action that the reducer in BotContext will handle\r\nexport enum BotActionTypes {\r\n    decreaseInterval = 'decreaseInterval',\r\n    increaseInterval = 'increaseInterval',\r\n    fetchAttempt = 'fetchAttempt',\r\n    fetchFailure = 'fetchFailure',\r\n    fetchSuccess = 'fetchSuccess',\r\n    runOnce = 'runOnce',\r\n    setBotName = 'setBotName',\r\n    setCookies = 'setCookies',\r\n    setInterval = 'setInterval',\r\n    setSigLinkInstructions = 'setSigLinkInstructions',\r\n    setSigShowText = 'setSigShowText',\r\n    setSigText = 'setSigText',\r\n    setRunning = 'setRunning',\r\n    setTimer = 'setTimer',\r\n    setValueAttempt = 'setValueAttempt',\r\n    setValueFailure = 'setValueFailure',\r\n    setValueSuccess = 'setValueSuccess',\r\n    start = 'start',\r\n    stop = 'stop',\r\n    testCookies = 'testCookies',\r\n}\r\n\r\nexport enum BotFetchKeys {\r\n    APIs = 'APIs',\r\n    settings = 'settings',\r\n}\r\nexport type BotAction =\r\n    //decreases the run interval\r\n    | { type: BotActionTypes.decreaseInterval }\r\n\r\n    //increases the run interval\r\n    | { type: BotActionTypes.increaseInterval }\r\n\r\n    //attempting to fetch something from the api\r\n    | { type: BotActionTypes.fetchAttempt; key: BotFetchKeys }\r\n\r\n    //fetching failed\r\n    | { type: BotActionTypes.fetchFailure; key: BotFetchKeys }\r\n\r\n    //load APIs received from API into context\r\n    | {\r\n          type: BotActionTypes.fetchSuccess;\r\n          key: BotFetchKeys;\r\n          content: Apis | FrontEndBotSettings;\r\n      }\r\n\r\n    //runs the bot once with current settings, then stops the bot\r\n    | { type: BotActionTypes.runOnce }\r\n\r\n    //sets the bot name\r\n    | { type: BotActionTypes.setBotName; botName: string }\r\n\r\n    //sets the Forum Cookies\r\n    | { type: BotActionTypes.setCookies; cookies: Cookies }\r\n\r\n    //sets if the bot is currently running or not\r\n    | { type: BotActionTypes.setRunning; running: boolean }\r\n\r\n    //link to instructions in the bot sig\r\n    | {\r\n          type: BotActionTypes.setSigLinkInstructions;\r\n          sigLinkInstructions: boolean;\r\n      }\r\n\r\n    //show custom text in the bot sig\r\n    | { type: BotActionTypes.setSigShowText; sigShowText: boolean }\r\n\r\n    //the text to show in the bot sig\r\n    | { type: BotActionTypes.setSigText; sigText: string }\r\n\r\n    //sets the timer\r\n    | { type: BotActionTypes.setTimer; timer: Timer }\r\n\r\n    //starts the bot running at current intervals\r\n    | { type: BotActionTypes.start }\r\n\r\n    //stops the bot from running if it is already running\r\n    | { type: BotActionTypes.stop }\r\n\r\n    //sets the interval in minutes at which the bot runs\r\n    | { type: BotActionTypes.setInterval; interval: number }\r\n\r\n    //sets cookies.testing to true\r\n    | { type: BotActionTypes.testCookies };\r\n\r\n//The Dispatch function\r\ninterface BotDispatch {\r\n    dispatch: (action: BotAction) => void;\r\n}\r\n\r\nexport interface Cookies {\r\n    exist?: boolean;\r\n    refreshing: boolean;\r\n    testing: boolean;\r\n    work?: boolean;\r\n}\r\n\r\nexport interface FrontEndBotSettings {\r\n    //the name that posters use to get the bot's attention\r\n    botName: string;\r\n\r\n    cookies: Cookies;\r\n\r\n    //how often the bot runs in minutes, must be > 1\r\n    interval: number;\r\n\r\n    //If the bot is set to run every interval or not\r\n    on: boolean;\r\n\r\n    //if the bot is currently running or not\r\n    running: boolean;\r\n\r\n    //every time the bot posts\r\n    sigLinkInstructions: boolean;\r\n    sigShowText: boolean;\r\n    sigText: string;\r\n}\r\n\r\nexport interface Timer {\r\n    minutes: number;\r\n    seconds: number;\r\n}\r\n\r\ninterface BotType {\r\n    api: string;\r\n    APIs?: Apis;\r\n    fetching: string[];\r\n    hasFailed: string[];\r\n    settings?: FrontEndBotSettings;\r\n    timer: Timer;\r\n}\r\n\r\n//a union type. The LoggedIn state will have a Stats object for any given key\r\n//except dispatch will return the LoggedInDispatch function\r\nexport type BotState = BotType & BotDispatch;\r\n","export enum EventsActionTypes {\r\n    addEvent = 'addEvent',\r\n    failed = 'failed',\r\n    setListening = 'setListening',\r\n}\r\n\r\nexport type EventsAction =\r\n    //received event from event source. add it to array of LogEvents\r\n    | {\r\n          type: EventsActionTypes.addEvent;\r\n          event: LogEvent | LogEvent[];\r\n      }\r\n\r\n    //failed to get event source\r\n    | { type: EventsActionTypes.failed }\r\n\r\n    //already listening to event source\r\n    | { type: EventsActionTypes.setListening; listening: boolean };\r\n\r\nexport interface EventsDispatch {\r\n    dispatch: React.Dispatch<EventsAction>;\r\n}\r\n\r\ninterface EventsType {\r\n    events: LogEvent[];\r\n    failed: boolean;\r\n    listening: boolean;\r\n}\r\n\r\nexport type EventsState = EventsType & EventsDispatch;\r\n\r\nexport type LogEvent = {\r\n    time: string;\r\n    text?: string;\r\n    data?: object;\r\n};\r\n\r\n//the types of log events\r\nexport enum LogEventTypes {\r\n    apiMessage = 'apiMessage',\r\n    array = 'array',\r\n    botStatus = 'botStatus',\r\n    error = 'error',\r\n    instructions = 'instructions',\r\n    timeLeft = 'timeLeft',\r\n    link = 'link',\r\n    post = 'post',\r\n    setting = 'setting',\r\n    threads = 'threads',\r\n    text = 'text',\r\n}\r\n","import { Trigger, SAUser } from '../types';\r\nimport { FrontEndThread } from '../Threads';\r\n\r\nexport interface ActionInstruction {\r\n    albums: boolean;\r\n    example?: string;\r\n    instructions?: string;\r\n    key: string;\r\n    name: string;\r\n    triggers: Trigger[];\r\n}\r\n\r\nexport interface AlbumInstruction {\r\n    album: string;\r\n    description?: string;\r\n}\r\n\r\nexport enum InstructionsActionTypes {\r\n    done = 'done',\r\n    failed = 'failed',\r\n    fetchAttempt = 'fetchAttempt',\r\n    setBotName = 'setBotName',\r\n    setInstructions = 'setInstructions',\r\n}\r\n\r\nexport type InstructionsAction =\r\n    //fetching done\r\n    | { type: InstructionsActionTypes.done }\r\n\r\n    //fetching failed\r\n    | { type: InstructionsActionTypes.failed }\r\n\r\n    //currently fetching\r\n    | { type: InstructionsActionTypes.fetchAttempt }\r\n\r\n    //set the botName\r\n    | { type: InstructionsActionTypes.setBotName; botName: string }\r\n\r\n    //set the instruction state, except for botName\r\n    | {\r\n          type: InstructionsActionTypes.setInstructions;\r\n          instructions: {\r\n              actions: ActionInstruction[];\r\n              albums: AlbumInstruction[];\r\n              bot: SAUser;\r\n              general: string;\r\n              homepage?: string;\r\n              threads: FrontEndThread[];\r\n          };\r\n      };\r\n\r\n//The Dispatch function\r\ninterface InstructionsDispatch {\r\n    dispatch: (action: InstructionsAction) => void;\r\n}\r\n\r\nexport interface InstructionsType {\r\n    actions: ActionInstruction[];\r\n    albums: AlbumInstruction[];\r\n    bot: SAUser;\r\n    botName: string;\r\n    done: boolean;\r\n    fetching: boolean;\r\n    failed: boolean;\r\n    general: string;\r\n    homepage?: string;\r\n    threads: FrontEndThread[];\r\n}\r\n\r\n//a union type\r\nexport type InstructionsState = InstructionsType & InstructionsDispatch;\r\n","//the types of action that the reducer in BotContext will handle\r\nexport enum LoginActionTypes {\r\n    attempt = 'attempt',\r\n    failure = 'failure',\r\n    logout = 'logout',\r\n    openModal = 'openModal',\r\n    success = 'success',\r\n}\r\n\r\nexport type LoginAction =\r\n    //attempting to login, waiting for response\r\n    | { type: LoginActionTypes.attempt }\r\n\r\n    //login attempt failed\r\n    | { type: LoginActionTypes.failure }\r\n\r\n    //user logs out\r\n    | { type: LoginActionTypes.logout }\r\n\r\n    //the login modal is open or not\r\n    | { type: LoginActionTypes.openModal }\r\n\r\n    //login attempt succeeded\r\n    //token has been stored in localStorage\r\n    | { type: LoginActionTypes.success };\r\n\r\n//The Dispatch function\r\ninterface LoginDispatch {\r\n    dispatch: React.Dispatch<LoginAction>;\r\n}\r\n\r\ninterface LoginType {\r\n    isLoggedIn: boolean;\r\n    loggingIn: boolean;\r\n    modalOpen: boolean;\r\n}\r\n//a union type. The LoggedIn state will have a Stats object for any given key\r\n//except dispatch will return the LoggedInDispatch function\r\nexport type LoginState = LoginType & LoginDispatch;\r\n","interface ThreadLimits {\r\n    startPage: number;\r\n    startPost: number;\r\n    stopPage: number;\r\n    stopPost: number;\r\n}\r\n\r\n//a thread that the bot monitors\r\nexport interface FrontEndThread {\r\n    //active is true if it was bookmarked\r\n    //the last time we got bookmarked threads from the forums page\r\n    bookmarked: boolean;\r\n\r\n    //     lastScannedPage?: number;\r\n    //     lastScannedPost?: number;\r\n    //     newPosts?: number;\r\n\r\n    //optional limits on scanning the thread\r\n    //start at X page, post, stop at Y page, post\r\n    limit?: ThreadLimits;\r\n\r\n    //a link to the thread\r\n    link: string;\r\n\r\n    //human readable name\r\n    //designated by you, the person running the bot\r\n    //goes in the logs\r\n    name?: string;\r\n\r\n    //title from the forums\r\n    //this is often changed\r\n    title?: string;\r\n\r\n    //the unique identifying number of the thread\r\n    threadId: number;\r\n\r\n    pages: number;\r\n\r\n    unreadPosts: number;\r\n}\r\n\r\nexport enum ThreadsActionTypes {\r\n    addThread = 'addThread',\r\n    currentThread = 'currentThread',\r\n    failed = 'failed',\r\n    fetchAttempt = 'fetchAttempt',\r\n    setBookmarked = 'setBookmarked',\r\n    setName = 'setName',\r\n    setThreads = 'setThreads',\r\n}\r\n\r\nexport type ThreadsAction =\r\n    //add thread or array of threads  to array of threads\r\n    | {\r\n          type: ThreadsActionTypes.addThread;\r\n          thread: FrontEndThread | FrontEndThread[];\r\n      }\r\n\r\n    //set the current thread\r\n    | { type: ThreadsActionTypes.currentThread; threadId: number }\r\n\r\n    //failed to get threads from API\r\n    | { type: ThreadsActionTypes.failed }\r\n\r\n    //fetching threads from API\r\n    | { type: ThreadsActionTypes.fetchAttempt }\r\n\r\n    //set if a thread is bookmarked\r\n    | {\r\n          type: ThreadsActionTypes.setBookmarked;\r\n          threadId: number;\r\n          value: boolean;\r\n      }\r\n\r\n    //set the name of a thread\r\n    | { type: ThreadsActionTypes.setName; threadId: number; value?: string }\r\n\r\n    //set the whole array of threads\r\n    | { type: ThreadsActionTypes.setThreads; threads: FrontEndThread[] };\r\n\r\nexport interface ThreadsDispatch {\r\n    dispatch: React.Dispatch<ThreadsAction>;\r\n}\r\n\r\ninterface ThreadsType {\r\n    thread: number;\r\n    threads?: FrontEndThread[];\r\n    failed: boolean;\r\n    fetching: boolean;\r\n}\r\n\r\nexport type ThreadsState = ThreadsType & ThreadsDispatch;\r\n","import React, { createContext, useReducer } from 'react';\r\nimport { LoginAction, LoginState } from '../../types/types';\r\n\r\nconst initialState = {\r\n    isLoggedIn: false,\r\n    loggingIn: false,\r\n    modalOpen: false,\r\n    dispatch: (action: LoginAction) => undefined,\r\n} as LoginState;\r\n\r\nlet reducer = (state: LoginState, action: LoginAction) => {\r\n    switch (action.type) {\r\n        case 'attempt': {\r\n            //const { password } = action;\r\n\r\n            return {\r\n                ...state,\r\n                loggingIn: true,\r\n                isLoggedIn: false,\r\n            };\r\n        }\r\n        case 'failure': {\r\n            return {\r\n                ...state,\r\n                loggingIn: false,\r\n                isLoggedIn: false,\r\n            };\r\n        }\r\n        case 'logout': {\r\n            return {\r\n                ...state,\r\n                loggingIn: false,\r\n                isLoggedIn: false,\r\n                modalOpen: false,\r\n            };\r\n        }\r\n        case 'openModal': {\r\n            return {\r\n                ...state,\r\n                modalOpen: true,\r\n            };\r\n        }\r\n        case 'success': {\r\n            return {\r\n                ...state,\r\n                loggingIn: false,\r\n                isLoggedIn: true,\r\n                modalOpen: false,\r\n            };\r\n        }\r\n        default: {\r\n            console.log(`loginContext default`, action);\r\n            //throw new Error();\r\n            return state;\r\n        }\r\n    }\r\n};\r\n\r\nconst LoginContext = createContext(initialState);\r\nconst LoginProvider = (props: any) => {\r\n    const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n    //add dispatch to value object and cast to LoggedInState\r\n    const value = {\r\n        ...state,\r\n        dispatch,\r\n    } as LoginState;\r\n\r\n    return (\r\n        <LoginContext.Provider value={value}>\r\n            {props.children}\r\n        </LoginContext.Provider>\r\n    );\r\n};\r\n\r\nexport { LoginContext, LoginProvider };\r\n","export interface Creds {\r\n    username: string;\r\n    password: string;\r\n}\r\n\r\nexport interface KeyStringInterface {\r\n    [key: string]: any;\r\n}\r\n\r\nexport interface SAUser {\r\n    avatar?: string;\r\n    id: number;\r\n    name: string;\r\n    title?: string;\r\n    profile: string;\r\n    regDate: string;\r\n}\r\n\r\nexport const dummySAUser: SAUser = {\r\n    avatar: 'https://fi.somethingawful.com/safs/titles/58/73/00226364.0001.jpg',\r\n    id: 226364,\r\n    name: 'Patient Zero Cool',\r\n    profile:\r\n        'https://forums.somethingawful.com/member.php?action=getinfo&userid=226364',\r\n    regDate: 'Apr 24, 2020',\r\n    title: '',\r\n};\r\n\r\nexport interface Post {\r\n    //the name of the user that wrote the post\r\n    author: SAUser;\r\n\r\n    //the body of the post, without other quoted posts inside it\r\n    body: string;\r\n\r\n    //the date the post was made\r\n    date: Date;\r\n\r\n    //the unique postId number\r\n    id: number;\r\n\r\n    //the img.src property\r\n    image?: string;\r\n\r\n    //link to the post\r\n    link: string;\r\n}\r\n\r\nexport interface Instruction extends Post {\r\n    //the instruction that the bot received\r\n    instruction: string;\r\n\r\n    //the link to the post that had the instruction\r\n    link: string;\r\n}\r\n\r\nexport * from './Actions';\r\nexport * from './Albums';\r\nexport * from './Apis';\r\nexport * from './Bot';\r\nexport * from './Events';\r\nexport * from './Instructions';\r\nexport * from './Login';\r\nexport * from './Threads';\r\n","import authFetch from '../AuthFetch';\r\n\r\ninterface setValueProps {\r\n    configKeys: string[];\r\n    value: any;\r\n}\r\n\r\n//sets a value in the config file that the Bot uses\r\nconst setValue = async (jsonBody: setValueProps) => {\r\n    //the API route that the request will be sent to\r\n    const route = 'setValue';\r\n\r\n    //stringify the body of the POST to api\r\n    const body = JSON.stringify(jsonBody);\r\n\r\n    return true;\r\n    // try {\r\n    //     //Post method = true,\r\n    //     const response = await authFetch(route, true, body);\r\n\r\n    //     //return true if status === 200, else false\r\n    //     //calling fn should deal with dispatching actions to context\r\n    //     return response?.status === 200;\r\n    // } catch (err) {\r\n    //     return undefined;\r\n    // }\r\n};\r\n\r\nexport default setValue;\r\n","import { ActionsActionTypes, ActionsAction } from '../../../../../types/types';\r\nimport setValue from '../../SetValue';\r\nimport { getTriggerConfigKeys } from '..';\r\n\r\nconst deleteTrigger = async ({\r\n    dispatch,\r\n    actions,\r\n    action,\r\n    index,\r\n}: {\r\n    dispatch: React.Dispatch<ActionsAction>;\r\n    actions: any;\r\n    action: string;\r\n    index: number;\r\n}) => {\r\n    const oldValue = actions[action];\r\n    let triggers = [...oldValue.triggers];\r\n    triggers.splice(index, 1);\r\n\r\n    const newValue = { ...oldValue, triggers };\r\n\r\n    dispatch({\r\n        type: ActionsActionTypes.setAction,\r\n        key: action,\r\n        value: newValue,\r\n    });\r\n\r\n    const configKeys = getTriggerConfigKeys({ action, index });\r\n\r\n    const result = await setValue({\r\n        configKeys: configKeys,\r\n        value: triggers,\r\n    });\r\n\r\n    if (!result)\r\n        dispatch({\r\n            type: ActionsActionTypes.setAction,\r\n            key: action,\r\n            value: oldValue,\r\n        });\r\n};\r\n\r\nexport default deleteTrigger;\r\n","export const regExpPrefix = '__REGEXP ';\r\n\r\nexport const replacer = (key: string, value: any) => {\r\n    if (value instanceof RegExp) return regExpPrefix + value.toString();\r\n    else return value;\r\n};\r\n\r\nexport const reviver = (key: string, value: any, test?: boolean) => {\r\n    if (value.toString().indexOf(regExpPrefix) === 0) {\r\n        try {\r\n            var m = value.split(regExpPrefix)[1].match(/\\/(.*)\\/(.*)?/);\r\n            const regExp = new RegExp(m[1], m[2] || '');\r\n            return test ? true : regExp;\r\n        } catch (err) {\r\n            return test ? false : 'failedRegex';\r\n        }\r\n    } else return value;\r\n};\r\n","import {\r\n    Trigger,\r\n    ActionsAction,\r\n    ActionsActionTypes,\r\n} from '../../../../../types/types';\r\nimport { regExpPrefix, reviver } from '../../../../JSONParseRegExReviver';\r\nimport setValue from '../../SetValue';\r\nimport { getTriggerConfigKeys } from '..';\r\n\r\nconst convertTrigger = async ({\r\n    dispatch,\r\n    actions,\r\n    action,\r\n    index,\r\n    trigger,\r\n}: {\r\n    dispatch: React.Dispatch<ActionsAction>;\r\n    actions: any;\r\n    action: string;\r\n    index: number;\r\n    trigger: Trigger;\r\n}) => {\r\n    // //blocks the callback from firing\r\n    // setChanging(true);\r\n    const oldValue = actions[action];\r\n\r\n    //store it in the API as a string with the regExpPrefix Added\r\n    const regExpValue = `${regExpPrefix}${trigger}`;\r\n\r\n    const isRegExp = trigger instanceof RegExp;\r\n\r\n    try {\r\n        const validRegExp = reviver('', regExpValue, true);\r\n        if (!isRegExp && !validRegExp) return;\r\n\r\n        let triggers = [...oldValue.triggers];\r\n        triggers.splice(\r\n            index,\r\n            1,\r\n            //if it's a RegExp already, store a string\r\n            isRegExp\r\n                ? trigger.toString()\r\n                : //if it's a string, store a RegExp\r\n                  reviver('', regExpValue)\r\n        );\r\n\r\n        console.log('triggers are now', triggers);\r\n\r\n        const newValue = { ...oldValue, triggers };\r\n\r\n        dispatch({\r\n            type: ActionsActionTypes.setAction,\r\n            key: action,\r\n            value: newValue,\r\n        });\r\n\r\n        const configKeys = getTriggerConfigKeys({ action, index });\r\n\r\n        //store it in the API\r\n        const result = await setValue({\r\n            configKeys,\r\n            value: isRegExp ? trigger.toString() : regExpValue,\r\n        });\r\n\r\n        if (!result)\r\n            dispatch({\r\n                type: ActionsActionTypes.setAction,\r\n                key: action,\r\n                value: oldValue,\r\n            });\r\n\r\n        return result;\r\n    } catch (err) {\r\n        console.error(err);\r\n        return false;\r\n    }\r\n};\r\n\r\nexport default convertTrigger;\r\n","import {\r\n    DisplayAction,\r\n    ActionsAction,\r\n    ActionsActionTypes,\r\n} from '../../../../../types/types';\r\nimport { regExpPrefix, reviver } from '../../../../JSONParseRegExReviver';\r\nimport setValue from '../../SetValue';\r\nimport { getTriggerConfigKeys } from '..';\r\n\r\nconst setTriggerValue = async ({\r\n    dispatch,\r\n    actions,\r\n    action,\r\n    index,\r\n    value,\r\n}: {\r\n    dispatch: React.Dispatch<ActionsAction>;\r\n    actions: { [key: string]: DisplayAction };\r\n    action: string;\r\n    index: number;\r\n    value: string;\r\n}) => {\r\n    const oldValue = actions[action];\r\n\r\n    //store it in the API as a string with the regExpPrefix Added\r\n    const regExpValue = `${regExpPrefix}${value}`;\r\n\r\n    let triggers = [...oldValue.triggers];\r\n\r\n    const isRegExp = triggers[index] instanceof RegExp;\r\n\r\n    try {\r\n        const validRegex: boolean = reviver('', regExpValue, true);\r\n\r\n        if (isRegExp && !validRegex) return;\r\n\r\n        triggers.splice(index, 1, isRegExp ? reviver('', regExpValue) : value);\r\n\r\n        const newValue = { ...oldValue, triggers };\r\n\r\n        dispatch({\r\n            type: ActionsActionTypes.setAction,\r\n            key: action,\r\n            value: newValue,\r\n        });\r\n\r\n        const configKeys = getTriggerConfigKeys({ action, index });\r\n\r\n        const result = await setValue({\r\n            configKeys,\r\n            value: isRegExp ? regExpValue : value,\r\n        });\r\n\r\n        if (!result)\r\n            dispatch({\r\n                type: ActionsActionTypes.setAction,\r\n                key: action,\r\n                value: oldValue,\r\n            });\r\n    } catch (err) {\r\n        console.log('there was an error setting trigger');\r\n    }\r\n};\r\n\r\nexport default setTriggerValue;\r\n","import deleteTrigger from './DeleteTrigger';\r\nimport convertTrigger from './ConvertTrigger';\r\nimport setTriggerValue from './SetTriggerValue';\r\n\r\nexport const getTriggerConfigKeys = ({\r\n    action,\r\n    index,\r\n}: {\r\n    action: string;\r\n    index?: number;\r\n}) =>\r\n    index === undefined\r\n        ? ['actions', action, 'triggers']\r\n        : ['actions', action, 'triggers', index.toString()];\r\n\r\nexport { convertTrigger, deleteTrigger, setTriggerValue };\r\n","import { apiUrl } from '../..';\r\n\r\ninterface Options {\r\n    method: string;\r\n    headers: any;\r\n    body?: string;\r\n}\r\n\r\n//fetch with authorization: bearer token from localStorage\r\nconst authFetch = async (\r\n    route: string,\r\n    post?: boolean,\r\n    body?: string | object\r\n) => {\r\n    const url = `${apiUrl}${route}`;\r\n\r\n    //wtf typescript https://stackoverflow.com/questions/47754183/typescript-cannot-add-headers-to-a-fetch-api-using-react-native\r\n    // const headers: any = getHeaders();\r\n    // if (headers) {\r\n    //     const options: Options = {\r\n    //         method: post ? 'POST' : 'GET',\r\n    //         headers,\r\n    //     };\r\n\r\n    //     try {\r\n    //         body && typeof body === 'object'\r\n    //             ? (options.body = JSON.stringify(body, replacer, 2))\r\n    //             : (options.body = body);\r\n\r\n    //         return fetch(url, options);\r\n    //     } catch (err) {\r\n    //         console.log(`authfetch caught error`, err);\r\n    //         //log(err);\r\n    //         return undefined;\r\n    //     }\r\n    // }\r\n    //explicit return of undefined\r\n    //if no headers, no auth!\r\n    return {\r\n        status: 200,\r\n        json: async () => ({}),\r\n    };\r\n};\r\n\r\nexport const authFetchJSON = async (\r\n    route: string,\r\n    post?: boolean,\r\n    body?: string | object\r\n) => {\r\n    return {};\r\n\r\n    //fetches using the bearer token\r\n    // const responsePromise = authFetch(route, post, body);\r\n\r\n    // if (!responsePromise) return undefined;\r\n\r\n    // const response = await responsePromise;\r\n\r\n    // try {\r\n    //     //waits for the .json method of the response\r\n    //     const json: object | undefined = await response?.json();\r\n\r\n    //     //returns the json object or undefined if there was any problem\r\n    //     return json;\r\n    // } catch (err) {\r\n    //     //if there was an error, return undefined\r\n    //     return undefined;\r\n    // }\r\n};\r\n\r\nexport default authFetch;\r\n","import { authFetchJSON } from '../../../AuthFetch';\r\nimport { AlbumsAction, AlbumsActionTypes } from '../../../../../../types/types';\r\nimport { Dispatch } from 'react';\r\n\r\ninterface AcceptImageResponse {\r\n    uploadedImageUrl: string;\r\n}\r\n\r\nconst acceptImageAPI = async (hash: number) => {\r\n    const route = 'acceptImage';\r\n\r\n    try {\r\n        //call fetch at the loginUrl\r\n        const body = {\r\n            hash,\r\n        };\r\n\r\n        const response = (await authFetchJSON(route, true, body)) as\r\n            | AcceptImageResponse\r\n            | undefined;\r\n\r\n        return response?.uploadedImageUrl;\r\n    } catch (err) {\r\n        return undefined;\r\n    }\r\n};\r\n\r\nconst acceptImage = async ({\r\n    dispatch,\r\n    hash,\r\n}: {\r\n    dispatch: Dispatch<AlbumsAction>;\r\n    hash: number;\r\n}) => {\r\n    //dispatch action to AlbumsContext\r\n    dispatch({ type: AlbumsActionTypes.accept, hash });\r\n\r\n    // const uploadedImageUrl = await acceptImageAPI(hash);\r\n    // uploadedImageUrl\r\n    //     ? //maybe display a message with a link? Or not, who cares\r\n    //       console.log(`image successfully uploaded to`, uploadedImageUrl)\r\n    //     : //should probably display a failure alert... Upload failed, added back to queue\r\n    //       dispatch({ type: AlbumsActionTypes.pending, hash });\r\n};\r\n\r\nexport default acceptImage;\r\n","import authFetch from '../../../AuthFetch';\r\nimport { AlbumsAction, AlbumsActionTypes } from '../../../../../../types/types';\r\nimport { Dispatch } from 'react';\r\n\r\nconst rejectImageAPI = async (hash: number) => {\r\n    const route = 'rejectImage';\r\n\r\n    try {\r\n        const body = { hash };\r\n        const response = await authFetch(route, true, body);\r\n        return response?.status === 200;\r\n    } catch (err) {\r\n        return undefined;\r\n    }\r\n};\r\n\r\nexport const rejectImage = async ({\r\n    dispatch,\r\n    hash,\r\n}: {\r\n    dispatch: Dispatch<AlbumsAction>;\r\n    hash: number;\r\n}) => {\r\n    //dispatch action to AlbumsContext\r\n    dispatch({ type: AlbumsActionTypes.reject, hash });\r\n\r\n    // //return true if status === 200, else false\r\n    // (await rejectImageAPI(hash))\r\n    //     ? //maybe display a message with a link? Or not, who cares\r\n    //       console.log(`image successfully rejected`)\r\n    //     : //should probably display a failure alert... reject failed, added back to queue\r\n    //       dispatch({ type: AlbumsActionTypes.pending, hash });\r\n};\r\n\r\nexport default rejectImage;\r\n","import { AlbumsAction, AlbumsActionTypes } from '../../../../../types/types';\r\nimport { authFetchJSON } from '../../AuthFetch';\r\n\r\ninterface CreateNewAlbumResponse {\r\n    hash: string;\r\n}\r\n\r\ntype CR = CreateNewAlbumResponse | undefined;\r\n\r\nconst createNewAlbumAPI = async ({\r\n    album,\r\n    description,\r\n}: {\r\n    album: string;\r\n    description?: string;\r\n}) => {\r\n    const route = 'createNewAlbum';\r\n    const response = (await authFetchJSON(route, true, {\r\n        album,\r\n        description,\r\n    })) as CR;\r\n    return response?.hash;\r\n};\r\n\r\nconst createNewAlbum = async ({\r\n    album,\r\n    dispatch,\r\n    description,\r\n}: {\r\n    album: string;\r\n    dispatch: React.Dispatch<AlbumsAction>;\r\n    description?: string;\r\n}) => {\r\n    //create the new album locally\r\n    dispatch({\r\n        type: AlbumsActionTypes.createNewAlbum,\r\n        album,\r\n        description,\r\n    });\r\n\r\n    //set the current album to the new album\r\n    dispatch({\r\n        type: AlbumsActionTypes.setAlbum,\r\n        album,\r\n    });\r\n};\r\n\r\nexport default createNewAlbum;\r\n","import { AlbumsAction, AlbumsActionTypes } from '../../../../../types/types';\r\nimport authFetch from '../../AuthFetch';\r\n\r\nconst deleteAlbumAPI = async (album: string) => {\r\n    const route = 'deleteAlbum';\r\n    const response = await authFetch(route, true, { album });\r\n    return response?.status === 200;\r\n};\r\n\r\nconst deleteAlbum = async ({\r\n    album,\r\n    dispatch,\r\n}: {\r\n    album: string;\r\n    dispatch: React.Dispatch<AlbumsAction>;\r\n}) => {\r\n    dispatch({ type: AlbumsActionTypes.deleteAlbum, album });\r\n\r\n    // const success = await deleteAlbumAPI(album);\r\n    deleteAlbumAPI(album);\r\n\r\n    //on failure, display toast\r\n    //prompt user to refresh to reload album\r\n    //requiring a refresh isn't the end of the world here\r\n};\r\n\r\nexport default deleteAlbum;\r\n","import { authFetchJSON } from '../AuthFetch';\r\nimport {\r\n    Albums,\r\n    AlbumsAction,\r\n    AlbumsActionTypes,\r\n    ReviewImage,\r\n} from '../../../../types/types';\r\nimport { acceptImage, loadImageQueue, rejectImage } from './Images';\r\nimport createNewAlbum from './CreateNewAlbum';\r\nimport deleteAlbum from './DeleteAlbum';\r\n\r\ninterface AlbumsResponse {\r\n    albums: Albums;\r\n    imageQueue: ReviewImage[];\r\n}\r\n\r\ntype AR = AlbumsResponse | undefined;\r\n\r\n//gets the imgur albums for the bot from the API\r\nconst getAlbums = async () => {\r\n    const route = 'albums';\r\n    const response = (await authFetchJSON(route)) as AR;\r\n    const albums = response?.albums;\r\n    const imageQueue = response?.imageQueue;\r\n\r\n    return {\r\n        albums,\r\n        imageQueue,\r\n    };\r\n};\r\n\r\n//loads albums into the albumsContext\r\nconst loadAlbums = async (dispatch: React.Dispatch<AlbumsAction>) => {\r\n    dispatch({ type: AlbumsActionTypes.fetchAlbumsAttempt });\r\n    const { albums, imageQueue } = await getAlbums();\r\n    if (albums) {\r\n        dispatch({\r\n            type: AlbumsActionTypes.fetchAlbumsSuccess,\r\n            albums,\r\n            imageQueue,\r\n        });\r\n    } else dispatch({ type: AlbumsActionTypes.fetchAlbumsFailure });\r\n};\r\n\r\nexport {\r\n    acceptImage,\r\n    createNewAlbum,\r\n    deleteAlbum,\r\n    loadImageQueue,\r\n    loadAlbums,\r\n    rejectImage,\r\n};\r\n","import authFetch from '../AuthFetch';\r\nimport { BotAction, BotActionTypes } from '../../../../types/Bot';\r\n\r\nconst runOnce = async (dispatch: React.Dispatch<BotAction>) => {\r\n    dispatch({ type: BotActionTypes.setRunning, running: true });\r\n    // const route = 'runOnce';\r\n    // const running = (await authFetch(route))?.status === 200;\r\n\r\n    // !running && dispatch({ type: BotActionTypes.setRunning, running: false });\r\n};\r\n\r\nconst runOnceForThread = async ({\r\n    dispatch,\r\n    threadId,\r\n}: {\r\n    dispatch: React.Dispatch<BotAction>;\r\n    threadId: number;\r\n}) => {\r\n    dispatch({ type: BotActionTypes.setRunning, running: true });\r\n    // const route = 'runOnceForThread';\r\n\r\n    // const running =\r\n    //     (await authFetch(route, true, { threadId }))?.status === 200;\r\n\r\n    // !running && dispatch({ type: BotActionTypes.setRunning, running: false });\r\n};\r\n\r\nconst startBot = async (dispatch: React.Dispatch<BotAction>) => {\r\n    dispatch({ type: BotActionTypes.start });\r\n    // const route = 'startBot';\r\n    // const started = (await authFetch(route))?.status === 200;\r\n\r\n    // !started && dispatch({ type: BotActionTypes.stop });\r\n};\r\n\r\nconst stopBot = async ({\r\n    dispatch,\r\n    on,\r\n    running,\r\n}: {\r\n    dispatch: React.Dispatch<BotAction>;\r\n    on: boolean;\r\n    running: boolean;\r\n}) => {\r\n    dispatch({ type: BotActionTypes.stop });\r\n    // const route = 'stopBot';\r\n    // const stopped = (await authFetch(route))?.status;\r\n\r\n    // if (stopped) {\r\n    dispatch({ type: BotActionTypes.setRunning, running: false });\r\n    // } else {\r\n    //     on && dispatch({ type: BotActionTypes.start });\r\n    //     running && dispatch({ type: BotActionTypes.setRunning, running: true });\r\n    // }\r\n};\r\n\r\nexport { startBot, stopBot, runOnce, runOnceForThread };\r\n","import authFetch, { authFetchJSON } from '../AuthFetch';\r\nimport {\r\n    BotFetchKeys,\r\n    FrontEndBotSettings,\r\n    BotActionTypes,\r\n    BotAction,\r\n} from '../../../../types/types';\r\n\r\ninterface BotSettingsResponse {\r\n    settings: FrontEndBotSettings;\r\n}\r\n\r\ntype BSR = BotSettingsResponse | undefined;\r\n\r\n//gets the current settings for the bot\r\nconst getSettings = async () => {\r\n    const route = 'settings';\r\n    const settings = ((await authFetchJSON(route)) as BSR)?.settings;\r\n    return settings;\r\n};\r\n\r\nfunction debounce(f: (...args: any) => any, waitFor: number = 400) {\r\n    let timer: any = null;\r\n\r\n    return (...args: any) => {\r\n        clearTimeout(timer);\r\n        return new Promise((resolve) => {\r\n            timer = setTimeout(() => resolve(f(...args)), waitFor);\r\n        });\r\n    };\r\n}\r\n\r\nexport const setBotInterval = debounce(async (interval: number) => {\r\n    const body = { interval };\r\n    const route = 'setBotInterval';\r\n    const response = await authFetch(route, true, body);\r\n    return response?.status === 200;\r\n}, 400);\r\n\r\nexport const clearCookies = async (dispatch: React.Dispatch<BotAction>) => {\r\n    dispatch({\r\n        type: BotActionTypes.setCookies,\r\n        cookies: {\r\n            exist: true,\r\n            refreshing: false,\r\n            work: undefined,\r\n            testing: false,\r\n        },\r\n    });\r\n\r\n    const route = 'clearCookies';\r\n    const cleared = (await authFetch(route))?.status === 200;\r\n\r\n    const cookies = {\r\n        exist: !cleared,\r\n        refreshing: false,\r\n        work: undefined,\r\n        testing: false,\r\n    };\r\n\r\n    dispatch({ type: BotActionTypes.setCookies, cookies });\r\n};\r\n\r\nexport const refreshCookies = async (dispatch: React.Dispatch<BotAction>) => {\r\n    dispatch({\r\n        type: BotActionTypes.setCookies,\r\n        cookies: {\r\n            exist: false,\r\n            refreshing: true,\r\n            work: undefined,\r\n            testing: false,\r\n        },\r\n    });\r\n\r\n    const route = 'refreshCookies';\r\n    const result = (await authFetch(route))?.status === 200;\r\n\r\n    const cookies = {\r\n        exist: result,\r\n        refreshing: false,\r\n        work: result ? true : undefined,\r\n        testing: false,\r\n    };\r\n\r\n    dispatch({ type: BotActionTypes.setCookies, cookies });\r\n};\r\n\r\nexport const testCookies = async (dispatch: React.Dispatch<BotAction>) => {\r\n    dispatch({ type: BotActionTypes.testCookies });\r\n    const route = 'testCookies';\r\n    const result = (await authFetch(route))?.status === 200;\r\n\r\n    const cookies = {\r\n        exist: true,\r\n        refreshing: false,\r\n        work: !!result,\r\n        testing: false,\r\n    };\r\n\r\n    dispatch({ type: BotActionTypes.setCookies, cookies });\r\n};\r\n\r\nexport const loadSettings = async (dispatch: React.Dispatch<BotAction>) => {\r\n    dispatch({ type: BotActionTypes.fetchAttempt, key: BotFetchKeys.settings });\r\n    const settings = await getSettings();\r\n    if (settings) {\r\n        settings.cookies = {\r\n            ...settings.cookies,\r\n            refreshing: false,\r\n            testing: false,\r\n            work: undefined,\r\n        };\r\n\r\n        dispatch({\r\n            type: BotActionTypes.fetchSuccess,\r\n            key: BotFetchKeys.settings,\r\n            content: settings,\r\n        });\r\n    } else\r\n        dispatch({\r\n            type: BotActionTypes.fetchFailure,\r\n            key: BotFetchKeys.settings,\r\n        });\r\n};\r\n\r\nexport default loadSettings;\r\n","import React, { useContext, useState, useEffect, useCallback } from 'react';\r\nimport usePrevious from '../../../../services/UsePrevious';\r\nimport { AlbumsContext } from '../../../../services/AlbumsContext';\r\nimport { Header, Segment } from 'semantic-ui-react';\r\nimport ImageReviewControls from './components/ImageReviewControls';\r\nimport { ImageReviewStatus, ReviewImage } from '../../../../types/types';\r\nimport AnimatedImage from './components/AnimatedImage';\r\nimport ReviewImageDisplay from './components/ReviewImage';\r\nimport { acceptImage, rejectImage } from '../../../../services/Api';\r\n\r\nexport enum directions {\r\n    down = 'down',\r\n    left = 'left',\r\n    right = 'right',\r\n    up = 'up',\r\n}\r\n\r\nconst numbers = {\r\n    down: 1,\r\n    left: 2,\r\n    right: 3,\r\n    up: 4,\r\n};\r\n\r\nconst ImageReview = ({ album }: { album?: string }) => {\r\n    const { dispatch, imageQueue } = useContext(AlbumsContext);\r\n    //the index in the filtered queue\r\n    //of the image that you are currently looking at\r\n    const [qIndex, setQIndex] = useState(0);\r\n\r\n    //a number that helps the animation library keep track of images\r\n    const [key, setKey] = useState(0);\r\n\r\n    //the directions that images enter and exit the screen\r\n    const [enterDirection, setEnterDirection] = useState(directions.right);\r\n    const [exitDirection, setExitDirection] = useState(directions.left);\r\n\r\n    //when true, keeps displaying the image of the prior image\r\n    //used when status changes filteres the pending image out of q\r\n    const [overrideImage, setOverrideImage] = useState(false);\r\n\r\n    //makes the current image animate off the screen\r\n    //and brings the new image onscreen\r\n    const animateOut = useCallback(\r\n        (newDirection: directions) => {\r\n            setExitDirection(newDirection);\r\n            setKey(key + numbers[newDirection]);\r\n        },\r\n        [setExitDirection, key, setKey]\r\n    );\r\n\r\n    //an array of the current images from this album\r\n    //that have pending status\r\n    const filteredQueue =\r\n        (album\r\n            ? imageQueue?.filter(\r\n                  (i) =>\r\n                      i.album.toLowerCase() === album.toLowerCase() &&\r\n                      i.status === ImageReviewStatus.pending\r\n              )\r\n            : imageQueue?.filter(\r\n                  (i) => i.status === ImageReviewStatus.pending\r\n              )) || [];\r\n\r\n    //the current poster submitted image being reviewed\r\n    const reviewImage = filteredQueue[qIndex];\r\n\r\n    //hash is unique to each image\r\n    //so its used by the actions/context reducer to identify images\r\n    const hash = reviewImage?.hash;\r\n\r\n    //keep these previous references around\r\n    //to complete animating an image offscreen\r\n    //after it has been filtered out of the queue\r\n    const previousAlbum = usePrevious(album);\r\n    const previousReviewImage = usePrevious(reviewImage) as ReviewImage;\r\n    const previousKey = usePrevious(key) as number;\r\n    const previousFilteredQueueLength = usePrevious(filteredQueue.length);\r\n\r\n    useEffect(() => {\r\n        if (\r\n            //the album is the same\r\n            album === previousAlbum &&\r\n            //but the queue length changed. Means the prior image status changed\r\n            filteredQueue.length !== previousFilteredQueueLength\r\n        ) {\r\n            setOverrideImage(true);\r\n\r\n            if (\r\n                previousReviewImage &&\r\n                previousReviewImage.status === ImageReviewStatus.accepted\r\n            ) {\r\n                setEnterDirection(directions.right);\r\n                //accepted- it flys up off the screen\r\n                animateOut(directions.up);\r\n                setOverrideImage(false);\r\n            }\r\n\r\n            if (\r\n                previousReviewImage &&\r\n                previousReviewImage.status === ImageReviewStatus.rejected\r\n            ) {\r\n                setEnterDirection(directions.right);\r\n                //rejected- it falls down off the screen\r\n                animateOut(directions.down);\r\n                setOverrideImage(false);\r\n            }\r\n        }\r\n    }, [\r\n        album,\r\n        animateOut,\r\n        previousAlbum,\r\n        filteredQueue.length,\r\n        previousFilteredQueueLength,\r\n        reviewImage,\r\n        previousReviewImage,\r\n    ]);\r\n\r\n    //if the album changes, look at image 0\r\n    useEffect(() => {\r\n        setQIndex(0);\r\n    }, [album, setQIndex]);\r\n\r\n    useEffect(() => {\r\n        if (qIndex > filteredQueue.length) setQIndex(filteredQueue.length - 1);\r\n    }, [qIndex, filteredQueue.length, setQIndex]);\r\n\r\n    const nextImage = () => {\r\n        if (qIndex + 1 < filteredQueue.length) {\r\n            setQIndex(qIndex + 1);\r\n        }\r\n    };\r\n\r\n    const animatedNextImage = () => {\r\n        setEnterDirection(directions.right);\r\n        animateOut(directions.left);\r\n        nextImage();\r\n    };\r\n\r\n    const prevImage = () => {\r\n        if (qIndex - 1 >= 0) {\r\n            setQIndex(qIndex - 1);\r\n        }\r\n    };\r\n\r\n    const animatedPrevImage = () => {\r\n        setEnterDirection(directions.left);\r\n        animateOut(directions.right);\r\n        prevImage();\r\n    };\r\n\r\n    //safely select any index. used for first & last images\r\n    const selectImage = (index: number) => {\r\n        if (index < 0) setQIndex(0);\r\n        else if (index > filteredQueue.length - 1)\r\n            setQIndex((filteredQueue.length - 1) & 0);\r\n        else setQIndex(index);\r\n    };\r\n\r\n    const getHeaderContent = () => {\r\n        const fqLength = filteredQueue.length;\r\n        return fqLength\r\n            ? qIndex !== undefined &&\r\n                  `Image ${qIndex + 1} of ${\r\n                      filteredQueue.length\r\n                  } pending review for ${album ? album : 'all albums'}`\r\n            : `No images to review for ${album ? album : 'any albums'}`;\r\n    };\r\n\r\n    return (\r\n        <Segment>\r\n            <Header as=\"h2\" content={getHeaderContent()} />\r\n            <ImageReviewControls\r\n                acceptImage={() => acceptImage({ dispatch, hash })}\r\n                rejectImage={() => rejectImage({ dispatch, hash })}\r\n                firstImage={() => selectImage(0)}\r\n                lastImage={() => selectImage(filteredQueue.length - 1)}\r\n                nextImage={animatedNextImage}\r\n                prevImage={animatedPrevImage}\r\n            />\r\n            {!!reviewImage && (\r\n                <ReviewImageDisplay\r\n                    animatedImage={\r\n                        <AnimatedImage\r\n                            custom={{ enterDirection, exitDirection }}\r\n                            image={\r\n                                overrideImage\r\n                                    ? previousReviewImage?.image\r\n                                    : reviewImage?.image\r\n                            }\r\n                            keyProp={overrideImage ? previousKey : key}\r\n                        />\r\n                    }\r\n                    reviewImage={reviewImage}\r\n                />\r\n            )}\r\n        </Segment>\r\n    );\r\n};\r\n\r\nexport default ImageReview;\r\n","import { apiUrl } from '../..';\r\nimport { replacer } from '../../../JSONParseRegExReviver';\r\n\r\ninterface Options {\r\n    method: string;\r\n    body?: string;\r\n}\r\n\r\n//fetch with no auth headers\r\nconst openFetch = async (\r\n    route: string,\r\n    post?: boolean,\r\n    body?: string | object\r\n) => {\r\n    const url = `${apiUrl}${route}`;\r\n\r\n    // const options: Options = {\r\n    //     method: post ? 'POST' : 'GET',\r\n    // };\r\n\r\n    // try {\r\n    //     body && typeof body === 'object'\r\n    //         ? (options.body = JSON.stringify(body, replacer, 2))\r\n    //         : (options.body = body);\r\n\r\n    //     return fetch(url, options);\r\n    // } catch (err) {\r\n    //     console.log(`openFetch caught error`, err);\r\n    //     //log(err);\r\n    //     return undefined;\r\n    // }\r\n    return {\r\n        status: 200,\r\n        json: async () => ({}),\r\n    };\r\n};\r\n\r\nexport const openFetchJSON = async (\r\n    route: string,\r\n    post?: boolean,\r\n    body?: string | object\r\n) => {\r\n    //fetches\r\n    const responsePromise = openFetch(route, post, body);\r\n\r\n    if (!responsePromise) return undefined;\r\n\r\n    const response = await responsePromise;\r\n\r\n    try {\r\n        //waits for the .json method of the response\r\n        const json: object | undefined = await response?.json();\r\n\r\n        //returns the json object or undefined if there was any problem\r\n        return json;\r\n    } catch (err) {\r\n        //if there was an error, return undefined\r\n        return undefined;\r\n    }\r\n};\r\n\r\nexport default openFetch;\r\n","import openFetch, { openFetchJSON } from '../OpenFetch';\r\nimport {\r\n    ActionInstruction,\r\n    AlbumInstruction,\r\n    InstructionsAction,\r\n    InstructionsActionTypes,\r\n    SAUser,\r\n    dummySAUser,\r\n    FrontEndThread,\r\n} from '../../../../types/types';\r\nimport { reviver } from '../../../JSONParseRegExReviver';\r\n\r\ninterface InstructionsResponse {\r\n    actions: string;\r\n    albums: AlbumInstruction[];\r\n    bot: SAUser;\r\n    general: string;\r\n    homepage?: string;\r\n    threads: FrontEndThread[];\r\n}\r\n\r\ntype IR = InstructionsResponse | undefined;\r\n\r\nexport const getInstructions = async (\r\n    dispatch: React.Dispatch<InstructionsAction>\r\n) => {\r\n    dispatch({ type: InstructionsActionTypes.fetchAttempt });\r\n\r\n    const route = 'instructions';\r\n    const instructions = (await openFetchJSON(route)) as IR;\r\n\r\n    const actions: ActionInstruction[] = instructions?.actions\r\n        ? JSON.parse(instructions.actions, reviver)\r\n        : [];\r\n\r\n    const albums = instructions?.albums || [];\r\n\r\n    const bot = instructions?.bot || dummySAUser;\r\n\r\n    const general = instructions?.general || '';\r\n\r\n    const homepage = instructions?.homepage || '';\r\n\r\n    const threads = instructions?.threads || [];\r\n\r\n    dispatch({\r\n        type: InstructionsActionTypes.setInstructions,\r\n        instructions: {\r\n            actions,\r\n            albums,\r\n            bot,\r\n            general,\r\n            homepage,\r\n            threads,\r\n        },\r\n    });\r\n\r\n    dispatch({ type: InstructionsActionTypes.done });\r\n};\r\n\r\nexport const saveInstructions = async () => {\r\n    const route = 'saveInstructions';\r\n\r\n    const success = (await openFetch(route))?.status === 200;\r\n\r\n    success\r\n        ? console.log('instructions saved')\r\n        : console.log('failed to save instructions');\r\n\r\n    return success;\r\n};\r\n","export const deleteToken = () => {\r\n    try {\r\n        localStorage.removeItem('token');\r\n        return true;\r\n    } catch (err) {\r\n        console.error(\"couldn't delete login token\", err);\r\n        return false;\r\n    }\r\n};\r\n\r\nexport const getToken = () => localStorage.getItem('token');\r\n\r\nexport const saveToken = (token: any) => {\r\n    if (!token) return undefined;\r\n    try {\r\n        localStorage.setItem('token', token);\r\n        return true;\r\n    } catch (err) {\r\n        console.error(\"couldn't store login token\", err);\r\n        return false;\r\n    }\r\n};\r\n","import { LoginAction, LoginActionTypes } from '../../../../types/types';\r\nimport { saveToken } from '../Token';\r\n\r\nconst login = async ({\r\n    dispatch,\r\n}: {\r\n    dispatch: React.Dispatch<LoginAction>;\r\n}) => {\r\n    dispatch({ type: LoginActionTypes.attempt });\r\n\r\n    try {\r\n        const token = 'placeholder token';\r\n\r\n        //if token is truthy\r\n        //save the token to local storage\r\n        token && saveToken(token)\r\n            ? //and dispatch a success action\r\n              dispatch({ type: LoginActionTypes.success })\r\n            : //otherwise, login failed\r\n              dispatch({ type: LoginActionTypes.failure });\r\n    } catch (err) {\r\n        //log(err)\r\n        dispatch({ type: LoginActionTypes.failure });\r\n    }\r\n};\r\n\r\nexport default login;\r\n","import { LoginAction, LoginActionTypes } from '../../../../types/types';\r\nimport { deleteToken } from '../Token';\r\n\r\nconst logout = async (dispatch: React.Dispatch<LoginAction>) => {\r\n    deleteToken();\r\n    dispatch({ type: LoginActionTypes.logout });\r\n};\r\n\r\nexport default logout;\r\n","import authFetch from '../../AuthFetch';\r\nimport { ThreadsAction, ThreadsActionTypes } from '../../../../../types/types';\r\n\r\nconst unbookmarkThreadApi = async (threadId: number) => {\r\n    const route = 'unbookmarkThread';\r\n\r\n    const response = await authFetch(route, true, { threadId });\r\n\r\n    return response?.status === 200;\r\n};\r\n\r\nconst unbookmarkThread = async ({\r\n    dispatch,\r\n    threadId,\r\n}: {\r\n    dispatch: React.Dispatch<ThreadsAction>;\r\n    threadId: number;\r\n}) => {\r\n    //set bookmark locally\r\n    dispatch({\r\n        type: ThreadsActionTypes.setBookmarked,\r\n        threadId,\r\n        value: false,\r\n    });\r\n\r\n    const threadUnbookmarked = await unbookmarkThreadApi(threadId);\r\n\r\n    !threadUnbookmarked &&\r\n        dispatch({\r\n            type: ThreadsActionTypes.setBookmarked,\r\n            threadId,\r\n            value: true,\r\n        });\r\n};\r\n\r\nexport default unbookmarkThread;\r\n","import authFetch from '../../AuthFetch';\r\nimport { ThreadsAction, ThreadsActionTypes } from '../../../../../types/types';\r\n\r\nconst bookmarkThreadApi = async (threadId: number) => {\r\n    const route = 'bookmarkThread';\r\n\r\n    const response = await authFetch(route, true, { threadId });\r\n\r\n    return response?.status === 200;\r\n};\r\n\r\nconst bookmarkThread = async ({\r\n    dispatch,\r\n    threadId,\r\n}: {\r\n    dispatch: React.Dispatch<ThreadsAction>;\r\n    threadId: number;\r\n}) => {\r\n    //set bookmark locally\r\n    dispatch({\r\n        type: ThreadsActionTypes.setBookmarked,\r\n        threadId,\r\n        value: true,\r\n    });\r\n\r\n    const threadBookmarked = await bookmarkThreadApi(threadId);\r\n\r\n    !threadBookmarked &&\r\n        dispatch({\r\n            type: ThreadsActionTypes.setBookmarked,\r\n            threadId,\r\n            value: false,\r\n        });\r\n\r\n    return threadBookmarked;\r\n};\r\n\r\nexport default bookmarkThread;\r\n","import authFetch from '../../AuthFetch';\r\n\r\nconst markLastRead = async ({\r\n    page,\r\n    threadId,\r\n}: {\r\n    page: number;\r\n    threadId: number;\r\n}) => {\r\n    const route = 'markLastRead';\r\n\r\n    const response = await authFetch(route, true, { page, threadId });\r\n\r\n    return response?.status === 200;\r\n};\r\n\r\nexport default markLastRead;\r\n","import {\r\n    FrontEndThread,\r\n    ThreadsAction,\r\n    ThreadsActionTypes,\r\n} from '../../../../types/types';\r\nimport { authFetchJSON } from '../AuthFetch';\r\nimport unbookmarkThread from './UnbookmarkThread';\r\nimport bookmarkThread from './BookmarkThread';\r\nimport markLastRead from './MarkLastRead';\r\n\r\nconst getRandomInt = (min = 1, max = 100) => {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    max < min && (max = min + 1);\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n};\r\n\r\ninterface ThreadsResponse {\r\n    threads: FrontEndThread[];\r\n}\r\n\r\ntype TR = ThreadsResponse | undefined;\r\n\r\n//gets the imgur albums for the bot from the API\r\nconst getThreads = async () => {\r\n    const route = 'threads';\r\n    const response = (await authFetchJSON(route)) as TR;\r\n    const threads = response?.threads;\r\n\r\n    return threads;\r\n};\r\n\r\n//loads albums into the albumsContext\r\nconst loadThreads = async ({\r\n    dispatch,\r\n    threads,\r\n}: {\r\n    dispatch: React.Dispatch<ThreadsAction>;\r\n    threads: FrontEndThread[];\r\n}) => {\r\n    const newThreads = threads.map((thread) => ({\r\n        ...thread,\r\n        unreadPosts: thread.unreadPosts + getRandomInt(0, 15),\r\n    }));\r\n    dispatch({\r\n        type: ThreadsActionTypes.setThreads,\r\n        threads: newThreads,\r\n    });\r\n};\r\n\r\nexport { bookmarkThread, loadThreads, markLastRead, unbookmarkThread };\r\n","import fetch from 'node-fetch';\r\n\r\nexport const apiUrl = 'http://localhost:3001/api/v1/';\r\n\r\nexport const getBotName = async () => {\r\n    const route = 'botName';\r\n    const url = `${apiUrl}${route}`;\r\n    const res = await fetch(url);\r\n    const botName: string | undefined = (await res.json())?.botName;\r\n    return botName;\r\n};\r\n\r\nexport * from './services/Actions';\r\nexport {\r\n    acceptImage,\r\n    createNewAlbum,\r\n    deleteAlbum,\r\n    loadAlbums,\r\n    loadImageQueue,\r\n    rejectImage,\r\n} from './services/Albums';\r\nexport * from './services/Bot';\r\nexport * from './services/BotSettings';\r\nexport { default as listenToEvents } from './services/Events';\r\nexport * from './services/Instructions';\r\nexport { default as login } from './services/Login';\r\nexport { default as logout } from './services/Logout';\r\nexport * from './services/Threads';\r\n","import React, { useContext, useState } from 'react';\r\nimport { Button, Icon, Input, Header, Modal } from 'semantic-ui-react';\r\nimport { LoginContext } from '../../services/LoginContext';\r\nimport { login, logout } from '../../services/Api';\r\n\r\nconst LoginModal = () => {\r\n    const { modalOpen, loggingIn, dispatch } = useContext(LoginContext);\r\n    const [password, setPassword] = useState('');\r\n    return (\r\n        <Modal open={modalOpen}>\r\n            <Header icon=\"lock\" content=\"Login to see controls\" />\r\n            <Modal.Content>\r\n                <Header>Click \"Yes\" to login</Header>\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <Button basic color=\"red\" onClick={() => logout(dispatch)}>\r\n                    <Icon name=\"remove\" /> No\r\n                </Button>\r\n                {loggingIn ? (\r\n                    <Button color=\"green\" loading />\r\n                ) : (\r\n                    <Button color=\"green\" onClick={() => login({ dispatch })}>\r\n                        <Icon name=\"checkmark\" /> Yes\r\n                    </Button>\r\n                )}\r\n            </Modal.Actions>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default LoginModal;\r\n","//a placeholder for actual logging\r\nconst log = (message: string, ...content: any) => {\r\n    console.log(message, content ? content : 'no content attached');\r\n};\r\nexport default log;\r\n","import React, { createContext, useReducer } from 'react';\r\nimport log from '../Log';\r\nimport { BotAction, FrontEndBotSettings, BotState } from '../../types/types';\r\n\r\nexport const initialState = {\r\n    api: '',\r\n    APIs: undefined,\r\n    fetching: [],\r\n    hasFailed: [],\r\n    pending: [],\r\n    settings: {\r\n        botName: 'zeroCool',\r\n        interval: 2,\r\n        on: true,\r\n        sigLinkInstructions: true,\r\n        sigShowText: true,\r\n        sigText: 'Hack the planet!!',\r\n        running: false,\r\n        cookies: { exist: true, refreshing: false, testing: false },\r\n    },\r\n    timer: {\r\n        minutes: 2,\r\n        seconds: 0,\r\n    },\r\n    dispatch: (action: BotAction) => undefined,\r\n} as BotState;\r\n\r\n//don't accept less than 2\r\nconst getNewInterval = (interval: number) =>\r\n    interval < 2 ? undefined : interval;\r\n\r\n//the reducer handles actions\r\nexport const reducer = (state: BotState, action: BotAction) => {\r\n    switch (action.type) {\r\n        //decreases interval by 1 minute\r\n        //won't go below 2\r\n        case 'decreaseInterval': {\r\n            if (state.settings) {\r\n                const settings = { ...state.settings };\r\n                const { interval } = settings;\r\n\r\n                const newInterval = getNewInterval(interval - 1);\r\n                settings.interval = newInterval ? newInterval : interval;\r\n\r\n                return {\r\n                    ...state,\r\n                    settings,\r\n                };\r\n            } else return state;\r\n        }\r\n\r\n        //increases interval by 1 minute\r\n        case 'increaseInterval': {\r\n            if (state.settings) {\r\n                const settings: FrontEndBotSettings = { ...state.settings };\r\n                const { interval } = settings;\r\n\r\n                const newInterval = getNewInterval(interval + 1);\r\n                settings.interval = newInterval ? newInterval : interval;\r\n                return {\r\n                    ...state,\r\n                    settings,\r\n                };\r\n            } else return state;\r\n        }\r\n\r\n        //add a string to the array of things being fetched\r\n        //so we don't try and get them again while waiting\r\n        case 'fetchAttempt': {\r\n            const { key } = action;\r\n\r\n            return {\r\n                ...state,\r\n                //if it's fetching, it hasn't failed to fetch\r\n                hasFailed: state.hasFailed.filter((failed) => failed !== key),\r\n                fetching: [...state.fetching, key],\r\n                [key]: undefined,\r\n            };\r\n        }\r\n        //flags the fetch attempt as failed\r\n        //components can check if the item has already failed\r\n        //stops fetching over and over again in a loop\r\n        case 'fetchFailure': {\r\n            const { key } = action;\r\n            return {\r\n                ...state,\r\n                hasFailed: [...state.hasFailed, key],\r\n                fetching: state.fetching.filter((f) => f !== key),\r\n                [key]: undefined,\r\n            };\r\n        }\r\n        //removes the key from fetching and failed\r\n        case 'fetchSuccess': {\r\n            const { content, key } = action;\r\n            return {\r\n                ...state,\r\n                hasFailed: state.hasFailed.filter((failed) => failed !== key),\r\n                fetching: state.fetching.filter((f) => f !== key),\r\n                [key]: content,\r\n            };\r\n        }\r\n        case 'setBotName': {\r\n            if (state.settings) {\r\n                const settings = { ...state.settings };\r\n                const { botName } = action;\r\n                settings.botName = botName;\r\n\r\n                return { ...state, settings };\r\n            } else return state;\r\n        }\r\n        case 'setCookies': {\r\n            if (state.settings) {\r\n                const settings = { ...state.settings };\r\n                const { cookies } = action;\r\n                settings.cookies = cookies;\r\n\r\n                return { ...state, settings };\r\n            } else return state;\r\n        }\r\n        //sets the bot to run every interval in minutes\r\n        //won't go below 2 minutes\r\n        case 'setInterval': {\r\n            if (state.settings) {\r\n                const { interval } = action;\r\n                const newInterval = getNewInterval(interval);\r\n\r\n                const settings = { ...state.settings };\r\n                settings.interval = newInterval ? newInterval : interval;\r\n\r\n                return {\r\n                    ...state,\r\n                    settings,\r\n                };\r\n            } else return state;\r\n        }\r\n        //sets the status of bot currently running, rather than idle\r\n        //running means the bot is actively doing things\r\n        case 'setRunning': {\r\n            const { running } = action;\r\n            if (state.settings) {\r\n                const settings = {\r\n                    ...state.settings,\r\n                    running,\r\n                };\r\n\r\n                return {\r\n                    ...state,\r\n                    settings,\r\n                };\r\n            } else return state;\r\n        }\r\n        case 'setSigLinkInstructions': {\r\n            if (state.settings) {\r\n                const settings = { ...state.settings };\r\n                const { sigLinkInstructions } = action;\r\n                settings.sigLinkInstructions = sigLinkInstructions;\r\n\r\n                return { ...state, settings };\r\n            } else return state;\r\n        }\r\n        case 'setSigShowText': {\r\n            if (state.settings) {\r\n                const settings = { ...state.settings };\r\n                const { sigShowText } = action;\r\n                settings.sigShowText = sigShowText;\r\n\r\n                return { ...state, settings };\r\n            } else return state;\r\n        }\r\n        case 'setSigText': {\r\n            if (state.settings) {\r\n                const settings = { ...state.settings };\r\n                const { sigText } = action;\r\n                settings.sigText = sigText;\r\n\r\n                return { ...state, settings };\r\n            } else return state;\r\n        }\r\n        //sets the timer display\r\n        case 'setTimer': {\r\n            const { timer } = action;\r\n            return {\r\n                ...state,\r\n                timer,\r\n            };\r\n        }\r\n        //turns the bot on\r\n        //which starts the bot running at every set interval\r\n        case 'start': {\r\n            if (state.settings) {\r\n                const settings = { ...state.settings };\r\n                settings.on = true;\r\n\r\n                return {\r\n                    ...state,\r\n                    settings,\r\n                };\r\n            } else return state;\r\n        }\r\n        //bot is not currently running at intervals\r\n        case 'stop': {\r\n            if (state.settings) {\r\n                const settings = { ...state.settings };\r\n                settings.on = false;\r\n\r\n                return {\r\n                    ...state,\r\n                    settings,\r\n                };\r\n            } else return state;\r\n        }\r\n\r\n        case 'testCookies': {\r\n            if (state.settings) {\r\n                const settings = { ...state.settings };\r\n\r\n                settings.cookies = {\r\n                    ...settings.cookies,\r\n                    testing: true,\r\n                };\r\n\r\n                return {\r\n                    ...state,\r\n                    settings,\r\n                };\r\n            } else return state;\r\n        }\r\n        default:\r\n            //log the bad action\r\n            log('botContext reducer received bad action', action);\r\n\r\n            //return the current state unchanged\r\n            return state;\r\n    }\r\n};\r\n\r\nconst BotContext = createContext(initialState);\r\n\r\n//the Props that the CardProvider will accept\r\ntype BotProps = {\r\n    //You can put react components inside of the Provider component\r\n    children: React.ReactNode;\r\n\r\n    //We might want to pass a state into the CardProvider for testing purposes\r\n    testState?: BotState;\r\n\r\n    testDispatch?: (args: any) => void;\r\n};\r\n\r\nconst BotProvider = ({ children, testState, testDispatch }: BotProps) => {\r\n    //useReducer returns an array containing the state at [0]\r\n    //and the dispatch method at [1]\r\n    //use array destructuring to get state and dispatch\r\n    const [state, dispatch] = useReducer(\r\n        reducer,\r\n        testState ? testState : initialState\r\n    );\r\n\r\n    //add dispatch to value object and cast to LoggedInState\r\n    const value = {\r\n        ...state,\r\n        dispatch,\r\n    } as BotState;\r\n\r\n    return <BotContext.Provider value={value}>{children}</BotContext.Provider>;\r\n};\r\n\r\nexport { BotContext, BotProvider };\r\n","import React, { createContext, useReducer } from 'react';\r\nimport {\r\n    InstructionsState,\r\n    InstructionsAction,\r\n    dummySAUser,\r\n} from '../../types/types';\r\n\r\nconst initialState = {\r\n    actions: [\r\n        {\r\n            albums: true,\r\n            example: 'zeroCool add ${album}',\r\n            instructions:\r\n                '# Add Image to Album\\r\\n\\r\\nYou can request to add an image to one of the albums that the bot uses. The bot will add all images in a post and/or in quoted posts to the image review queue. If the person running the bot approves an image, it will be added to the album.  ',\r\n            key: 'AddImageToAlbum',\r\n            name: 'Add Image to Album',\r\n            triggers: [/^\\\\badd\\\\b/i],\r\n        },\r\n        {\r\n            albums: false,\r\n            instructions:\r\n                '# Death Toll\\r\\n\\r\\nzeroCool can tell you all about coronavirus. This handy action scrapes the CDC.gov website and posts the current U.S. Coronavirus Death Toll. It also posts the total number of coronavirus cases.',\r\n            key: 'DeathToll',\r\n            name: 'Death Toll',\r\n            triggers: ['deathtoll', 'death toll'],\r\n        },\r\n        {\r\n            example: 'zeroCool, zoom in on that',\r\n            instructions:\r\n                '# Closer\\r\\n\\r\\nZooms in on image, uploads it to imgur, and posts the zoomed in image.',\r\n            key: 'ImageCloser',\r\n            name: 'Zoom in on Image',\r\n            triggers: ['closer', /^zoom/],\r\n        },\r\n        {\r\n            albums: true,\r\n            example:\r\n                'zeroCool gimme ${album}\\r\\n\\r\\nzeroCool gimme a ${album}\\r\\n\\r\\nzeroCool give me ${album}',\r\n            instructions:\r\n                '# Get Image From Album\\r\\n\\r\\nYou can request a random image from one of the albums that the bot uses. The bot will quote your post and post one of the images from the requested album.',\r\n            key: 'ImageFromAlbum',\r\n            name: 'Get Image From Album',\r\n            triggers: [/^\\\\bgimme\\\\b/i, /^\\\\bgimmie\\\\b/i, /^give me/i],\r\n        },\r\n        {\r\n            instructions:\r\n                '# Redder\\r\\n\\r\\nRaises the red levels of an image, hosts it on imgur, and posts it.',\r\n            key: 'ImageRedder',\r\n            name: 'Redden image',\r\n            triggers: ['redder'],\r\n        },\r\n        {\r\n            instructions:\r\n                '# Wider\\r\\n\\r\\nWidens an image, hosts it on imgur, and posts it.',\r\n            key: 'ImageWider',\r\n            name: 'Widen Image',\r\n            triggers: ['wider'],\r\n        },\r\n        {\r\n            example:\r\n                \"The regular expression will grab any post that starts with zeroCool and contains the word 'matter'\\r\\n\\r\\nzeroCool matter\\r\\n\\r\\nzeroCool, does anything matter?\\r\\n\\r\\nzeroCool, what's the matter?\",\r\n            instructions:\r\n                '# None of this matters\\r\\n\\r\\nA bleak philosophical outlook.\\r\\n\\r\\n![](https://i.imgur.com/yX9KZ49.jpg)',\r\n            key: 'NoneAThisMatters',\r\n            name: 'None a this matters',\r\n            triggers: [/matter/gi],\r\n        },\r\n        {\r\n            instructions:\r\n                '# Cat Picture\\r\\n\\r\\nUses [the cat api](http://www.thecatapi.com) to post a random picture of a cat. \\r\\n\\r\\n![](https://cdn2.thecatapi.com/images/2fp.jpg)',\r\n            key: 'PostCat',\r\n            name: 'Cat Pictures',\r\n            triggers: ['kittycat'],\r\n        },\r\n        {\r\n            instructions:\r\n                '# Trump Tweet\\r\\n\\r\\nPosts the latest tweet from the president. Needs a bit more work telling tweets from re-tweets.',\r\n            key: 'PostTrumpTweet',\r\n            name: 'Trump Tweet',\r\n            triggers: [\r\n                \"what's trumping\",\r\n                \"what's trumpin\",\r\n                'whats trumping',\r\n                'whats trumpin',\r\n            ],\r\n        },\r\n        {\r\n            instructions: '# Smiley\\r\\n\\r\\nPosts a random SA Smiley.',\r\n            key: 'SASmiley',\r\n            name: 'Smiley',\r\n            triggers: ['smiley'],\r\n        },\r\n        {\r\n            example: 'zeroCool hat wobble',\r\n            instructions:\r\n                '# Tayne\\r\\n\\r\\nA wonderful gif of Tayne doing a hat wobble.\\r\\n\\r\\n![](https://i.imgur.com/5oCbDFL.gif)',\r\n            key: 'Tayne',\r\n            name: 'Tayne',\r\n            triggers: ['tayne', /hat wobble/gi],\r\n        },\r\n        {\r\n            example:\r\n                \"The regular expression will grab any post that starts with zeroCool and contains the word 'thoughts'\\r\\n\\r\\nzeroCool thoughts\\r\\n\\r\\nzeroCool, what are your thoughts on this?\\r\\n\\r\\nzeroCool, what do you think?\",\r\n            instructions:\r\n                \"# Thoughts\\r\\n\\r\\nUses [deepai text generator](https://deepai.org/machine-learning-model/text-generator) to produce zeroCool's thoughts about anything. \",\r\n            key: 'Thoughts',\r\n            name: 'Thoughts',\r\n            triggers: [/thoughts/gi, /think/gi],\r\n        },\r\n        {\r\n            instructions:\r\n                '# Trump Weight\\r\\n\\r\\nGives the official regime figures for trump weight and height. Needs to be updated as of mid 2020.',\r\n            key: 'TrumpWeight',\r\n            name: 'Trump weight',\r\n            triggers: [/\\\\btrump\\\\b.*?(weight|bmi|fat)/gi],\r\n        },\r\n        {\r\n            example:\r\n                'The regular expression will grab any post that starts with zeroCool and then the @ character\\r\\n\\r\\nzeroCool @nationalGeographic\\r\\n\\r\\nzeroCool, @PossumEveryHour',\r\n            instructions:\r\n                '# Tweet\\r\\n\\r\\nPosts the latest tweet from the requested twitter account.',\r\n            key: 'Tweet',\r\n            name: 'Post Tweet',\r\n            triggers: [/^@/],\r\n        },\r\n        {\r\n            instructions:\r\n                \"# What is love?\\r\\n\\r\\nBaby don't hurt me\\r\\n\\r\\nDon't hurt me\\r\\n\\r\\nNo more\\r\\n\\r\\n![](https://i.imgur.com/qXcDIBl.gif)\\r\\n\\r\\nThis incredibly useful action posts a gif from night at the roxbury\",\r\n            key: 'WhatIsLove',\r\n            name: 'What is Love?',\r\n            triggers: ['what is love'],\r\n        },\r\n    ],\r\n    albums: [\r\n        {\r\n            album: 'Schnorkles',\r\n            description: 'Insane in the Poll Plane (Insane in the Brain!)',\r\n        },\r\n        {\r\n            album: 'Snoo',\r\n            description:\r\n                \"You think you're too good to look at rats? YOU AREN'T!!!\",\r\n        },\r\n        {\r\n            album: 'Corn',\r\n            description: 'Pictures of corn are funny for this one afternoon',\r\n        },\r\n        { album: 'Trump', description: 'unfortunately' },\r\n    ],\r\n    bot: dummySAUser,\r\n    botName: 'zeroCool',\r\n    done: true,\r\n    fetching: false,\r\n    failed: false,\r\n    general:\r\n        '# How to use zeroCool, an SA Forums Bot\\r\\n\\r\\nzeroCool reads and responds to posts on SA automatically. Here is a list of the responses that it can make. To use the bot, just post in a thread that the bot is reading. If your post matches one of the action triggers, then the bot will respond to your post.\\r\\n',\r\n    homepage: 'https://jacobwicks.github.io/forumsBotInstructions',\r\n    threads: [],\r\n    dispatch: (action: InstructionsAction) => undefined,\r\n} as InstructionsState;\r\n\r\n// }\r\n\r\nlet reducer = (state: InstructionsState, action: InstructionsAction) => {\r\n    switch (action.type) {\r\n        case 'done': {\r\n            return {\r\n                ...state,\r\n                done: true,\r\n                fetching: false,\r\n            };\r\n        }\r\n        case 'failed': {\r\n            return {\r\n                ...state,\r\n                actions: [],\r\n                albums: [],\r\n                done: true,\r\n                fetching: false,\r\n                failed: true,\r\n                general: '',\r\n            };\r\n        }\r\n        // setInstructions = 'setInstructions',\r\n        case 'fetchAttempt': {\r\n            return {\r\n                ...state,\r\n                fetching: true,\r\n            };\r\n        }\r\n        case 'setBotName': {\r\n            const { botName } = action;\r\n            return {\r\n                ...state,\r\n                botName,\r\n            };\r\n        }\r\n        case 'setInstructions': {\r\n            const { instructions } = action;\r\n            const {\r\n                actions,\r\n                albums,\r\n                bot,\r\n                general,\r\n                homepage,\r\n                threads,\r\n            } = instructions;\r\n            return {\r\n                ...state,\r\n                failed: false,\r\n                fetching: false,\r\n                actions,\r\n                albums,\r\n                bot,\r\n                general,\r\n                homepage,\r\n                threads,\r\n            };\r\n        }\r\n        default: {\r\n            console.log(`InstructionsContext default`, action);\r\n            //throw new Error();\r\n            return state;\r\n        }\r\n    }\r\n};\r\n\r\nconst InstructionsContext = createContext(initialState);\r\n\r\n//the Props that the InstructionsProvider will accept\r\ntype InstructionsProps = {\r\n    //You can put react components inside of the Provider component\r\n    children: React.ReactNode;\r\n\r\n    //We might want to pass a state into the CardProvider for testing purposes\r\n    testState?: InstructionsState;\r\n\r\n    testDispatch?: (args: any) => void;\r\n};\r\n\r\nconst InstructionsProvider = ({\r\n    children,\r\n    testState,\r\n    testDispatch,\r\n}: InstructionsProps) => {\r\n    //useReducer returns an array containing the state at [0]\r\n    //and the dispatch method at [1]\r\n    //use array destructuring to get state and dispatch\r\n    const [state, dispatch] = useReducer(\r\n        reducer,\r\n        testState ? testState : initialState\r\n    );\r\n\r\n    //add dispatch to value object and cast to LoggedInState\r\n    const value = {\r\n        ...state,\r\n        dispatch,\r\n    } as InstructionsState;\r\n\r\n    return (\r\n        <InstructionsContext.Provider value={value}>\r\n            {children}\r\n        </InstructionsContext.Provider>\r\n    );\r\n};\r\n\r\nexport { InstructionsContext, InstructionsProvider };\r\n","import React, { useContext } from 'react';\r\nimport { LoginContext } from '../../../../services/LoginContext';\r\nimport { LoginActionTypes } from '../../../../types/Login';\r\nimport { logout } from '../../../../services/Api';\r\nimport { Icon } from 'semantic-ui-react';\r\n\r\nconst ControlPanelLink = () => {\r\n    const { dispatch, isLoggedIn } = useContext(LoginContext);\r\n    return isLoggedIn ? (\r\n        <Icon\r\n            title=\"Bot Instructions Page\"\r\n            name=\"file outline\"\r\n            link\r\n            onClick={() => logout(dispatch)}\r\n            size=\"large\"\r\n        />\r\n    ) : (\r\n        <Icon\r\n            title=\"Bot Control Panel\"\r\n            name=\"setting\"\r\n            link\r\n            onClick={() => dispatch({ type: LoginActionTypes.openModal })}\r\n            size=\"large\"\r\n        />\r\n    );\r\n};\r\n\r\nexport default ControlPanelLink;\r\n","import React, { useState } from 'react';\r\nimport { Popup, Icon } from 'semantic-ui-react';\r\nimport { saveInstructions } from '../../../../services/Api';\r\n\r\nconst SaveInstructionsButton = () => {\r\n    const [saving, setSaving] = useState(false);\r\n    const [failed, setFailed] = useState(false);\r\n\r\n    return (\r\n        <Popup\r\n            content={\r\n                saving\r\n                    ? 'Saving Instructions'\r\n                    : failed\r\n                    ? 'Error saving'\r\n                    : 'Save instructions and upload to GitHub Pages'\r\n            }\r\n            trigger={\r\n                <Icon\r\n                    loading={saving}\r\n                    name={failed ? 'exclamation circle' : 'save'}\r\n                    size=\"large\"\r\n                    style={{ cursor: saving ? undefined : 'pointer' }}\r\n                    onClick={async () => {\r\n                        if (!saving) {\r\n                            setSaving(true);\r\n                            const saved = await saveInstructions();\r\n                            setSaving(false);\r\n                            !saved && setFailed(true);\r\n                        }\r\n                    }}\r\n                />\r\n            }\r\n        />\r\n    );\r\n};\r\n\r\nexport default SaveInstructionsButton;\r\n","import React, { useContext } from 'react';\r\nimport { InstructionsContext } from '../../../../services/InstructionsContext';\r\n\r\nconst InstructionsLink = () => {\r\n    const { homepage } = useContext(InstructionsContext);\r\n\r\n    return homepage ? (\r\n        <a href={homepage} target=\"_blank\" rel=\"noopener noreferrer\">\r\n            Instructions hosted on GitHub Pages\r\n        </a>\r\n    ) : (\r\n        <></>\r\n    );\r\n};\r\n\r\nexport default InstructionsLink;\r\n","import React, { useContext, useState, useEffect } from 'react';\r\nimport { Header, Menu } from 'semantic-ui-react';\r\nimport LoginModal from '../LoginModal';\r\nimport { BotContext } from '../../services/BotContext';\r\nimport { InstructionsContext } from '../../services/InstructionsContext';\r\nimport ControlPanelLink from './components/ControlPanelLink';\r\nimport SaveInstructionsButton from './components/SaveInstructionsButton';\r\nimport InstructionsLink from './components/InstructionsLink';\r\n\r\nconst Title = () => {\r\n    const { settings } = useContext(BotContext);\r\n    const { botName: instructionsBotName } = useContext(InstructionsContext);\r\n    const [botName, setBotName] = useState(\r\n        instructionsBotName\r\n            ? instructionsBotName\r\n            : settings?.botName\r\n            ? settings.botName\r\n            : ''\r\n    );\r\n\r\n    useEffect(() => {\r\n        if (settings) {\r\n            setBotName(settings.botName);\r\n        }\r\n    }, [settings]);\r\n\r\n    return <Header size=\"large\" content={`${botName}, an SA Forums Bot`} />;\r\n};\r\n\r\nconst menuItems = [\r\n    <ControlPanelLink />,\r\n    <Title />,\r\n    <SaveInstructionsButton />,\r\n    <InstructionsLink />,\r\n].map((element, index) => <Menu.Item key={index}>{element}</Menu.Item>);\r\n\r\nconst TopBar = () => (\r\n    <>\r\n        <Menu children={menuItems} color=\"green\" inverted />\r\n        <LoginModal />\r\n    </>\r\n);\r\n\r\nexport default TopBar;\r\n","import React from 'react';\r\nimport { Label } from 'semantic-ui-react';\r\n\r\nconst SideBarAction = ({\r\n    labelColor,\r\n    name,\r\n    selectAction,\r\n}: {\r\n    labelColor?: 'green' | 'blue';\r\n    name?: string;\r\n    selectAction: () => void;\r\n}) => (\r\n    <div\r\n        style={{\r\n            cursor: 'pointer',\r\n            padding: 10,\r\n        }}\r\n        onClick={selectAction}\r\n    >\r\n        {<Label color={labelColor}>{name}</Label>}\r\n    </div>\r\n);\r\n\r\nexport default SideBarAction;\r\n","import React, { createContext, useReducer } from 'react';\r\nimport { ActionsState, ActionsAction } from '../../types/types';\r\n\r\nconst initialState = {\r\n    actions: {\r\n        AddImageToAlbum: {\r\n            albums: true,\r\n            active: true,\r\n            name: 'Add Image to Album',\r\n            triggers: [/^\\\\badd\\\\b/i],\r\n        },\r\n        DeathToll: {\r\n            albums: false,\r\n            active: true,\r\n            name: 'Death Toll',\r\n            triggers: ['deathtoll', 'death toll'],\r\n        },\r\n        ImageCloser: {\r\n            albums: false,\r\n            active: true,\r\n            name: 'Zoom in on Image',\r\n            triggers: ['closer', /^zoom/],\r\n        },\r\n        ImageFromAlbum: {\r\n            albums: true,\r\n            active: true,\r\n            name: 'Get Image From Album',\r\n            triggers: [/^\\\\bgimme\\\\b/i, /^\\\\bgimmie\\\\b/i, /^give me/i],\r\n        },\r\n        ImageRedder: {\r\n            albums: false,\r\n            active: true,\r\n            name: 'Redden image',\r\n            triggers: ['redder'],\r\n        },\r\n        ImageWider: {\r\n            albums: false,\r\n            active: true,\r\n            name: 'Widen Image',\r\n            triggers: ['wider'],\r\n        },\r\n        NoneAThisMatters: {\r\n            albums: false,\r\n            active: true,\r\n            name: 'None a this matters',\r\n            triggers: [/matter/gi],\r\n        },\r\n        PostCat: {\r\n            albums: false,\r\n            active: true,\r\n            name: 'Cat Pictures',\r\n            triggers: ['kittycat'],\r\n        },\r\n        PostTrumpTweet: {\r\n            albums: false,\r\n            active: true,\r\n            name: 'Trump Tweet',\r\n            triggers: [\r\n                \"what's trumping\",\r\n                \"what's trumpin\",\r\n                'whats trumping',\r\n                'whats trumpin',\r\n            ],\r\n        },\r\n        SASmiley: {\r\n            albums: false,\r\n            active: true,\r\n            name: 'Smiley',\r\n            triggers: ['smiley'],\r\n        },\r\n        Tayne: {\r\n            albums: false,\r\n            active: true,\r\n            name: 'Tayne',\r\n            triggers: ['tayne', /hat wobble/gi],\r\n        },\r\n        Thoughts: {\r\n            albums: false,\r\n            active: true,\r\n            name: 'Thoughts',\r\n            triggers: [/thoughts/gi, /think/gi],\r\n        },\r\n        TrumpWeight: {\r\n            albums: false,\r\n            active: true,\r\n            name: 'Trump weight',\r\n            triggers: [/\\\\btrump\\\\b.*?(weight|bmi|fat)/gi],\r\n        },\r\n        Tweet: {\r\n            albums: false,\r\n            active: true,\r\n            name: 'Post Tweet',\r\n            triggers: [/^@/],\r\n        },\r\n        WhatIsLove: {\r\n            albums: false,\r\n            active: true,\r\n            name: 'What is Love?',\r\n            triggers: ['what is love'],\r\n        },\r\n    },\r\n    failed: false,\r\n    fetching: false,\r\n    dispatch: (action: ActionsAction) => undefined,\r\n} as ActionsState;\r\n\r\nlet reducer = (state: ActionsState, action: ActionsAction) => {\r\n    switch (action.type) {\r\n        case 'currentAction': {\r\n            const { key } = action;\r\n            return {\r\n                ...state,\r\n                action: key,\r\n            };\r\n        }\r\n        case 'failed': {\r\n            return {\r\n                ...state,\r\n                failed: true,\r\n                fetching: false,\r\n                actions: {},\r\n            };\r\n        }\r\n        case 'fetchAttempt': {\r\n            return {\r\n                ...state,\r\n                fetching: true,\r\n            };\r\n        }\r\n        case 'setAction': {\r\n            const { key, value } = action;\r\n            const newActions = { ...state.actions };\r\n            newActions[key] = value;\r\n            return {\r\n                ...state,\r\n                actions: newActions,\r\n            };\r\n        }\r\n        case 'setActions': {\r\n            const { actions } = action;\r\n            return {\r\n                ...state,\r\n                failed: false,\r\n                fetching: false,\r\n                actions,\r\n            };\r\n        }\r\n        case 'setActive': {\r\n            const { key, value } = action;\r\n            const newActions = { ...state.actions };\r\n            const newAction = { ...newActions[key] };\r\n            newAction.active = value;\r\n\r\n            newActions[key] = newAction;\r\n\r\n            return {\r\n                ...state,\r\n                actions: newActions,\r\n            };\r\n        }\r\n        default: {\r\n            console.log(`actionsContext default`, action);\r\n            //throw new Error();\r\n            return state;\r\n        }\r\n    }\r\n};\r\n\r\nconst ActionsContext = createContext(initialState);\r\n\r\n//the Props that the ActionsProvider will accept\r\ntype ActionsProps = {\r\n    //You can put react components inside of the Provider component\r\n    children: React.ReactNode;\r\n\r\n    //We might want to pass a state into the CardProvider for testing purposes\r\n    testState?: ActionsState;\r\n\r\n    testDispatch?: (args: any) => void;\r\n};\r\n\r\nconst ActionsProvider = ({\r\n    children,\r\n    testState,\r\n    testDispatch,\r\n}: ActionsProps) => {\r\n    //useReducer returns an array containing the state at [0]\r\n    //and the dispatch method at [1]\r\n    //use array destructuring to get state and dispatch\r\n    const [state, dispatch] = useReducer(\r\n        reducer,\r\n        testState ? testState : initialState\r\n    );\r\n\r\n    //add dispatch to value object and cast to LoggedInState\r\n    const value = {\r\n        ...state,\r\n        dispatch,\r\n    } as ActionsState;\r\n\r\n    return (\r\n        <ActionsContext.Provider value={value}>\r\n            {children}\r\n        </ActionsContext.Provider>\r\n    );\r\n};\r\n\r\nexport { ActionsContext, ActionsProvider };\r\n","import React, { useContext } from 'react';\r\nimport SideBarAction from '../SideBarAction';\r\nimport { ActionsActionTypes } from '../../../../types/types';\r\nimport { ActionsContext } from '../../../../services/ActionsContext';\r\n\r\nconst SideBarActions = () => {\r\n    const { dispatch, actions, action } = useContext(ActionsContext);\r\n\r\n    return (\r\n        <>\r\n            {Object.entries(actions)\r\n                //sort the entries by alphabetical order of name\r\n                .sort((a, b) => a[1].name.localeCompare(b[1].name))\r\n                .map(([key, { active, name }]) => {\r\n                    const labelColor =\r\n                        key === action ? 'green' : active ? 'blue' : undefined;\r\n\r\n                    const selectAction = () =>\r\n                        dispatch({\r\n                            type: ActionsActionTypes.currentAction,\r\n                            key,\r\n                        });\r\n\r\n                    return (\r\n                        <SideBarAction\r\n                            labelColor={labelColor}\r\n                            name={name}\r\n                            key={key}\r\n                            selectAction={selectAction}\r\n                        />\r\n                    );\r\n                })}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default SideBarActions;\r\n","import authFetch from '../AuthFetch';\r\n\r\ninterface setPropertyProps {\r\n    configKeys: string[];\r\n    value: any;\r\n}\r\n\r\n//sets a value in the config file that the Bot uses\r\nconst setProperty = async (jsonBody: setPropertyProps) => {\r\n    //the API route that the request will be sent to\r\n    const route = 'setProperty';\r\n\r\n    //stringify the body of the POST to api\r\n    const body = JSON.stringify(jsonBody);\r\n    return true;\r\n    // try {\r\n    //     //Post method = true,\r\n    //     const response = await authFetch(route, true, body);\r\n\r\n    //     //return true if status === 200, else false\r\n    //     //calling fn should deal with dispatching actions to context\r\n    //     return response?.status === 200;\r\n    // } catch (err) {\r\n    //     return undefined;\r\n    // }\r\n};\r\n\r\nexport default setProperty;\r\n","import {\r\n    ActionsAction,\r\n    AlbumsAction,\r\n    BotAction,\r\n    ThreadsAction,\r\n} from '../../../../types/types';\r\nimport { ActionArray } from '../../index';\r\n\r\n//dispatches all actions\r\nconst dispatchAll = ({\r\n    dispatch,\r\n    actions,\r\n}: {\r\n    dispatch: (\r\n        action: ActionsAction | AlbumsAction | BotAction | ThreadsAction\r\n    ) => void;\r\n    actions?: ActionArray;\r\n}) => dispatch && actions && actions.forEach((action) => dispatch(action));\r\n\r\nexport default dispatchAll;\r\n","import React from 'react';\r\nimport { Checkbox } from 'semantic-ui-react';\r\n\r\nconst CheckboxChild = ({\r\n    handleBlur,\r\n    value,\r\n}: {\r\n    handleBlur: (arg: boolean) => void;\r\n    value?: string | boolean;\r\n}) => (\r\n    <Checkbox\r\n        data-testid=\"status\"\r\n        checked={!!value}\r\n        onChange={(e, { checked }) => handleBlur(!!checked)}\r\n    />\r\n);\r\n\r\nexport default CheckboxChild;\r\n","import React from 'react';\r\nimport { Input } from 'semantic-ui-react';\r\n\r\ninterface InputChildProps {\r\n    handleBlur: (arg?: string | boolean) => void;\r\n    setTemp: (arg?: string | boolean) => void;\r\n    temp?: string | boolean;\r\n    password: boolean;\r\n}\r\n\r\nconst InputChild = ({\r\n    handleBlur,\r\n    password,\r\n    setTemp,\r\n    temp,\r\n}: InputChildProps) => (\r\n    <Input\r\n        onBlur={(e: InputEvent) => {\r\n            const target = e.target as HTMLInputElement;\r\n            handleBlur(target.value);\r\n        }}\r\n        onKeyPress={({ key }: { key: string }) => {\r\n            if (key === 'Enter') handleBlur(temp);\r\n        }}\r\n        onChange={({ target }) => setTemp(target.value)}\r\n        type={password ? 'password' : undefined}\r\n        value={temp}\r\n    />\r\n);\r\n\r\nexport default InputChild;\r\n","import React from 'react';\r\nimport { Form, TextArea } from 'semantic-ui-react';\r\n\r\ninterface ChildProps {\r\n    handleBlur: (arg?: string | boolean) => void;\r\n    setTemp: (arg?: string | boolean) => void;\r\n    temp?: string | boolean;\r\n}\r\n\r\nconst TextAreaChild = ({ handleBlur, temp, setTemp }: ChildProps) => (\r\n    <Form>\r\n        <TextArea\r\n            onKeyPress={({ key }: { key: string }) => {\r\n                if (key === 'Enter') handleBlur(temp);\r\n            }}\r\n            value={temp as string | undefined}\r\n            onChange={(e, { value }) => setTemp(value ? value.toString() : '')}\r\n            onBlur={(e: InputEvent) => {\r\n                const target = e.target as HTMLInputElement;\r\n                handleBlur(target.value);\r\n            }}\r\n        />\r\n    </Form>\r\n);\r\n\r\nexport default TextAreaChild;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Button, Icon, Label, SemanticCOLORS } from 'semantic-ui-react';\r\nimport {\r\n    ActionsAction,\r\n    AlbumsAction,\r\n    BotAction,\r\n    ThreadsAction,\r\n} from '../../types/types';\r\nimport setValue from '../../services/Api/services/SetValue';\r\nimport setProperty from '../../services/Api/services/SetProperty';\r\nimport dispatchAll from './services/DispatchAll';\r\nimport CheckboxChild from './components/CheckboxChild';\r\nimport InputChild from './components/InputChild';\r\nimport TextAreaChild from './components/TextAreaChild';\r\n\r\nexport type ActionArray = [\r\n    ActionsAction | AlbumsAction | BotAction | ThreadsAction\r\n];\r\n\r\n//lots of props, but it's a very capable input component\r\ninterface EditableInputProps {\r\n    //function called instead of dispatchBefore\r\n    //lets you use editableInput for something besides dispatching actions\r\n    callback?: (...args: any) => void;\r\n\r\n    //display a checkbox\r\n    checkbox?: boolean;\r\n\r\n    //the path of the variable that the input edits\r\n    //the API uses this to find the setting that is being edited\r\n    configKeys: string[];\r\n\r\n    //dispatch to the appropriate config\r\n    dispatch?: (action: any) => void;\r\n\r\n    //dispatch actions before calling setValue\r\n    dispatchBefore?: ActionArray;\r\n\r\n    //dispatch actions if setValue fails\r\n    dispatchOnFailure?: ActionArray;\r\n\r\n    //dispatch actions is setValue succeeds\r\n    dispatchOnSuccess?: ActionArray;\r\n\r\n    //the name of the input\r\n    //this is used as the key in the key: value pair\r\n    //when editing the config file in the API/Bot\r\n    input: string;\r\n\r\n    labelColor?: SemanticCOLORS;\r\n\r\n    //human readable label text if the input name isn't good\r\n    labelText?: string;\r\n\r\n    //password mask the input\r\n    password?: boolean;\r\n\r\n    renameValueTo?: string;\r\n    //target is an object property, not a value\r\n    //e.g. the album name is used as a key for the value of the album\r\n    //it is an object property of albums\r\n    targetsProperty?: boolean;\r\n\r\n    //the parent comppnent wants to know the EditableInput is open for editing\r\n    tellParentOpen?: (open: boolean) => void;\r\n\r\n    //show a textarea when open instead of an input\r\n    //right now, will automatically choose textarea if value is longer than 19 char\r\n    textArea?: boolean;\r\n\r\n    //the starting value\r\n    value?: string | boolean;\r\n}\r\n\r\nconst EditableInput = ({\r\n    configKeys,\r\n    callback,\r\n    checkbox,\r\n    dispatch,\r\n    dispatchBefore,\r\n    dispatchOnFailure,\r\n    dispatchOnSuccess,\r\n    input,\r\n    labelColor,\r\n    labelText,\r\n    password,\r\n    renameValueTo,\r\n    targetsProperty,\r\n    tellParentOpen,\r\n    textArea,\r\n    value,\r\n}: EditableInputProps) => {\r\n    const [open, setOpen] = useState(false);\r\n    const [temp, setTemp] = useState(value);\r\n\r\n    //if the parent component wants to know if the input is open\r\n    useEffect(() => {\r\n        tellParentOpen && tellParentOpen(open);\r\n    }, [open, tellParentOpen]);\r\n\r\n    const handleBlur = async (value: string | boolean | number | undefined) => {\r\n        setOpen(false);\r\n\r\n        if (callback) {\r\n            callback(value);\r\n        } else if (dispatch) {\r\n            //if requested, dispatch the attempt to context\r\n            dispatchAll({\r\n                dispatch,\r\n                actions: dispatchBefore?.map((action) =>\r\n                    renameValueTo\r\n                        ? {\r\n                              ...action,\r\n                              [renameValueTo]: value,\r\n                          }\r\n                        : {\r\n                              ...action,\r\n                              //add the current value to the action\r\n                              value,\r\n                          }\r\n                ) as any,\r\n            });\r\n\r\n            //call api to attempt changeValue\r\n            const result = targetsProperty\r\n                ? await setProperty({\r\n                      configKeys: [...configKeys, input],\r\n                      value,\r\n                  })\r\n                : await setValue({\r\n                      configKeys: [...configKeys, input],\r\n                      value,\r\n                  });\r\n\r\n            result\r\n                ? //if value was set, dispatch success actions\r\n                  dispatchAll({ dispatch, actions: dispatchOnSuccess })\r\n                : //else dispatch failure actions\r\n                  //normally, to reset value to prior value\r\n                  //because change failed\r\n                  dispatchAll({ dispatch, actions: dispatchOnFailure });\r\n        } else {\r\n            //call api to attempt changeValue\r\n            targetsProperty\r\n                ? await setProperty({\r\n                      configKeys: [...configKeys, input],\r\n                      value,\r\n                  })\r\n                : await setValue({\r\n                      configKeys: [...configKeys, input],\r\n                      value,\r\n                  });\r\n        }\r\n    };\r\n\r\n    const checkboxChild = (\r\n        <CheckboxChild\r\n            data-testid=\"status\"\r\n            handleBlur={handleBlur}\r\n            value={value}\r\n        />\r\n    );\r\n\r\n    const inputChild = (\r\n        <InputChild\r\n            handleBlur={handleBlur}\r\n            temp={temp}\r\n            setTemp={setTemp}\r\n            password={!!password}\r\n        />\r\n    );\r\n\r\n    const textareaChild = (\r\n        <TextAreaChild handleBlur={handleBlur} temp={temp} setTemp={setTemp} />\r\n    );\r\n\r\n    // prettier-ignore\r\n    const child = checkbox\r\n        ? checkboxChild\r\n        : textArea || (typeof(value) === 'string' && value.length > 19)\r\n            ? textareaChild\r\n            : inputChild;\r\n\r\n    return (\r\n        <div style={{ marginTop: 10, marginBottom: 10 }}>\r\n            <Button\r\n                icon\r\n                onClick={() =>\r\n                    checkbox ? handleBlur(!!!value) : setOpen(!open)\r\n                }\r\n            >\r\n                <Icon name=\"edit\" />\r\n            </Button>\r\n            <Label\r\n                size=\"large\"\r\n                content={`${labelText ? labelText : input}`}\r\n                color={labelColor}\r\n            />{' '}\r\n            {\r\n                // prettier-ignore\r\n                checkbox \r\n                ? child \r\n                : open \r\n                    ? child \r\n                    : password \r\n                        ? <span style={{fontSize:'x-large'}}>•••••</span> \r\n                        :value\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EditableInput;\r\n","import React from 'react';\r\nimport ReactMarkdown from 'react-markdown/with-html';\r\n\r\nconst MyMarkdown = (props: any) => {\r\n    //the maximum width of an image in the markdown\r\n    const maxWidth = props?.maxWidth;\r\n\r\n    const imageNodes = new Map();\r\n    const nodeKey = (position: any) => JSON.stringify(position.start); // or use your own hash function\r\n\r\n    const allowNodes = (node: any) => {\r\n        if (node.type === 'image') imageNodes.set(nodeKey(node.position), node);\r\n        return true;\r\n    };\r\n\r\n    //ReactMarkdown accepts custom renderers\r\n    const renderers = {\r\n        //This custom renderer changes how images are rendered\r\n        //we use it to constrain the max width of an image to its container\r\n        image: ({ alt, src, title }: { alt: any; src: any; title: any }) => (\r\n            <img alt={alt} src={src} title={title} style={{ maxWidth }} />\r\n        ),\r\n    };\r\n\r\n    return (\r\n        <ReactMarkdown\r\n            {...props}\r\n            allowNodes={allowNodes}\r\n            linkTarget={'_blank'}\r\n            renderers={renderers}\r\n            rawSourcePos\r\n        />\r\n    );\r\n};\r\n\r\nexport default MyMarkdown;\r\n","import { useCallback, useEffect, useState } from 'react';\r\n\r\nconst useResize = (myRef: any) => {\r\n    const getWidth = useCallback(() => myRef?.current?.offsetWidth, [myRef]);\r\n\r\n    const [width, setWidth] = useState<number | undefined>(undefined);\r\n\r\n    useEffect(() => {\r\n        const handleResize = () => {\r\n            setWidth(getWidth());\r\n        };\r\n\r\n        if (myRef.current) {\r\n            setWidth(getWidth());\r\n        }\r\n\r\n        window.addEventListener('resize', handleResize);\r\n\r\n        return () => {\r\n            window.removeEventListener('resize', handleResize);\r\n        };\r\n    }, [getWidth, myRef]);\r\n\r\n    return width && width > 25 ? width - 25 : width;\r\n};\r\n\r\nexport default useResize;\r\n","import React, { useState, useContext } from 'react';\r\nimport { Button, Segment, Popup, Icon } from 'semantic-ui-react';\r\nimport ReactMarkdown from '../../../Markdown';\r\nimport useResize from '../../../APIs/components/Instructions/GenericInstructions/services/UseResize';\r\nimport { KeyStringInterface } from '../../../../types/types';\r\nimport { InstructionsContext } from '../../../../services/InstructionsContext';\r\n\r\nexport const getInstructionsObject = (botName: string): KeyStringInterface => ({\r\n    AddImageToAlbum: `# Add Image to Album\r\n\r\nYou can request to add an image to one of the albums that the bot uses. \r\nThe bot will add all images in a post and/or in quoted posts to the image review queue. \r\nIf the person running the bot approves an image, it will be added to the album.  `,\r\n    DeathToll: `# Death Toll\r\n\r\n${botName} can tell you all about coronavirus. \r\nThis handy action scrapes the CDC.gov website and posts the current U.S. Coronavirus Death Toll. \r\nIt also posts the total number of coronavirus cases.`,\r\n    ImageCloser: `# Closer\r\n\r\nZooms in on image, uploads it to imgur, and posts the zoomed in image.`,\r\n    ImageFromAlbum: `# Get Image From Album\r\n\r\nYou can request a random image from one of the albums that the bot uses. \r\nThe bot will quote your post and post one of the images from the requested album.`,\r\n    ImageRedder: `# Redder\r\n\r\nRaises the red levels of an image, hosts it on imgur, and posts it.`,\r\n    ImageWider: `# Wider\r\n\r\nWidens an image, hosts it on imgur, and posts it.`,\r\n    NoneAThisMatters: `# None of this matters\r\n\r\nA bleak philosophical outlook.\r\n    \r\n![](https://i.imgur.com/yX9KZ49.jpg)`,\r\n    PostCat: `# Cat Picture\r\n\r\nUses [the cat api](http://www.thecatapi.com) to post a random picture of a cat. \r\n    \r\n![](https://cdn2.thecatapi.com/images/2fp.jpg)`,\r\n    PostTrumpTweet: `# Trump Tweet\r\n\r\nPosts the latest tweet from the president.`,\r\n    SASmiley: `# Smiley\r\n\r\nPosts a random SA Smiley.`,\r\n    Tayne: `# Tayne\r\n\r\nA wonderful gif of Tayne doing a hat wobble.\r\n    \r\n![](https://i.imgur.com/5oCbDFL.gif)`,\r\n    Thoughts: `# Thoughts\r\n\r\nUses [deepai text generator](https://deepai.org/machine-learning-model/text-generator) to produce ${botName}'s thoughts about anything. `,\r\n    TrumpWeight: `# Trump Weight\r\n\r\nGives the official regime figures for trump weight and height. \r\nNeeds to be updated as of mid 2020.`,\r\n    Tweet: `# Tweet\r\n\r\nPosts the latest tweet from the requested twitter account.`,\r\n    WhatIsLove: `# What is love?\r\n\r\nBaby don't hurt me\r\n    \r\nDon't hurt me\r\n    \r\nNo more\r\n    \r\n![](https://i.imgur.com/qXcDIBl.gif)\r\n    \r\nThis incredibly useful action posts a gif from night at the roxbury`,\r\n});\r\n\r\nexport const Instructions = ({\r\n    action,\r\n    addChildren,\r\n}: {\r\n    action: string;\r\n    addChildren?: JSX.Element[];\r\n}) => {\r\n    const { botName } = useContext(InstructionsContext);\r\n    const divRef = React.useRef<HTMLDivElement>(null);\r\n    const maxWidth = useResize(divRef);\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const instructionsObject = getInstructionsObject(botName);\r\n\r\n    const input = instructionsObject[action];\r\n\r\n    const children = [\r\n        <ReactMarkdown\r\n            key=\"markdown\"\r\n            escapeHtml={false}\r\n            source={input}\r\n            maxWidth={maxWidth}\r\n        />,\r\n    ];\r\n\r\n    addChildren?.forEach((child, index) =>\r\n        children.push({ ...child, key: index.toString() })\r\n    );\r\n\r\n    const noInstructions = !input;\r\n\r\n    return (\r\n        <div ref={divRef} style={{ marginBottom: 20 }}>\r\n            <Popup\r\n                trigger={\r\n                    <div\r\n                        style={{ cursor: 'pointer' }}\r\n                        onClick={() => input && setOpen(!open)}\r\n                    >\r\n                        <Button>{action}</Button>\r\n                        <Icon name=\"question circle\" />\r\n                    </div>\r\n                }\r\n                content=\"click for instructions\"\r\n                disabled={open || noInstructions}\r\n            />\r\n            {open && <Segment children={children} />}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Instructions;\r\n","export const spacing = { marginTop: 10, marginBottom: 10 };\r\n","import React, { useEffect, useState, useCallback, useContext } from 'react';\r\nimport { authFetchJSON } from '../../../../services/Api/services/AuthFetch';\r\nimport ReactMarkdown from '../../../Markdown';\r\nimport useResize from '../../../APIs/components/Instructions/GenericInstructions/services/UseResize';\r\nimport { ActionsContext } from '../../../../services/ActionsContext';\r\nimport { Segment, Header } from 'semantic-ui-react';\r\nimport { getInstructionsObject } from '../Instructions';\r\nimport { InstructionsContext } from '../../../../services/InstructionsContext';\r\n\r\nexport const RegexTriggerDisplay = () => {\r\n    const { action } = useContext(ActionsContext);\r\n    const { botName } = useContext(InstructionsContext);\r\n    const instructionsObject = getInstructionsObject(botName);\r\n\r\n    const divRef = React.useRef<HTMLDivElement>(null);\r\n    const maxWidth = useResize(divRef);\r\n    const input = action && instructionsObject[action];\r\n\r\n    const noExample = !input;\r\n\r\n    return (\r\n        <Segment>\r\n            {noExample ? (\r\n                <Header as=\"h4\">\r\n                    No example given to match regular expression trigger\r\n                </Header>\r\n            ) : (\r\n                <div ref={divRef}>\r\n                    <ReactMarkdown\r\n                        key=\"markdown\"\r\n                        escapeHtml={false}\r\n                        source={input}\r\n                        maxWidth={maxWidth}\r\n                    />{' '}\r\n                </div>\r\n            )}\r\n        </Segment>\r\n    );\r\n};\r\n\r\nexport default RegexTriggerDisplay;\r\n","import React, { useContext } from 'react';\r\nimport { spacing } from '../../../../services/Spacing';\r\nimport { Segment, Header } from 'semantic-ui-react';\r\nimport { Trigger as TriggerType } from '../../../../types/types';\r\nimport { BotContext } from '../../../../services/BotContext';\r\nimport RegexTriggerDisplay from '../RegexTriggerDisplay';\r\n\r\nconst Trigger = ({ trigger }: { trigger: TriggerType }) => {\r\n    const { settings } = useContext(BotContext);\r\n    const botName = settings?.botName;\r\n    return (\r\n        <Segment>\r\n            {botName} {trigger.toString()}\r\n        </Segment>\r\n    );\r\n};\r\n\r\nconst TriggerInstruction = ({ triggers }: { triggers: TriggerType[] }) => {\r\n    const hasRegExp = triggers.some((el) => el instanceof RegExp);\r\n\r\n    return !!triggers.length ? (\r\n        <Segment>\r\n            <Header as=\"h2\">How to trigger this action</Header>\r\n            <div style={spacing}>\r\n                {triggers.map(\r\n                    (trigger, index) =>\r\n                        !(trigger instanceof RegExp) && (\r\n                            <Trigger key={index} trigger={trigger} />\r\n                        )\r\n                )}\r\n            </div>\r\n            {hasRegExp && <RegexTriggerDisplay />}\r\n        </Segment>\r\n    ) : (\r\n        <Segment>\r\n            <Header as=\"h2\">No triggers set for this action</Header>\r\n        </Segment>\r\n    );\r\n};\r\n\r\nexport default TriggerInstruction;\r\n","import React, { useContext } from 'react';\r\nimport setValue from '../../../../../../services/Api/services/SetValue';\r\nimport { ActionsContext } from '../../../../../../services/ActionsContext';\r\nimport { ActionsActionTypes } from '../../../../../../types/types';\r\nimport { Button, Popup } from 'semantic-ui-react';\r\n\r\nconst AddTriggerButton = () => {\r\n    const { dispatch, action, actions } = useContext(ActionsContext);\r\n    if (!action) return <></>;\r\n\r\n    const triggersKeys = ['actions', action, 'triggers'];\r\n\r\n    const addTrigger = async () => {\r\n        const oldValue = actions[action];\r\n        const triggers = [...oldValue.triggers];\r\n        triggers.push('');\r\n\r\n        const newValue = { ...oldValue, triggers };\r\n\r\n        dispatch({\r\n            type: ActionsActionTypes.setAction,\r\n            key: action,\r\n            value: newValue,\r\n        });\r\n\r\n        const result = await setValue({\r\n            configKeys: triggersKeys,\r\n            value: triggers,\r\n        });\r\n\r\n        if (!result)\r\n            dispatch({\r\n                type: ActionsActionTypes.setAction,\r\n                key: action,\r\n                value: oldValue,\r\n            });\r\n    };\r\n    return (\r\n        <Popup\r\n            content={`Add trigger to ${action}`}\r\n            trigger={<Button icon=\"add\" onClick={() => addTrigger()} />}\r\n        />\r\n    );\r\n};\r\n\r\nexport default AddTriggerButton;\r\n","import React, { useContext, useState, useEffect } from 'react';\r\nimport { ActionsContext } from '../../../../services/ActionsContext';\r\nimport { Loader, Popup, Icon, Input, Label, Button } from 'semantic-ui-react';\r\nimport { Trigger } from '../../../../types/types';\r\nimport { spacing } from '../../../../services/Spacing';\r\nimport {\r\n    deleteTrigger,\r\n    convertTrigger,\r\n    setTriggerValue,\r\n} from '../../../../services/Api';\r\n\r\nconst TriggerInput = ({\r\n    index,\r\n    trigger,\r\n}: {\r\n    index: number;\r\n    trigger: Trigger;\r\n}) => {\r\n    const isRegExp = trigger instanceof RegExp;\r\n\r\n    const { dispatch, action, actions } = useContext(ActionsContext);\r\n    const [open, setOpen] = useState(false);\r\n    const [changing, setChanging] = useState(false);\r\n    const [temp, setTemp] = useState(trigger.toString());\r\n    const triggersLength = action && actions[action].triggers.length;\r\n\r\n    useEffect(() => {\r\n        setOpen(false);\r\n    }, [triggersLength, setOpen]);\r\n\r\n    if (!action) return <Loader active />;\r\n\r\n    //sets the value of the trigger\r\n    const handleBlur = (value: string) => {\r\n        !changing &&\r\n            setTriggerValue({\r\n                dispatch,\r\n                actions,\r\n                action,\r\n                index,\r\n                value,\r\n            });\r\n    };\r\n\r\n    const changeTrigger = async () => {\r\n        setChanging(true);\r\n\r\n        await convertTrigger({\r\n            dispatch,\r\n            actions,\r\n            action,\r\n            index,\r\n            trigger,\r\n        });\r\n\r\n        setChanging(false);\r\n    };\r\n\r\n    return (\r\n        <div style={spacing}>\r\n            <Button icon onClick={() => setOpen(!open)}>\r\n                <Icon name=\"edit\" />\r\n            </Button>\r\n            <Label\r\n                size=\"large\"\r\n                content={index}\r\n                color={isRegExp ? 'blue' : undefined}\r\n            />{' '}\r\n            {!open ? (\r\n                trigger.toString()\r\n            ) : (\r\n                <>\r\n                    <Input\r\n                        onBlur={(e: InputEvent) => {\r\n                            const target = e.target as HTMLInputElement;\r\n                            handleBlur(target.value);\r\n                        }}\r\n                        onKeyPress={({ key }: { key: string }) => {\r\n                            if (key === 'Enter') handleBlur(temp);\r\n                        }}\r\n                        onChange={({ target }) => setTemp(target.value)}\r\n                        value={temp}\r\n                    />\r\n                    <Popup\r\n                        content={`Delete trigger ${index} from ${action}`}\r\n                        trigger={\r\n                            <Icon\r\n                                name=\"trash\"\r\n                                onClick={() =>\r\n                                    deleteTrigger({\r\n                                        dispatch,\r\n                                        actions,\r\n                                        action,\r\n                                        index,\r\n                                    })\r\n                                }\r\n                                size=\"large\"\r\n                                style={{ cursor: 'pointer' }}\r\n                            />\r\n                        }\r\n                    />\r\n                    <Popup\r\n                        content={\r\n                            isRegExp\r\n                                ? `Change to string`\r\n                                : `Change to RegExp. Must enclose expression in forward slash characters '/' '/' and add desired flags`\r\n                        }\r\n                        trigger={\r\n                            <Icon\r\n                                name={isRegExp ? 'text height' : 'r circle'}\r\n                                onClick={() => changeTrigger()}\r\n                                size=\"large\"\r\n                                style={{ cursor: 'pointer' }}\r\n                            />\r\n                        }\r\n                    />\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TriggerInput;\r\n","import React from 'react';\r\nimport { Segment, Header } from 'semantic-ui-react';\r\nimport AddTriggerButton from '../AddTriggerButton';\r\nimport TriggerInput from '../../../TriggerInput';\r\nimport { spacing } from '../../../../../../services/Spacing';\r\nimport { Trigger } from '../../../../../../types/types';\r\n\r\nconst Triggers = ({\r\n    action,\r\n    triggers,\r\n}: {\r\n    action: string;\r\n    triggers: Trigger[];\r\n}) => (\r\n    <Segment>\r\n        <Header as=\"h2\">Triggers</Header>\r\n        <AddTriggerButton />\r\n        <div style={spacing}>\r\n            {triggers.map((trigger, index) => (\r\n                <TriggerInput\r\n                    key={`${index}${action}`}\r\n                    index={index}\r\n                    trigger={trigger}\r\n                />\r\n            ))}\r\n        </div>\r\n    </Segment>\r\n);\r\n\r\nexport default Triggers;\r\n","import React, { useContext } from 'react';\r\nimport { Header } from 'semantic-ui-react';\r\nimport { ActionsActionTypes } from '../../../../types/types';\r\nimport { ActionsContext } from '../../../../services/ActionsContext';\r\nimport EditableInput from '../../../EditableInput';\r\nimport Instructions from '../Instructions';\r\nimport TriggerInstruction from '../TriggerInstruction';\r\nimport Triggers from './components/Triggers';\r\n\r\nconst actionsConfigKeys = ['actions'];\r\n\r\nconst NoAction = () => (\r\n    <div>\r\n        <Header as=\"h2\">No Action Selected</Header>\r\n        Actions are things that the bot can do when it receives an instruction.\r\n        <br />\r\n        The bot receives instructions by reading posts.\r\n        <br />\r\n        A post that begins with the botName is an instruction.\r\n        <br />\r\n        An instruction that matches an action trigger will trigger that action.\r\n        <br />\r\n        Most actions will cause the bot to make a post.\r\n        <br />\r\n        <a\r\n            href=\"https://jacobwicks.github.io/2020/07/02/write-forums-bot-action.html\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n        >\r\n            You can make new actions and add them to the bot.\r\n        </a>\r\n    </div>\r\n);\r\n\r\nconst CurrentAction = () => {\r\n    const { dispatch, action, actions } = useContext(ActionsContext);\r\n\r\n    const currentAction = action && actions[action];\r\n    if (!currentAction) return <NoAction />;\r\n\r\n    const { active, triggers } = currentAction;\r\n\r\n    const configKeys = [...actionsConfigKeys, action as string];\r\n\r\n    return (\r\n        <>\r\n            <Instructions\r\n                action={action as string}\r\n                addChildren={[<TriggerInstruction triggers={triggers} />]}\r\n            />\r\n            <EditableInput\r\n                checkbox={true}\r\n                configKeys={configKeys}\r\n                dispatch={dispatch}\r\n                dispatchBefore={[\r\n                    {\r\n                        type: ActionsActionTypes.setActive,\r\n                        key: action as string,\r\n                    } as any,\r\n                ]}\r\n                dispatchOnFailure={[\r\n                    {\r\n                        type: ActionsActionTypes.setActive,\r\n                        key: action as string,\r\n                        value: active,\r\n                    } as any,\r\n                ]}\r\n                input={'active'}\r\n                value={active}\r\n            />\r\n            <Triggers action={action as string} triggers={triggers} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default CurrentAction;\r\n","import React, { useContext } from 'react';\r\nimport SideBarActions from './components/SideBarActions';\r\nimport { Segment, Grid, Header } from 'semantic-ui-react';\r\nimport { ActionsContext } from '../../services/ActionsContext';\r\nimport { ActionsActionTypes } from '../../types/types';\r\nimport CurrentAction from './components/CurrentAction';\r\n\r\nconst Actions = () => {\r\n    const { dispatch } = useContext(ActionsContext);\r\n\r\n    return (\r\n        <Segment>\r\n            <Grid columns={2} divided>\r\n                <Grid.Column width={4}>\r\n                    <Header\r\n                        as=\"h2\"\r\n                        style={{ cursor: 'pointer' }}\r\n                        onClick={() =>\r\n                            dispatch({\r\n                                type: ActionsActionTypes.currentAction,\r\n                                key: '',\r\n                            })\r\n                        }\r\n                    >\r\n                        Actions{' '}\r\n                    </Header>\r\n                    <SideBarActions />\r\n                </Grid.Column>\r\n                <Grid.Column width={12}>\r\n                    <CurrentAction />\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    );\r\n};\r\n\r\nexport default Actions;\r\n","import React, { createContext, useReducer } from 'react';\r\nimport {\r\n    ImageReviewStatus,\r\n    Album,\r\n    Albums,\r\n    ReviewImage,\r\n} from '../../types/types';\r\nimport log from '../Log';\r\nimport { AlbumsAction, AlbumsState } from '../../types/types';\r\n\r\nexport const initialState = {\r\n    album: undefined,\r\n    albums: {\r\n        Schnorkles: {\r\n            description: 'Insane in the Poll Plane (Insane in the Brain!)',\r\n            hash: 'YFfW2VB',\r\n            status: true,\r\n        },\r\n        Snoo: {\r\n            description:\r\n                \"You think you're too good to look at rats? YOU AREN'T!!!\",\r\n            hash: 'EDGl2l2',\r\n            status: true,\r\n        },\r\n        Corn: {\r\n            description: 'Pictures of corn are funny for this one afternoon',\r\n            hash: 'XU0p9vr',\r\n            status: true,\r\n        },\r\n    },\r\n    fetching: false,\r\n    hasFailed: false,\r\n    imageQueue: [] as ReviewImage[],\r\n    review: false,\r\n    dispatch: (action: AlbumsAction) => undefined,\r\n} as AlbumsState;\r\n\r\n//the reducer handles actions\r\nexport const reducer = (state: AlbumsState, action: AlbumsAction) => {\r\n    switch (action.type) {\r\n        case 'accept': {\r\n            const { hash } = action;\r\n            if (state.imageQueue) {\r\n                const imageQueue = [...state.imageQueue];\r\n                const image = imageQueue.find((image) => image.hash === hash);\r\n                image?.status && (image.status = ImageReviewStatus.accepted);\r\n                return { ...state, imageQueue };\r\n            } else return state;\r\n        }\r\n        case 'createNewAlbum': {\r\n            const { album, description, hash } = action;\r\n            const { albums } = state;\r\n            const newAlbums: Albums = { ...albums };\r\n\r\n            const newAlbum: Album = {\r\n                description: description ? description : '',\r\n                hash: hash ? hash : '',\r\n                status: true,\r\n            };\r\n\r\n            newAlbums[album] = newAlbum;\r\n            return {\r\n                ...state,\r\n                albums: newAlbums,\r\n            };\r\n        }\r\n        case 'delete': {\r\n            const { hash } = action;\r\n            const { imageQueue } = state;\r\n            if (!imageQueue) return state;\r\n            const newQueue = imageQueue.filter((image) => image.hash !== hash);\r\n            return { ...state, imageQueue: newQueue };\r\n        }\r\n        case 'deleteAlbum': {\r\n            const { album } = action;\r\n            const { album: currentAlbum, albums, imageQueue } = state;\r\n\r\n            //if the current album is this album, set current album to undefined\r\n            //this album is getting deleted and can't be displayed\r\n            const newAlbum = currentAlbum === album ? undefined : currentAlbum;\r\n\r\n            //new albums object\r\n            const newAlbums: Albums = { ...albums };\r\n            //delete the album from albums\r\n            delete newAlbums[album];\r\n\r\n            //filter all images for album out of the queue\r\n            const newImageQueue = imageQueue?.filter(\r\n                (image) => image.album !== album\r\n            );\r\n            return {\r\n                ...state,\r\n                album: newAlbum,\r\n                albums: newAlbums,\r\n                imageQueue: newImageQueue,\r\n            };\r\n        }\r\n        case 'fetchAlbumsAttempt': {\r\n            return {\r\n                ...state,\r\n                albums: undefined,\r\n                imageQueue: undefined,\r\n                hasFailed: false,\r\n                fetching: true,\r\n            };\r\n        }\r\n        case 'fetchAlbumsFailure': {\r\n            return {\r\n                ...state,\r\n                albums: undefined,\r\n                imageQueue: undefined,\r\n                hasFailed: true,\r\n                fetching: false,\r\n            };\r\n        }\r\n        case 'fetchAlbumsSuccess': {\r\n            const { albums, imageQueue } = action;\r\n            return {\r\n                ...state,\r\n                albums,\r\n                imageQueue,\r\n                hasFailed: false,\r\n                fetching: false,\r\n            };\r\n        }\r\n        case 'pending': {\r\n            const { hash } = action;\r\n            if (state.imageQueue) {\r\n                const imageQueue = [...state.imageQueue];\r\n                const image = imageQueue.find((image) => image.hash === hash);\r\n\r\n                if (!image) return state;\r\n\r\n                image.status && (image.status = ImageReviewStatus.pending);\r\n\r\n                const newImageQueue = imageQueue\r\n                    .filter((image) => image.hash !== hash)\r\n                    .push(image);\r\n\r\n                return { ...state, newImageQueue };\r\n            } else return state;\r\n        }\r\n        case 'reject': {\r\n            const { hash } = action;\r\n            if (state.imageQueue) {\r\n                const imageQueue = [...state.imageQueue];\r\n                const image = imageQueue.find((image) => image.hash === hash);\r\n                image?.status && (image.status = ImageReviewStatus.rejected);\r\n                return { ...state, imageQueue };\r\n            } else return state;\r\n        }\r\n        case 'setAlbum': {\r\n            const { album } = action;\r\n            return { ...state, album };\r\n        }\r\n        case 'setDescription': {\r\n            const { album, value } = action;\r\n            const { albums } = state;\r\n            if (!albums) return state;\r\n            const newAlbum = { ...albums[album] };\r\n            newAlbum.description = value;\r\n\r\n            return {\r\n                ...state,\r\n                albums: {\r\n                    ...albums,\r\n                    [album]: newAlbum,\r\n                },\r\n            };\r\n        }\r\n        case 'setFetchingImageQueue': {\r\n            const { fetching } = action;\r\n            return {\r\n                ...state,\r\n                fetching,\r\n            };\r\n        }\r\n        case 'setImageQueue': {\r\n            const { imageQueue } = action;\r\n            return {\r\n                ...state,\r\n                imageQueue,\r\n            };\r\n        }\r\n        case 'setHash': {\r\n            const { album, value } = action;\r\n            const { albums } = state;\r\n            if (!albums) return state;\r\n            const newAlbum = { ...albums[album] };\r\n            newAlbum.hash = value;\r\n\r\n            return {\r\n                ...state,\r\n                albums: {\r\n                    ...albums,\r\n                    [album]: newAlbum,\r\n                },\r\n            };\r\n        }\r\n        case 'setName': {\r\n            const { album, value } = action;\r\n            const { albums, imageQueue } = state;\r\n            if (!albums) return state;\r\n\r\n            const newAlbums = { ...albums };\r\n            newAlbums[value] = { ...newAlbums[album] };\r\n            delete newAlbums[album];\r\n\r\n            const newQueue = imageQueue?.map((image) =>\r\n                image.album === album ? { ...image, album: value } : image\r\n            );\r\n\r\n            return {\r\n                ...state,\r\n                album: value,\r\n                albums: newAlbums,\r\n                imageQueue: newQueue,\r\n            };\r\n        }\r\n        case 'setReview': {\r\n            const { review } = action;\r\n            return { ...state, review: !!review };\r\n        }\r\n        case 'setStatus': {\r\n            const { album, value } = action;\r\n            const { albums } = state;\r\n            if (!albums) return state;\r\n            const newAlbum = { ...albums[album] };\r\n            newAlbum.status = value;\r\n\r\n            return {\r\n                ...state,\r\n                albums: {\r\n                    ...albums,\r\n                    [album]: newAlbum,\r\n                },\r\n            };\r\n        }\r\n        default:\r\n            //log the bad action\r\n            log('albumsContext reducer received bad action', action);\r\n\r\n            //return the current state unchanged\r\n            return state;\r\n    }\r\n};\r\n\r\nconst AlbumsContext = createContext(initialState);\r\n\r\n//the Props that the AlbumsProvider will accept\r\ntype AlbumsProps = {\r\n    //You can put react components inside of the Provider component\r\n    children: React.ReactNode;\r\n\r\n    //We might want to pass a state into the Provider for testing purposes\r\n    testState?: AlbumsState;\r\n\r\n    testDispatch?: (args: any) => void;\r\n};\r\n\r\nconst AlbumsProvider = ({ children, testState, testDispatch }: AlbumsProps) => {\r\n    //useReducer returns an array containing the state at [0]\r\n    //and the dispatch method at [1]\r\n    //use array destructuring to get state and dispatch\r\n    const [state, dispatch] = useReducer(\r\n        reducer,\r\n        testState ? testState : initialState\r\n    );\r\n\r\n    //add dispatch to value object and cast to AlbumsState\r\n    const value = {\r\n        ...state,\r\n        dispatch,\r\n    } as AlbumsState;\r\n\r\n    return (\r\n        <AlbumsContext.Provider value={value}>\r\n            {children}\r\n        </AlbumsContext.Provider>\r\n    );\r\n};\r\n\r\nexport { AlbumsContext, AlbumsProvider };\r\n","import React, { useContext } from 'react';\r\nimport { AlbumsActionTypes } from '../../../../types/types';\r\nimport { AlbumsContext } from '../../../../services/AlbumsContext';\r\nimport EditableInput from '../../../EditableInput';\r\n\r\nconst AlbumInput = ({\r\n    album,\r\n    checkbox,\r\n    input,\r\n    textArea,\r\n    type,\r\n    value,\r\n}: {\r\n    album: string;\r\n\r\n    //render a checkbox\r\n    checkbox?: boolean;\r\n\r\n    //the type of action to set the input value\r\n    type: AlbumsActionTypes;\r\n\r\n    //the input\r\n    input: string;\r\n\r\n    //render a textarea\r\n    textArea?: boolean;\r\n\r\n    //the old value of the input\r\n    value?: string | boolean;\r\n}) => {\r\n    const { dispatch } = useContext(AlbumsContext);\r\n    const configKeys = ['albums', album];\r\n\r\n    return (\r\n        <EditableInput\r\n            checkbox={checkbox}\r\n            configKeys={configKeys}\r\n            dispatch={dispatch}\r\n            dispatchBefore={[{ type, album } as any]}\r\n            dispatchOnFailure={[\r\n                {\r\n                    type,\r\n                    album,\r\n                    value,\r\n                } as any,\r\n            ]}\r\n            input={input}\r\n            textArea={textArea}\r\n            value={value}\r\n        />\r\n    );\r\n};\r\n\r\nexport default AlbumInput;\r\n","import React, { useContext, useState } from 'react';\r\nimport { Modal, Icon, Button, Message, Input } from 'semantic-ui-react';\r\nimport { AlbumsContext } from '../../../../services/AlbumsContext';\r\nimport { deleteAlbum } from '../../../../services/Api';\r\n\r\nconst DeleteAlbumModal = ({\r\n    album,\r\n    close,\r\n    open,\r\n}: {\r\n    album: string;\r\n    close: () => void;\r\n    open: boolean;\r\n}) => {\r\n    const { dispatch } = useContext(AlbumsContext);\r\n    const [canDelete, setCanDelete] = useState(Boolean);\r\n\r\n    return (\r\n        <Modal closeOnDimmerClick onClose={() => close()} open={open}>\r\n            <Modal.Header>Delete {album}?</Modal.Header>\r\n            <Modal.Content>\r\n                <Modal.Description>\r\n                    <Message warning>\r\n                        <Message.Header>\r\n                            Deleting this album from the SA Bot does not also\r\n                            delete it off of imgur.\r\n                        </Message.Header>\r\n                        <p>\r\n                            Deleting this album will delete all pending images\r\n                            for this album from the queue.\r\n                        </p>\r\n                    </Message>\r\n                    <p>\r\n                        Type the name of the album and click 'Delete' to delete\r\n                    </p>\r\n                    <Input\r\n                        onChange={(e, { value }: { value: string }) =>\r\n                            setCanDelete(\r\n                                value?.toLowerCase() === album.toLowerCase()\r\n                            )\r\n                        }\r\n                    />\r\n                    <br />\r\n                    <br />\r\n                </Modal.Description>\r\n                <Modal.Actions>\r\n                    <Button color=\"green\" onClick={() => close()}>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button\r\n                        disabled={!canDelete}\r\n                        color={canDelete ? 'red' : undefined}\r\n                        onClick={() =>\r\n                            deleteAlbum({\r\n                                album,\r\n                                dispatch,\r\n                            })\r\n                        }\r\n                    >\r\n                        <Icon name=\"exclamation\" /> Delete\r\n                    </Button>\r\n                </Modal.Actions>\r\n            </Modal.Content>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default DeleteAlbumModal;\r\n","import React, { useContext, useState } from 'react';\r\nimport { AlbumsContext } from '../../../../services/AlbumsContext';\r\nimport { Header, Loader, Icon, Popup } from 'semantic-ui-react';\r\nimport { AlbumsActionTypes } from '../../../../types/types';\r\nimport AlbumInput from '../AlbumInput';\r\nimport DeleteAlbumModal from '../DeleteAlbumModal';\r\nimport EditableInput from '../../../EditableInput';\r\n\r\nconst Album = ({ album }: { album: string }) => {\r\n    const { dispatch, albums } = useContext(AlbumsContext);\r\n    const [showDeleteButton, setShowDeleteButton] = useState(false);\r\n    const [showDeleteModal, setShowDeleteModal] = useState(false);\r\n\r\n    //albums isn't necessarily loaded\r\n    if (!albums)\r\n        return (\r\n            <div>\r\n                <Header>{album}</Header>\r\n                <Loader active />\r\n            </div>\r\n        );\r\n\r\n    //the full album object from albums\r\n    const thisAlbum = albums[album];\r\n    if (!thisAlbum) return <Loader active />;\r\n\r\n    const setAlbumName = (value: string) => {\r\n        dispatch({ type: AlbumsActionTypes.setName, album, value });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Header>\r\n                <EditableInput\r\n                    configKeys={['albums']}\r\n                    callback={setAlbumName}\r\n                    input={album}\r\n                    labelText=\"Album\"\r\n                    targetsProperty\r\n                    tellParentOpen={(isOpen: boolean) =>\r\n                        setShowDeleteButton(isOpen)\r\n                    }\r\n                    value={album}\r\n                />\r\n                {showDeleteButton && (\r\n                    <Popup\r\n                        content={`Delete ${album} from SA Bot`}\r\n                        trigger={\r\n                            <Icon\r\n                                name=\"trash\"\r\n                                onClick={() => setShowDeleteModal(true)}\r\n                                size=\"large\"\r\n                                style={{ cursor: 'pointer' }}\r\n                            />\r\n                        }\r\n                    />\r\n                )}\r\n                <DeleteAlbumModal\r\n                    album={album}\r\n                    close={() => setShowDeleteModal(false)}\r\n                    open={showDeleteModal}\r\n                />\r\n            </Header>\r\n            {thisAlbum.hash ? (\r\n                <a\r\n                    href={`https://imgur.com/a/${thisAlbum.hash}`}\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                >\r\n                    View album {album} on Imgur\r\n                </a>\r\n            ) : (\r\n                'No hash set for this album, Imgur link unavailable'\r\n            )}\r\n            <br />\r\n            <br />\r\n            <AlbumInput\r\n                album={album}\r\n                input=\"description\"\r\n                textArea\r\n                type={AlbumsActionTypes.setDescription}\r\n                value={thisAlbum.description}\r\n            />\r\n            <AlbumInput\r\n                album={album}\r\n                input=\"hash\"\r\n                type={AlbumsActionTypes.setHash}\r\n                value={thisAlbum.hash}\r\n            />\r\n            <AlbumInput\r\n                album={album}\r\n                input=\"status\"\r\n                type={AlbumsActionTypes.setStatus}\r\n                checkbox\r\n                value={thisAlbum.status}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Album;\r\n","import { useEffect, useRef } from 'react';\r\n\r\nconst usePrevious = <T extends any>(value: T): T | undefined => {\r\n    const ref = useRef<T>();\r\n    useEffect(() => {\r\n        ref.current = value;\r\n    });\r\n    return ref.current;\r\n};\r\n\r\nexport default usePrevious;\r\n","import React from 'react';\r\nimport { Button, Segment } from 'semantic-ui-react';\r\n\r\nconst ImageReviewControls = ({\r\n    acceptImage,\r\n    rejectImage,\r\n    lastImage,\r\n    firstImage,\r\n    nextImage,\r\n    prevImage,\r\n}: {\r\n    acceptImage: () => void;\r\n    rejectImage: () => void;\r\n    firstImage: () => void;\r\n    lastImage: () => void;\r\n\r\n    nextImage: () => void;\r\n    prevImage: () => void;\r\n}) => (\r\n    <Segment>\r\n        <Button icon=\"backward\" onClick={() => firstImage()} />\r\n        <Button icon=\"step backward\" onClick={() => prevImage()} />\r\n        <Button color=\"green\" icon=\"thumbs up\" onClick={() => acceptImage()} />\r\n        <Button color=\"red\" icon=\"thumbs down\" onClick={() => rejectImage()} />\r\n        <Button icon=\"step forward\" onClick={() => nextImage()} />\r\n        <Button icon=\"forward\" onClick={() => lastImage()} />\r\n    </Segment>\r\n);\r\n\r\nexport default ImageReviewControls;\r\n","import React from 'react';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport { directions } from '../..';\r\n\r\nconst variants = {\r\n    enter: ({ enterDirection }: { enterDirection: directions }) => {\r\n        return {\r\n            //from the right side of the screen\r\n            x:\r\n                enterDirection === directions.left\r\n                    ? -1000\r\n                    : enterDirection === directions.right\r\n                    ? 1000\r\n                    : 0,\r\n\r\n            //image fades as it leaves\r\n            opacity: 0,\r\n        };\r\n    },\r\n    center: {\r\n        zIndex: 1,\r\n        x: 0,\r\n        opacity: 1,\r\n    },\r\n    exit: ({ exitDirection }: { exitDirection: directions }) => {\r\n        return {\r\n            zIndex: 0,\r\n\r\n            //from the right side of the screen\r\n            // prettier-ignore\r\n            x:\r\n                exitDirection === directions.left\r\n                    ? -1000\r\n                    : exitDirection === directions.right\r\n                        ? 1000\r\n                        : 0,\r\n\r\n            //to the bottom of the screen (1000)\r\n            //or to the top -1000\r\n            //y: direction < 0 ? 1000 : -1000,\r\n            // prettier-ignore\r\n            y:  exitDirection === directions.down\r\n                    ? 1000\r\n                    : exitDirection === directions.up\r\n                        ? -1000\r\n                        : 0,\r\n            //image fades as it leaves\r\n            opacity: 0,\r\n        };\r\n    },\r\n};\r\n\r\nconst AnimatedImage = ({\r\n    custom,\r\n    image,\r\n    keyProp,\r\n}: {\r\n    custom: {\r\n        enterDirection: directions;\r\n        exitDirection: directions;\r\n    };\r\n    image: string;\r\n    keyProp: number;\r\n}) =>\r\n    image ? (\r\n        <AnimatePresence initial={false} custom={custom}>\r\n            <motion.img\r\n                key={keyProp}\r\n                src={image}\r\n                custom={custom}\r\n                variants={variants}\r\n                initial=\"enter\"\r\n                animate=\"center\"\r\n                exit=\"exit\"\r\n                style={{ maxWidth: 300, maxHeight: 300, position: 'absolute' }}\r\n                transition={{\r\n                    x: { type: 'spring', stiffness: 300, damping: 200 },\r\n                    opacity: { duration: 0.2 },\r\n                }}\r\n            />\r\n        </AnimatePresence>\r\n    ) : (\r\n        <></>\r\n    );\r\n\r\nexport default AnimatedImage;\r\n","import React from 'react';\r\nimport { Header, Image } from 'semantic-ui-react';\r\nimport { SAUser } from '../../types/types';\r\n\r\nconst User = ({ avatar, name, profile, regDate, title }: SAUser) => (\r\n    <div>\r\n        <Header>\r\n            <a href={profile} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                {name}\r\n            </a>\r\n        </Header>\r\n        {regDate}\r\n        <br />\r\n        <br />\r\n        {avatar && <Image src={avatar} />}\r\n        {title}\r\n    </div>\r\n);\r\n\r\nexport default User;\r\n","import React, { ReactElement } from 'react';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport { ReviewImage as ReviewImageType } from '../../../../../../types/types';\r\nimport { getDate } from '../../services/GetDate';\r\nimport User from '../../../../../User';\r\n\r\nconst ReviewImage = ({\r\n    animatedImage,\r\n    reviewImage,\r\n}: {\r\n    animatedImage: ReactElement;\r\n    reviewImage: ReviewImageType;\r\n}) => (\r\n    <div style={{ height: 600 }}>\r\n        <Grid columns=\"2\" divided>\r\n            <Grid.Column width=\"2\">\r\n                <User {...reviewImage.submittedBy} />\r\n            </Grid.Column>\r\n            <Grid.Column>\r\n                <p>{getDate(reviewImage.submittedAt)}</p>\r\n                <p>{reviewImage.status}</p>\r\n                <div\r\n                    style={{\r\n                        width: 300,\r\n                        position: 'relative',\r\n                        display: 'flex',\r\n                        justifyContent: 'center',\r\n                        alignItems: 'left',\r\n                    }}\r\n                >\r\n                    {animatedImage}\r\n                </div>\r\n            </Grid.Column>\r\n        </Grid>\r\n    </div>\r\n);\r\n\r\nexport default ReviewImage;\r\n","export const getDate = (submittedDate: string) => {\r\n    submittedDate = new Date(submittedDate).toString();\r\n\r\n    //get the date\r\n    submittedDate = submittedDate.slice(0, submittedDate.length - 36);\r\n\r\n    //the minutes\r\n    const minutes = submittedDate.slice(-3);\r\n\r\n    let hours = submittedDate.slice(-5, -3);\r\n\r\n    //set am or pm\r\n    const amPm = Number(hours) > 11 ? 'PM' : 'AM';\r\n\r\n    //set hours\r\n    if (Number(hours) > 12) hours = (Number(hours) - 12).toString();\r\n    if (Number(hours) === 0) hours = '12';\r\n\r\n    //set the date\r\n    const date = submittedDate.slice(0, submittedDate.length - 5);\r\n\r\n    return `${date} ${hours} ${minutes} ${amPm}`;\r\n};\r\n","import authFetch from '../../AuthFetch';\r\nimport { AlbumsAction, AlbumsActionTypes } from '../../../../../types/types';\r\n\r\nconst addExistingAlbumAPI = async ({\r\n    album,\r\n    hash,\r\n    description,\r\n}: {\r\n    album: string;\r\n    hash: string;\r\n    description?: string;\r\n}) => {\r\n    const route = 'addExistingAlbum';\r\n\r\n    const response = await authFetch(route, true, {\r\n        album,\r\n        description,\r\n        hash,\r\n    });\r\n\r\n    return response?.status === 200;\r\n};\r\n\r\nconst addExistingAlbum = async ({\r\n    album,\r\n    dispatch,\r\n    description,\r\n    hash,\r\n}: {\r\n    album: string;\r\n    dispatch: React.Dispatch<AlbumsAction>;\r\n    description?: string;\r\n    hash: string;\r\n}) => {\r\n    //create the new album locally\r\n    dispatch({\r\n        type: AlbumsActionTypes.createNewAlbum,\r\n        album,\r\n        hash,\r\n        description,\r\n    });\r\n\r\n    //set the current album to the new album\r\n    dispatch({\r\n        type: AlbumsActionTypes.setAlbum,\r\n        album,\r\n    });\r\n};\r\n\r\nexport default addExistingAlbum;\r\n","import React, { useContext, useState } from 'react';\r\nimport { Modal, Icon, Button, Message, Input } from 'semantic-ui-react';\r\nimport { AlbumsContext } from '../../../../../../services/AlbumsContext';\r\nimport addExistingAlbum from '../../../../../../services/Api/services/Albums/AddExistingAlbum';\r\n\r\nconst AddExistingAlbumModal = ({\r\n    showCreateNew,\r\n    close,\r\n    open,\r\n}: {\r\n    showCreateNew: () => void;\r\n    close: () => void;\r\n    open: boolean;\r\n}) => {\r\n    const { dispatch } = useContext(AlbumsContext);\r\n    const [hash, setHash] = useState('');\r\n    const [name, setName] = useState('');\r\n    const [description, setDescription] = useState('');\r\n\r\n    return (\r\n        <Modal closeOnDimmerClick onClose={() => close()} open={open}>\r\n            <Modal.Header>\r\n                Add existing Imgur Album{' '}\r\n                <Button\r\n                    floated=\"right\"\r\n                    onClick={(e) => {\r\n                        //bubbling will click the dimmer after the other modal renders\r\n                        //the other modal is smaller, so it will think the click was outside of it\r\n                        //and trigger close\r\n                        e.preventDefault();\r\n\r\n                        showCreateNew();\r\n                    }}\r\n                >\r\n                    Create New Album\r\n                </Button>\r\n            </Modal.Header>\r\n            <Modal.Content>\r\n                <Modal.Description>\r\n                    <Message>\r\n                        <Message.Header>\r\n                            Enter a name and the hash of an existing Imgur album\r\n                            to add it to the bot.\r\n                        </Message.Header>\r\n                    </Message>\r\n                    <Input\r\n                        label=\"Hash\"\r\n                        onChange={(e, { value }: { value: string }) =>\r\n                            setHash(value)\r\n                        }\r\n                    />\r\n                    <br />\r\n                    <br />\r\n                    <Input\r\n                        label=\"Name\"\r\n                        onChange={(e, { value }: { value: string }) =>\r\n                            setName(value)\r\n                        }\r\n                    />\r\n                    <br />\r\n                    <br />\r\n                    <Input\r\n                        label=\"Description\"\r\n                        onChange={(e, { value }: { value: string }) =>\r\n                            setDescription(value)\r\n                        }\r\n                    />\r\n                    <br />\r\n                    <br />\r\n                </Modal.Description>\r\n                <Modal.Actions>\r\n                    <Button onClick={() => close()}>Cancel</Button>\r\n                    <Button\r\n                        disabled={!name || !hash}\r\n                        color={name ? 'green' : undefined}\r\n                        onClick={() =>\r\n                            addExistingAlbum({\r\n                                dispatch,\r\n                                album: name,\r\n                                description,\r\n                                hash,\r\n                            })\r\n                        }\r\n                    >\r\n                        <Icon name=\"add\" />\r\n                        Add Album\r\n                    </Button>\r\n                </Modal.Actions>\r\n            </Modal.Content>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default AddExistingAlbumModal;\r\n","import React, { useContext, useState } from 'react';\r\nimport { Modal, Icon, Button, Message, Input } from 'semantic-ui-react';\r\nimport { AlbumsContext } from '../../../../../../services/AlbumsContext';\r\nimport { createNewAlbum } from '../../../../../../services/Api';\r\n\r\nconst CreateAlbumModal = ({\r\n    addExisting,\r\n    close,\r\n    open,\r\n}: {\r\n    addExisting: () => void;\r\n    close: () => void;\r\n    open: boolean;\r\n}) => {\r\n    const { dispatch } = useContext(AlbumsContext);\r\n    const [name, setName] = useState('');\r\n    const [description, setDescription] = useState('');\r\n\r\n    return (\r\n        <Modal closeOnDimmerClick onClose={() => close()} open={open}>\r\n            <Modal.Header>\r\n                Create New Album{' '}\r\n                <Button floated=\"right\" onClick={() => addExisting()}>\r\n                    Add Existing Album\r\n                </Button>\r\n            </Modal.Header>\r\n            <Modal.Content>\r\n                <Modal.Description>\r\n                    <Message>\r\n                        <Message.Header>\r\n                            Creates a new album on Imgur and adds it to the SA\r\n                            Bot\r\n                        </Message.Header>\r\n                    </Message>\r\n\r\n                    <Input\r\n                        label=\"Name\"\r\n                        onChange={(e, { value }: { value: string }) =>\r\n                            setName(value)\r\n                        }\r\n                    />\r\n                    <br />\r\n                    <br />\r\n                    <Input\r\n                        label=\"Description\"\r\n                        onChange={(e, { value }: { value: string }) =>\r\n                            setDescription(value)\r\n                        }\r\n                    />\r\n                    <br />\r\n                    <br />\r\n                </Modal.Description>\r\n                <Modal.Actions>\r\n                    <Button onClick={() => close()}>Cancel</Button>\r\n                    <Button\r\n                        disabled={!name}\r\n                        color={name ? 'green' : undefined}\r\n                        onClick={() =>\r\n                            createNewAlbum({\r\n                                dispatch,\r\n                                album: name,\r\n                                description,\r\n                            })\r\n                        }\r\n                    >\r\n                        <Icon name=\"exclamation\" />\r\n                        Create Album\r\n                    </Button>\r\n                </Modal.Actions>\r\n            </Modal.Content>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default CreateAlbumModal;\r\n","import React, { useContext, useState, useEffect } from 'react';\r\nimport { Button, Popup } from 'semantic-ui-react';\r\nimport { AlbumsContext } from '../../../../services/AlbumsContext';\r\nimport AddExistingAlbumModal from './components/AddExistingAlbumModal';\r\nimport CreateAlbumModal from './components/CreateAlbumModal';\r\n\r\nconst AddOrCreateAlbumModal = () => {\r\n    const { album } = useContext(AlbumsContext);\r\n    const [open, setOpen] = useState(false);\r\n    const [addExisting, setAddExisting] = useState(false);\r\n\r\n    //close when album changes\r\n    useEffect(() => {\r\n        setOpen(false);\r\n        setAddExisting(false);\r\n    }, [album]);\r\n\r\n    return (\r\n        <>\r\n            <Popup\r\n                content=\"Create new album or Add existing album\"\r\n                trigger={\r\n                    <Button\r\n                        float=\"right\"\r\n                        icon=\"add\"\r\n                        onClick={() => setOpen(true)}\r\n                    />\r\n                }\r\n            />\r\n            {addExisting ? (\r\n                <AddExistingAlbumModal\r\n                    showCreateNew={() => setAddExisting(false)}\r\n                    close={() => {\r\n                        setOpen(false);\r\n                    }}\r\n                    open={open}\r\n                />\r\n            ) : (\r\n                <CreateAlbumModal\r\n                    addExisting={() => setAddExisting(true)}\r\n                    close={() => {\r\n                        setOpen(false);\r\n                    }}\r\n                    open={open}\r\n                />\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AddOrCreateAlbumModal;\r\n","import React, { useContext } from 'react';\r\nimport { Label, Popup } from 'semantic-ui-react';\r\nimport { AlbumsContext } from '../../../../services/AlbumsContext';\r\nimport { ImageReviewStatus, AlbumsActionTypes } from '../../../../types/types';\r\n\r\nconst SidebarAlbum = ({ album }: { album: string }): JSX.Element => {\r\n    const { dispatch, album: currentAlbum, imageQueue } = useContext(\r\n        AlbumsContext\r\n    );\r\n\r\n    //filter the image queue to the pending images for this albumg\r\n    const images = imageQueue?.filter(\r\n        (img) =>\r\n            img.album.toLowerCase() === album.toLowerCase() &&\r\n            img.status === ImageReviewStatus.pending\r\n    ).length;\r\n\r\n    return (\r\n        <div style={{ marginBottom: 10, marginTop: 10 }}>\r\n            <Label\r\n                color={album === currentAlbum ? 'green' : undefined}\r\n                style={{ cursor: 'pointer' }}\r\n                onClick={() =>\r\n                    dispatch({\r\n                        type: AlbumsActionTypes.setAlbum,\r\n                        album,\r\n                    })\r\n                }\r\n            >\r\n                {album}\r\n            </Label>\r\n            <Popup\r\n                content={`Click to review images for ${album}`}\r\n                disabled={!images}\r\n                trigger={\r\n                    <Label\r\n                        style={{ cursor: 'pointer' }}\r\n                        size=\"large\"\r\n                        color={images ? 'red' : undefined}\r\n                        onClick={() => {\r\n                            dispatch({\r\n                                type: AlbumsActionTypes.setAlbum,\r\n                                album,\r\n                            });\r\n                            images &&\r\n                                dispatch({\r\n                                    type: AlbumsActionTypes.setReview,\r\n                                    review: true,\r\n                                });\r\n                        }}\r\n                    >\r\n                        {images}\r\n                    </Label>\r\n                }\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SidebarAlbum;\r\n","import React, { useContext } from 'react';\r\nimport { AlbumsContext } from '../../../../services/AlbumsContext';\r\nimport SidebarAlbum from '../SidebarAlbum';\r\n\r\nconst SideBar = () => {\r\n    const albums = useContext(AlbumsContext)?.albums || [];\r\n\r\n    const sideBarAlbums = Object.keys(albums)\r\n        .sort()\r\n        .map((thisAlbum, index) => (\r\n            <SidebarAlbum album={thisAlbum} key={index} />\r\n        ));\r\n\r\n    return <div>{sideBarAlbums}</div>;\r\n};\r\n\r\nexport default SideBar;\r\n","import React, { useContext, useEffect, useState } from 'react';\r\nimport { AlbumsContext } from '../../services/AlbumsContext';\r\nimport { loadAlbums, loadImageQueue } from '../../services/Api/';\r\nimport { Grid, Button, Segment, Header } from 'semantic-ui-react';\r\nimport Album from './components/Album';\r\nimport ImageReview from './components/ImageReview';\r\nimport { ImageReviewStatus, AlbumsActionTypes } from '../../types/types';\r\nimport AddOrCreateAlbumModal from './components/AddOrCreateAlbumModal';\r\nimport SideBar from './components/SideBar';\r\n\r\nconst NoAlbum = () => (\r\n    <div>\r\n        <Header as=\"h2\">No Album Selected</Header>\r\n        The bot can access albums that are hosted on{' '}\r\n        <a\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            href=\"https://www.imgur.com\"\r\n        >\r\n            Imgur\r\n        </a>\r\n        .\r\n        <br />\r\n        You need to add an Imgur API key to the bot for this feature to work.\r\n        <br />\r\n        You can use the API tab to add the Imgur API key. <br />\r\n        You can add existing Imgur Albums that you own. <br />\r\n        To add an existing Imgur Album you{' '}\r\n        <a\r\n            href=\"https://dev.to/codingcoach/get-your-album-id-in-imgur-b6c\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n        >\r\n            {' '}\r\n            need the Album Hash, aka Id\r\n        </a>{' '}\r\n        <br />\r\n        You can also create new Imgur Albums using the control panel.\r\n    </div>\r\n);\r\n\r\nconst Albums = () => {\r\n    const { dispatch, album, fetching, imageQueue, review } = useContext(\r\n        AlbumsContext\r\n    );\r\n\r\n    const toReview = imageQueue?.filter(\r\n        (img) => img.status === ImageReviewStatus.pending\r\n    ).length;\r\n\r\n    const singular = toReview === 1;\r\n\r\n    return (\r\n        <div>\r\n            <Segment>\r\n                <Grid columns={2} divided>\r\n                    <Grid.Column width={4}>\r\n                        <Header\r\n                            as=\"h2\"\r\n                            onClick={() =>\r\n                                dispatch({\r\n                                    type: AlbumsActionTypes.setAlbum,\r\n                                    album: '',\r\n                                })\r\n                            }\r\n                            style={{ cursor: 'pointer' }}\r\n                        >\r\n                            Albums\r\n                            <Button\r\n                                disabled={fetching}\r\n                                onClick={(e) => {\r\n                                    e.stopPropagation();\r\n                                    loadAlbums(dispatch);\r\n                                }}\r\n                                floated=\"right\"\r\n                                icon=\"refresh\"\r\n                            />\r\n                        </Header>\r\n                        <div>\r\n                            Add album {'   '}\r\n                            <AddOrCreateAlbumModal />\r\n                        </div>\r\n                        <SideBar />\r\n                    </Grid.Column>\r\n                    <Grid.Column>\r\n                        {album ? (\r\n                            <Album album={album} key={album} />\r\n                        ) : (\r\n                            <NoAlbum />\r\n                        )}\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            {imageQueue && (\r\n                <Button\r\n                    onClick={() =>\r\n                        album\r\n                            ? dispatch({\r\n                                  type: AlbumsActionTypes.setAlbum,\r\n                                  album: '',\r\n                              })\r\n                            : dispatch({\r\n                                  type: AlbumsActionTypes.setReview,\r\n                                  review: !review,\r\n                              })\r\n                    }\r\n                >\r\n                    There {singular ? 'is' : 'are'} {toReview ? toReview : 'no'}{' '}\r\n                    image\r\n                    {!singular && 's'} waiting for review\r\n                </Button>\r\n            )}\r\n            {review && <ImageReview album={album} />}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Albums;\r\n","import React, { createContext, useReducer } from 'react';\r\nimport { ApiAction, ApiState } from '../../types/types';\r\n\r\nconst initialState = {\r\n    apis: {\r\n        catAPI: 'exampleCatApiKey',\r\n        deepAi: 'exampleDeepAiKey',\r\n        imgur: {\r\n            accessToken: 'exampleImgurAccessToken',\r\n            clientId: 'exampleImgurClientId',\r\n            clientSecret: 'exampleImgurClientSecret',\r\n        },\r\n        twitter: {\r\n            bearerToken: 'exampleTwitterBearerToken',\r\n            consumerKey: 'exampleTwitterConsumerKey',\r\n            consumerSecret: 'exampleTwitterConsumerSecret',\r\n        },\r\n    },\r\n    current: '',\r\n    fetching: [],\r\n    failed: [],\r\n    dispatch: (action: ApiAction) => undefined,\r\n} as ApiState;\r\n\r\nlet reducer = (state: ApiState, action: ApiAction) => {\r\n    switch (action.type) {\r\n        case 'failed': {\r\n            const { api } = action;\r\n\r\n            const failed = state.failed.includes(api)\r\n                ? state.failed\r\n                : [...state.failed, api];\r\n\r\n            const fetching = state.fetching.filter((f) => f !== api);\r\n\r\n            return {\r\n                ...state,\r\n                failed,\r\n                fetching,\r\n            };\r\n        }\r\n        case 'fetching': {\r\n            const { api } = action;\r\n\r\n            const fetching = state.fetching.includes(api)\r\n                ? state.fetching\r\n                : [...state.fetching, api];\r\n\r\n            return {\r\n                ...state,\r\n                fetching,\r\n            };\r\n        }\r\n        case 'setApis': {\r\n            const { apis } = action;\r\n            const fetching = state.fetching.filter((f) => f !== 'apis');\r\n            return {\r\n                ...state,\r\n                apis,\r\n                fetching,\r\n            };\r\n        }\r\n        case 'setApi': {\r\n            const { api, value } = action;\r\n            const apis = { ...state.apis, [api]: value };\r\n            const fetching = state.fetching.filter((f) => f !== api);\r\n            return {\r\n                ...state,\r\n                apis,\r\n                fetching,\r\n            };\r\n        }\r\n        case 'setCurrent': {\r\n            const { current } = action;\r\n            return {\r\n                ...state,\r\n                current,\r\n            };\r\n        }\r\n        default: {\r\n            console.log(`apiContext default`, action);\r\n            //throw new Error();\r\n            return state;\r\n        }\r\n    }\r\n};\r\n\r\nconst ApiContext = createContext(initialState);\r\n\r\n//the Props that the CardProvider will accept\r\ntype ApiProps = {\r\n    //You can put react components inside of the Provider component\r\n    children: React.ReactNode;\r\n\r\n    //We might want to pass a state into the CardProvider for testing purposes\r\n    testState?: ApiState;\r\n\r\n    testDispatch?: (args: any) => void;\r\n};\r\n\r\nconst ApiProvider = ({ children, testState, testDispatch }: ApiProps) => {\r\n    //useReducer returns an array containing the state at [0]\r\n    //and the dispatch method at [1]\r\n    //use array destructuring to get state and dispatch\r\n    const [state, dispatch] = useReducer(\r\n        reducer,\r\n        testState ? testState : initialState\r\n    );\r\n\r\n    //add dispatch to value object and cast to ApiState\r\n    const value = {\r\n        ...state,\r\n        dispatch,\r\n    } as ApiState;\r\n\r\n    return <ApiContext.Provider value={value}>{children}</ApiContext.Provider>;\r\n};\r\n\r\nexport { ApiContext, ApiProvider };\r\n","import React, { useContext } from 'react';\r\nimport { ApiActionTypes } from '../../../../types/Apis';\r\nimport { ApiContext } from '../../../../services/ApiContext';\r\nimport EditableInput from '../../../EditableInput';\r\nimport setValue from '../../../../services/Api/services/SetValue';\r\n\r\nconst ApiInput = ({\r\n    api,\r\n    input,\r\n    keys,\r\n    value,\r\n}: {\r\n    //the name of the api\r\n    api: string;\r\n\r\n    //the name of the target property\r\n    input?: string;\r\n\r\n    //apis can contain objects\r\n    //if so, these keys locate the property for editing\r\n    keys?: string[];\r\n\r\n    //the value\r\n    value: string | boolean;\r\n}) => {\r\n    const { dispatch, apis } = useContext(ApiContext);\r\n    let configKeys = keys ? keys : ['apis', api];\r\n\r\n    //add the named input to the configKeys string[]\r\n    //if no input value, then the api key just holds a string\r\n    input && (configKeys = [...configKeys, input]);\r\n\r\n    const oldValue = apis[api];\r\n\r\n    const callback = async (value: string) => {\r\n        if (typeof oldValue === 'string') {\r\n            dispatch({\r\n                type: ApiActionTypes.setApi,\r\n                api,\r\n                value,\r\n            });\r\n        } else {\r\n            //if (!input) throw new Error('cannot set api value without target');\r\n            let newValue = { ...oldValue };\r\n            let target = newValue as any;\r\n\r\n            configKeys.slice(2).forEach((key, index) => {\r\n                if (index + 3 === configKeys.length) {\r\n                    if (Array.isArray(target) || target.hasOwnProperty(key)) {\r\n                        //set the last key equal to the supplied value\r\n                        target[key] = value;\r\n                    } else target = undefined as any;\r\n                } else target = target[key];\r\n            });\r\n\r\n            dispatch({\r\n                type: ApiActionTypes.setApi,\r\n                api,\r\n                value: newValue,\r\n            });\r\n        }\r\n\r\n        const result = await setValue({\r\n            configKeys,\r\n            value,\r\n        });\r\n\r\n        if (!result)\r\n            dispatch({\r\n                type: ApiActionTypes.setApi,\r\n                api,\r\n                value: oldValue,\r\n            });\r\n    };\r\n\r\n    return (\r\n        <EditableInput\r\n            configKeys={configKeys}\r\n            callback={callback}\r\n            input={input ? input : api}\r\n            labelText={input ? undefined : `${api} Key`}\r\n            value={value}\r\n        />\r\n    );\r\n};\r\n\r\nexport default ApiInput;\r\n","import React, { useState } from 'react';\r\nimport { Button, Icon, Label, Segment } from 'semantic-ui-react';\r\nimport ArrayDisplay from '../ArrayDisplay';\r\nimport ApiInput from '../ApiInput';\r\n\r\nconst ObjectDisplay = ({\r\n    api,\r\n    keys,\r\n    object,\r\n    name,\r\n}: {\r\n    api: string;\r\n    keys: string[];\r\n    object: { [key: string]: any };\r\n    name: string;\r\n}) => {\r\n    const [open, setOpen] = useState(false);\r\n    const configKeys = [...keys, name];\r\n    return (\r\n        <div style={{ marginTop: 10, marginBottom: 10 }}>\r\n            <span style={{ cursor: 'pointer' }} onClick={() => setOpen(!open)}>\r\n                <Button icon=\"edit\" />\r\n                <Label size=\"large\">{name}</Label>\r\n                <Icon name={open ? 'caret down' : 'caret right'} />\r\n            </span>\r\n            {open && (\r\n                <Segment style={{ marginBottom: 10 }}>\r\n                    {Object.keys(object).map((key: string) => {\r\n                        const value = object[key];\r\n\r\n                        //display it as an array, object, or string\r\n                        const display =\r\n                            // prettier-ignore\r\n                            value === 'object' \r\n                            ? Array.isArray(value) \r\n                                ? <ArrayDisplay \r\n                                    api={api} \r\n                                    array={value} \r\n                                    keys={keys} \r\n                                    name={key}\r\n                                    />\r\n                                : <ObjectDisplay\r\n                                    api={api}    \r\n                                    object={value}\r\n                                    name={key}\r\n                                    keys={[...keys, key]}\r\n                                />\r\n                            :  <ApiInput\r\n                                api={api}\r\n                                keys={configKeys}\r\n                                input={key}\r\n                                value={value}\r\n                                />;\r\n\r\n                        return <div key={key}>{display}</div>;\r\n                    })}\r\n                </Segment>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ObjectDisplay;\r\n","import React, { useState } from 'react';\r\nimport { Button, Label, Icon, Segment } from 'semantic-ui-react';\r\nimport ObjectDisplay from '../ObjectDisplay';\r\nimport ApiInput from '../ApiInput';\r\n\r\nconst ArrayDisplay = ({\r\n    api,\r\n    keys,\r\n    array,\r\n    name,\r\n}: {\r\n    api: string;\r\n    keys: string[];\r\n    array: any[];\r\n    name: string;\r\n}) => {\r\n    const [open, setOpen] = useState(false);\r\n\r\n    return (\r\n        <div style={{ marginTop: 10, marginBottom: 10 }}>\r\n            <span style={{ cursor: 'pointer' }} onClick={() => setOpen(!open)}>\r\n                <Button icon=\"edit\" />\r\n                <Label size=\"large\">{name}</Label>\r\n                <Icon name={open ? 'caret down' : 'caret right'} />\r\n            </span>\r\n            {open && (\r\n                <Segment style={{ marginBottom: 10 }}>\r\n                    {array.map((el, key) => {\r\n                        const elKeys = [...keys, name];\r\n\r\n                        return React.isValidElement(el) ? (\r\n                            el\r\n                        ) : typeof el === 'object' ? (\r\n                            Array.isArray(el) ? (\r\n                                <ArrayDisplay\r\n                                    api={api}\r\n                                    array={el}\r\n                                    keys={elKeys}\r\n                                    name={key.toString()}\r\n                                />\r\n                            ) : (\r\n                                <ObjectDisplay\r\n                                    api={api}\r\n                                    keys={elKeys}\r\n                                    object={el}\r\n                                    name={key.toString()}\r\n                                />\r\n                            )\r\n                        ) : (\r\n                            <ApiInput\r\n                                api={api}\r\n                                input={key.toString()}\r\n                                keys={[...elKeys]}\r\n                                value={el}\r\n                            />\r\n                        );\r\n                    })}\r\n                </Segment>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ArrayDisplay;\r\n","import React, { useState } from 'react';\r\nimport { Button, Segment, Popup } from 'semantic-ui-react';\r\nimport ReactMarkdown from '../../../../Markdown';\r\nimport useResize from './services/UseResize';\r\nimport { KeyStringInterface } from '../../../../../types/types';\r\n\r\nconst instructionsObject: KeyStringInterface = {\r\n    catAPI: `# To Get the Cat Api Key\r\n\r\n1. Go to the cat api website and sign up <br/>\r\n<a href=\"https://thecatapi.com/signup\" target=\"_blank\">Sign Up Here on the Cat Api Website</a>\r\n\r\n2. You will get an email with the key in it.\r\n3. Copy the key from your email into the field on this page`,\r\n    deepAi: `# Deep AI API\r\n\r\nThe Deep AI API provides a [text generator](https://deepai.org/machine-learning-model/text-generator). zeroCool uses it to generate responses to posts.\r\n\r\nTo get the Deep AI API key, go to (https://deepai.org/) and click the 'sign up' button in the upper right. Provide a valid email address. They will email you a verification link. Click the verification link. You will then be logged in to the Deep AI website. The code will be displayed on the [Deep AI profile screen](https://deepai.org/dashboard/profile).`,\r\n    imgur: `# To get the Imgur api keys follow the 4 steps below\r\nIf you already have an account with Imgur, you can skip step 1.\r\n\r\n1. Register an Imgur account\r\n\r\n    <a href=\"https://imgur.com/register\" target=\"_blank\">https://imgur.com/register</a>\r\n\r\n2. Log in to Imgur\r\n\r\n    <a href=\"https://imgur.com/signin/\" target=\"_blank\">https://imgur.com/signin/</a>\r\n\r\n3. Register an application on Imgur\r\n\r\nRegistering an application will get you the client_id and client_secret.\r\n\r\nGo to this link:\r\n        <a href=\"https://api.imgur.com/oauth2/addclient\" target=\"_blank\">https://api.imgur.com/oauth2/addclient</a>\r\n\r\n\r\nYou'll need to log in with your imgur account if you haven't already.\r\n\r\nTo register the application type the application name. \r\n\r\nIt can be anything. I suggest something like \"saForumsBot\"\r\n\r\nSelect \"OAuth 2 authorization without a callback URL\".\r\n\r\nSkip the Authorization callback url and website fields.\r\n\r\nFill in the email and description fields.\r\n\r\nDo the captcha if there is one.\r\n\r\nClick submit.\r\n\r\nCopy and paste the client_id and client_secret into the fields on this screen.\r\n\r\nThe client_id is used to upload images \"anonymously\", meaning they don't go into one of the named albums on the account.\r\n\r\n4. Click the \"Get Token\" button to use your Imgur username and password to get the access token\r\n\r\nThe access token is used to upload images to albums.`,\r\n    twitter: `# Twitter\r\n\r\nTwitter documentation 1: [Application-only authentication and OAuth 2.0 Bearer Token](https://developer.twitter.com/en/docs/basics/authentication/api-reference/token)\r\n\r\nTwitter documentation 2: [Application-only authentication and OAuth 2.0 Bearer Token](https://developer.twitter.com/en/docs/basics/authentication/oauth-2-0/application-only)\r\n\r\nFollow these 6 steps to get the authentication codes that you need to make your bot work with Twitter.\r\n\r\n1. You need to [sign up for twitter](https://twitter.com/signup/), if you haven't already.\r\n\r\n2. Sign Up for Twitter Developer Account\r\n\r\nThen you need to [sign up for a twitter developer account](https://developer.twitter.com/en).\r\nAfter you sign up, you'll need to verify your account by clicking a link that Twitter will email you. You'll also have to provide a phone number.\r\n\r\n3. Create an App\r\n\r\nGo to the Twitter developer dashboard and [create an app](https://developer.twitter.com/en/apps/create).\r\n\r\n4. Get the 'Consumer Key' and the Consumer Secret'\r\nClick the 'Details' button for the app.\r\n\r\n![Details Button](https://jacobwicks.github.io/assets//images/2020-05-11/detailsButton.png)\r\n\r\nClick on 'Keys and Tokens'.\r\n\r\n![Keys and Tokens Button](https://jacobwicks.github.io/assets//images/2020-05-11/keysAndTokens.png)\r\n\r\nGet the consumer key and consumer secret for the app.\r\n\r\n![Key and Secret](https://jacobwicks.github.io/assets//images/2020-05-11/keySecret.png)\r\n\r\nCopy and paste the consumer key and consumer secret into the fields on this page.\r\n\r\n5. Click the button below to get the bearer token`,\r\n};\r\n\r\nexport const GenericInstructions = ({\r\n    api,\r\n    addChildren,\r\n}: {\r\n    api: string;\r\n    addChildren?: JSX.Element[];\r\n}) => {\r\n    const divRef = React.useRef<HTMLDivElement>(null);\r\n    const maxWidth = useResize(divRef);\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const input = instructionsObject[api];\r\n\r\n    const children = [\r\n        <ReactMarkdown\r\n            key=\"markdown\"\r\n            escapeHtml={false}\r\n            source={input}\r\n            maxWidth={maxWidth}\r\n        />,\r\n    ];\r\n\r\n    addChildren?.forEach((child, index) =>\r\n        children.push({ ...child, key: index.toString() })\r\n    );\r\n\r\n    const noInstructions = !input;\r\n\r\n    return (\r\n        <div ref={divRef} style={{ marginBottom: 20 }}>\r\n            <Popup\r\n                trigger={\r\n                    <Button onClick={() => input && setOpen(!open)}>\r\n                        {api}\r\n                    </Button>\r\n                }\r\n                content=\"click for instructions\"\r\n                disabled={open || noInstructions}\r\n            />\r\n            {open && <Segment children={children} />}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GenericInstructions;\r\n","import { authFetchJSON } from '../AuthFetch';\r\nimport { Apis, ApiAction, ApiActionTypes, Api } from '../../../../types/types';\r\n\r\ninterface TokenResponse {\r\n    token: string;\r\n}\r\n\r\ntype TR = TokenResponse | undefined;\r\n\r\nexport const getImgurToken = async ({\r\n    dispatch,\r\n    imgur,\r\n    username,\r\n    password,\r\n}: {\r\n    dispatch: React.Dispatch<ApiAction>;\r\n    imgur: Api;\r\n    username: string;\r\n    password: string;\r\n}) => {\r\n    if (typeof imgur === 'string') throw Error('imgur is not an object');\r\n\r\n    dispatch({ type: ApiActionTypes.fetching, api: 'imgur' });\r\n\r\n    const route = `tokens/imgur`;\r\n\r\n    const body = {\r\n        username,\r\n        password,\r\n    };\r\n\r\n    const accessToken = ((await authFetchJSON(route, true, body)) as TR)?.token;\r\n\r\n    accessToken\r\n        ? dispatch({\r\n              type: ApiActionTypes.setApi,\r\n              api: 'imgur',\r\n              value: { ...imgur, accessToken },\r\n          })\r\n        : dispatch({ type: ApiActionTypes.failed, api: 'imgur' });\r\n};\r\n\r\ninterface ApiResponse {\r\n    api: Api;\r\n}\r\n\r\ntype SingleR = ApiResponse | undefined;\r\n\r\nconst getApi = async (requestedApi: string) => {\r\n    const route = `api/${requestedApi}`;\r\n\r\n    const api = ((await authFetchJSON(route)) as SingleR)?.api;\r\n\r\n    return api;\r\n};\r\n\r\n//loads an Api into the Apicontext\r\nexport const loadApi = async ({\r\n    api,\r\n    dispatch,\r\n}: {\r\n    api: string;\r\n    dispatch: React.Dispatch<ApiAction>;\r\n}) => {\r\n    //tell the context that we are fetching this api\r\n    dispatch({ type: ApiActionTypes.fetching, api });\r\n\r\n    //get the api contents\r\n    const value = await getApi(api);\r\n\r\n    //if we got api\r\n    if (value) {\r\n        //load them into the context\r\n        dispatch({\r\n            type: ApiActionTypes.setApi,\r\n            api,\r\n            value,\r\n        });\r\n        //if not, note that loading failed\r\n    } else dispatch({ type: ApiActionTypes.failed, api });\r\n};\r\n\r\ninterface APIsResponse {\r\n    APIs: string[];\r\n}\r\n\r\ntype AR = APIsResponse | undefined;\r\n\r\n//gets the named APIs that the bot has in its config\r\nconst getAPIs = async () => {\r\n    const route = 'apis';\r\n    const apisArray = ((await authFetchJSON(route)) as AR)?.APIs;\r\n\r\n    //convert the APIsArray, which is an array of strings\r\n    //into the APIs type object that gets loaded into BotContext\r\n    //the actual content of each api will be loaded if/ when the user loads that individual api\r\n    const apis = apisArray\r\n        ? apisArray.reduce((acc, cur) => {\r\n              acc[cur] = {};\r\n              return acc;\r\n          }, {} as Apis)\r\n        : undefined;\r\n\r\n    return apis;\r\n};\r\n\r\n//loads APIs into the Apicontext\r\nconst loadAPIs = async (dispatch: React.Dispatch<ApiAction>) => {\r\n    //tell the context that we are fetching all apis\r\n    dispatch({ type: ApiActionTypes.fetching, api: 'apis' });\r\n\r\n    //get the apis object\r\n    const apis = await getAPIs();\r\n\r\n    //if we got apis\r\n    if (apis) {\r\n        //load them into the context\r\n        dispatch({\r\n            type: ApiActionTypes.setApis,\r\n            apis,\r\n        });\r\n        //if not, note that loading failed\r\n    } else dispatch({ type: ApiActionTypes.failed, api: 'apis' });\r\n};\r\n\r\nexport default loadAPIs;\r\n","import React, { useContext, useState, useEffect } from 'react';\r\nimport { Button, Icon, Input, Modal } from 'semantic-ui-react';\r\nimport { ApiContext } from '../../../../../../services/ApiContext';\r\nimport { getImgurToken } from '../../../../../../services/Api/services/APIs';\r\n\r\nconst GetTokenModal = ({\r\n    close,\r\n    open,\r\n}: {\r\n    close: () => void;\r\n    open: boolean;\r\n}) => {\r\n    const { dispatch, apis, fetching } = useContext(ApiContext);\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n\r\n    const isFetching = fetching.includes('imgur');\r\n    const imgur = apis?.imgur;\r\n\r\n    //disable the get token button if there isn't a username and password\r\n    const disabled = !username || !password || isFetching;\r\n\r\n    useEffect(() => {\r\n        !isFetching && close();\r\n    }, [close, isFetching]);\r\n\r\n    return (\r\n        <Modal\r\n            closeOnEscape\r\n            closeOnDimmerClick\r\n            open={open}\r\n            onClose={() => close()}\r\n        >\r\n            <Modal.Header>Get Imgur Token</Modal.Header>\r\n            <Modal.Content>\r\n                <Input\r\n                    label={{ content: 'Imgur Username' }}\r\n                    onChange={({ target }) => setUsername(target.value)}\r\n                    value={username}\r\n                />\r\n                <br />\r\n                <br />\r\n                <Input\r\n                    label={{ content: 'Imgur Password' }}\r\n                    onChange={({ target }) => setPassword(target.value)}\r\n                    value={password}\r\n                    type={'password'}\r\n                />\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <Button color=\"red\" onClick={() => close()}>\r\n                    <Icon name=\"remove\" /> Cancel\r\n                </Button>\r\n                <Button\r\n                    color=\"green\"\r\n                    disabled={disabled}\r\n                    loading={isFetching}\r\n                    onClick={() =>\r\n                        getImgurToken({\r\n                            dispatch,\r\n                            imgur,\r\n                            username,\r\n                            password,\r\n                        })\r\n                    }\r\n                >\r\n                    <Icon name=\"checkmark\" />\r\n                    Get Token\r\n                </Button>\r\n            </Modal.Actions>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default GetTokenModal;\r\n","import React, { useState } from 'react';\r\nimport { Button } from 'semantic-ui-react';\r\nimport GenericInstructions from '../GenericInstructions';\r\nimport GetTokenModal from './GetTokenModal';\r\n\r\nconst ImgurInstructions = ({ api }: { api: string }) => {\r\n    const [modalOpen, setModalOpen] = useState(false);\r\n\r\n    const getTokenButton = (\r\n        <Button onClick={() => setModalOpen(true)}>Get Token</Button>\r\n    );\r\n\r\n    const addChildren = [getTokenButton];\r\n\r\n    return (\r\n        <>\r\n            <GenericInstructions api={api} addChildren={addChildren} />\r\n            <GetTokenModal close={() => setModalOpen(false)} open={modalOpen} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ImgurInstructions;\r\n","import { ApiAction, Api, ApiActionTypes } from '../../../../../types/Apis';\r\nimport { authFetchJSON } from '../../AuthFetch';\r\n\r\ninterface BearerTokenResponse {\r\n    bearerToken: string;\r\n}\r\n\r\ntype BR = BearerTokenResponse | undefined;\r\n\r\nconst getTwitterToken = async ({\r\n    dispatch,\r\n    twitter,\r\n}: {\r\n    dispatch: React.Dispatch<ApiAction>;\r\n    twitter: Api;\r\n}) => {\r\n    if (typeof twitter === 'string') throw Error('twitter is not an object');\r\n\r\n    dispatch({ type: ApiActionTypes.fetching, api: 'twitter' });\r\n\r\n    const route = 'tokens/twitter';\r\n    const bearerToken = ((await authFetchJSON(route)) as BR)?.bearerToken;\r\n\r\n    bearerToken\r\n        ? dispatch({\r\n              type: ApiActionTypes.setApi,\r\n              api: 'twitter',\r\n              value: { ...twitter, bearerToken },\r\n          })\r\n        : dispatch({ type: ApiActionTypes.failed, api: 'twitter' });\r\n};\r\n\r\nexport default getTwitterToken;\r\n","import React, { useContext } from 'react';\r\nimport { Button } from 'semantic-ui-react';\r\nimport GenericInstructions from '../GenericInstructions';\r\nimport { ApiContext } from '../../../../../services/ApiContext';\r\nimport getTwitterToken from '../../../../../services/Api/services/APIs/Twitter';\r\n\r\nconst TwitterInstructions = ({ api }: { api: string }) => {\r\n    const { dispatch, apis, fetching } = useContext(ApiContext);\r\n\r\n    const isFetching = fetching.includes('twitter');\r\n    const twitter = apis?.twitter;\r\n\r\n    //@ts-ignore\r\n    const consumerKey = twitter?.consumerKey;\r\n    //@ts-ignore\r\n    const consumerSecret = twitter?.consumerSecret;\r\n\r\n    //disable the get token button if there isn't a consumerKey and consumerSecret\r\n    const disabled = isFetching || !consumerKey || !consumerSecret;\r\n\r\n    const getTokenButton = (\r\n        <Button\r\n            disabled={disabled}\r\n            loading={isFetching}\r\n            onClick={() =>\r\n                getTwitterToken({\r\n                    dispatch,\r\n                    twitter,\r\n                })\r\n            }\r\n        >\r\n            {disabled\r\n                ? `You need to fill in the ${\r\n                      !consumerKey ? 'consumerKey' : ''\r\n                  } ${!consumerKey && !consumerSecret ? 'and' : ''} ${\r\n                      !consumerSecret ? 'consumerSecret' : ''\r\n                  }.`\r\n                : 'Get Token'}\r\n        </Button>\r\n    );\r\n\r\n    const addChildren = [getTokenButton];\r\n\r\n    return <GenericInstructions api={api} addChildren={addChildren} />;\r\n};\r\n\r\nexport default TwitterInstructions;\r\n","import React, { ReactElement } from 'react';\r\nimport ImgurInstructions from './ImgurInstructions';\r\nimport TwitterInstructions from './TwitterInstructions';\r\nimport GenericInstructions from './GenericInstructions';\r\n\r\nconst Instructions = ({ api }: { api: string }) => {\r\n    const instructions = {\r\n        imgur: <ImgurInstructions api={api} />,\r\n        twitter: <TwitterInstructions api={api} />,\r\n        default: <GenericInstructions api={api} />,\r\n    } as { [key: string]: ReactElement };\r\n\r\n    return instructions[api.toLowerCase()]\r\n        ? instructions[api.toLowerCase()]\r\n        : instructions.default;\r\n};\r\n\r\nexport default Instructions;\r\n","import React, { useContext } from 'react';\r\nimport { ApiContext } from '../../../../services/ApiContext';\r\nimport ArrayDisplay from '../ArrayDisplay';\r\nimport ObjectDisplay from '../ObjectDisplay';\r\nimport Instructions from '../Instructions';\r\nimport ApiInput from '../ApiInput';\r\n\r\nconst ApiDisplay = ({ api }: { api: string }) => {\r\n    const { apis } = useContext(ApiContext);\r\n\r\n    const instructionChild = <Instructions key={api} api={api} />;\r\n    const thisApi = apis[api];\r\n\r\n    const configKeys = ['apis', api];\r\n\r\n    const apiChild =\r\n        typeof thisApi === 'string' ? (\r\n            <ApiInput api={api} value={thisApi} />\r\n        ) : (\r\n            Object.entries(thisApi).map(([key, value], index) => {\r\n                return (\r\n                    <div key={index}>\r\n                        {typeof value === 'object' ? (\r\n                            Array.isArray(value) ? (\r\n                                <ArrayDisplay\r\n                                    api={api}\r\n                                    keys={configKeys}\r\n                                    array={value}\r\n                                    name={key}\r\n                                />\r\n                            ) : (\r\n                                <ObjectDisplay\r\n                                    api={api}\r\n                                    keys={configKeys}\r\n                                    object={value}\r\n                                    name={key}\r\n                                />\r\n                            )\r\n                        ) : (\r\n                            <ApiInput api={api} input={key} value={value} />\r\n                        )}\r\n                    </div>\r\n                );\r\n            })\r\n        );\r\n\r\n    return (\r\n        <>\r\n            {instructionChild}\r\n            {apiChild}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ApiDisplay;\r\n","import React, { useContext, useEffect } from 'react';\r\nimport loadAPIs from '../../services/Api/services/APIs';\r\nimport { ApiActionTypes } from '../../types/types';\r\nimport { Header, Label, Grid } from 'semantic-ui-react';\r\nimport { ApiContext } from '../../services/ApiContext';\r\nimport ApiDisplay from './components/ApiDisplay';\r\n\r\nconst NoAPI = () => (\r\n    <div>\r\n        <Header as=\"h2\">No API Selected</Header>\r\n        Some of the bot actions need access to API keys to work.\r\n        <br />\r\n        You can use this screen to manage the API keys. <br />\r\n        If you need to add an API that is not listed, edit the forumsBot\r\n        config.json file directly.\r\n    </div>\r\n);\r\n\r\nconst APIs = () => {\r\n    const { dispatch, apis, current } = useContext(ApiContext);\r\n\r\n    return (\r\n        <Grid divided>\r\n            <Grid.Column width={4}>\r\n                <Header\r\n                    as=\"h2\"\r\n                    onClick={() =>\r\n                        dispatch({\r\n                            type: ApiActionTypes.setCurrent,\r\n                            current: '',\r\n                        })\r\n                    }\r\n                    style={{ cursor: 'pointer' }}\r\n                >\r\n                    APIs{' '}\r\n                </Header>\r\n                <div>\r\n                    {apis &&\r\n                        Object.keys(apis)\r\n                            .sort()\r\n                            .map((api, index) => (\r\n                                <div key={index}>\r\n                                    <div\r\n                                        style={{ cursor: 'pointer' }}\r\n                                        onClick={() =>\r\n                                            dispatch({\r\n                                                type: ApiActionTypes.setCurrent,\r\n                                                current: api,\r\n                                            })\r\n                                        }\r\n                                    >\r\n                                        <Label\r\n                                            color={\r\n                                                current === api\r\n                                                    ? 'green'\r\n                                                    : undefined\r\n                                            }\r\n                                        >\r\n                                            {api}\r\n                                        </Label>\r\n                                    </div>\r\n                                    <br />\r\n                                </div>\r\n                            ))}\r\n                </div>\r\n            </Grid.Column>\r\n            <Grid.Column width={12}>\r\n                {current ? (\r\n                    apis?.[current] && <ApiDisplay api={current} />\r\n                ) : (\r\n                    <NoAPI />\r\n                )}\r\n            </Grid.Column>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default APIs;\r\n","import React, { useContext } from 'react';\r\nimport { Button, Icon, Segment, Header } from 'semantic-ui-react';\r\nimport { BotContext } from '../../../../services/BotContext';\r\nimport { Cookies as ICookies } from '../../../../types/Bot';\r\nimport {\r\n    testCookies,\r\n    refreshCookies,\r\n    clearCookies,\r\n} from '../../../../services/Api';\r\n\r\nconst dummy: ICookies = {\r\n    exist: undefined,\r\n    refreshing: false,\r\n    testing: false,\r\n    work: undefined,\r\n};\r\n\r\nconst Cookies = () => {\r\n    const { dispatch, settings } = useContext(BotContext);\r\n    const cookies = settings?.cookies;\r\n    const { exist, refreshing, testing, work } = cookies || dummy;\r\n\r\n    return (\r\n        <Segment>\r\n            <Header>Cookies</Header>\r\n            {exist ? 'Stored cookies found' : 'No stored cookies'}\r\n            <br />\r\n            <br />\r\n            <Button\r\n                loading={testing}\r\n                onClick={() => !testing && !refreshing && testCookies(dispatch)}\r\n            >\r\n                Test Cookies\r\n            </Button>{' '}\r\n            {!testing && work !== undefined && (\r\n                <Icon\r\n                    name={work ? 'thumbs up outline' : 'thumbs down outline'}\r\n                />\r\n            )}\r\n            <br />\r\n            <br />\r\n            <Button\r\n                onClick={() =>\r\n                    !testing && !refreshing && refreshCookies(dispatch)\r\n                }\r\n                loading={refreshing}\r\n            >\r\n                Get New Cookies\r\n            </Button>\r\n            <br />\r\n            <br />\r\n            <Button onClick={() => exist && clearCookies(dispatch)}>\r\n                Clear Cookies\r\n            </Button>\r\n        </Segment>\r\n    );\r\n};\r\n\r\nexport default Cookies;\r\n","import React from 'react';\r\nimport { useState } from 'react';\r\nimport { Button, Icon } from 'semantic-ui-react';\r\n\r\nconst LoginButton = () => {\r\n    const [isFetching, setIsFetching] = useState(false);\r\n    const [success, setSuccess] = useState(false);\r\n    const [hasFetched, setHasFetched] = useState(false);\r\n\r\n    const testCreds = async () => {\r\n        setIsFetching(true);\r\n\r\n        await setTimeout(() => {}, 750);\r\n\r\n        setIsFetching(false);\r\n        setSuccess(true);\r\n        setHasFetched(true);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Button onClick={() => testCreds()} loading={isFetching}>\r\n                Test Login\r\n            </Button>\r\n            {hasFetched ? (\r\n                success ? (\r\n                    <Icon name=\"thumbs up outline\" />\r\n                ) : (\r\n                    <Icon name=\"thumbs down outline\" />\r\n                )\r\n            ) : undefined}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default LoginButton;\r\n","import React, { useContext } from 'react';\r\nimport { BotContext } from '../../../../services/BotContext';\r\nimport { Loader, Segment, Header } from 'semantic-ui-react';\r\nimport EditableInput from '../../../EditableInput';\r\nimport { settingsConfigKeys } from '../..';\r\nimport { BotActionTypes, BotAction } from '../../../../types/Bot';\r\n\r\nconst BotName = () => {\r\n    const { dispatch, settings } = useContext(BotContext);\r\n    const botName = settings?.botName || 'zeroCool';\r\n\r\n    //if (!botName) return <Loader active />;\r\n\r\n    return (\r\n        <Segment>\r\n            <Header>botName</Header>\r\n            The botName is used by posters to instruct the bot to take actions.{' '}\r\n            <br />\r\n            For example, \"{botName} kittyCat\" instructs the bot to post a\r\n            picture of a cat. <br />\r\n            The botName does not have to match the account name.\r\n            <EditableInput\r\n                dispatch={dispatch}\r\n                dispatchBefore={[\r\n                    { type: BotActionTypes.setBotName } as BotAction,\r\n                ]}\r\n                dispatchOnFailure={[\r\n                    { type: BotActionTypes.setBotName, botName },\r\n                ]}\r\n                configKeys={settingsConfigKeys}\r\n                input={'botName'}\r\n                renameValueTo={'botName'}\r\n                value={botName}\r\n            />\r\n        </Segment>\r\n    );\r\n};\r\n\r\nexport default BotName;\r\n","import React, { useContext } from 'react';\r\nimport { BotContext } from '../../../../services/BotContext';\r\nimport { Segment, Header } from 'semantic-ui-react';\r\nimport EditableInput from '../../../EditableInput';\r\nimport { settingsConfigKeys } from '../..';\r\nimport { BotActionTypes, BotAction } from '../../../../types/Bot';\r\n\r\nconst Signature = () => {\r\n    const { dispatch, settings } = useContext(BotContext);\r\n\r\n    const sigLinkInstructions = !!settings?.sigLinkInstructions;\r\n    const sigShowText = !!settings?.sigShowText;\r\n    const sigText = settings?.sigText || '';\r\n\r\n    return (\r\n        <Segment>\r\n            <Header>Signature</Header>\r\n            The bot signature may be added to the end of every post. <br />\r\n            Turning on 'Link Instructions' will add a link to the bot\r\n            instructions hosted on GitHub pages, if you have that feature turned\r\n            on. <br />\r\n            <EditableInput\r\n                checkbox={true}\r\n                configKeys={settingsConfigKeys}\r\n                dispatch={dispatch}\r\n                dispatchBefore={[\r\n                    {\r\n                        type: BotActionTypes.setSigLinkInstructions,\r\n                    } as BotAction,\r\n                ]}\r\n                dispatchOnFailure={[\r\n                    {\r\n                        type: BotActionTypes.setSigLinkInstructions,\r\n                        sigLinkInstructions,\r\n                    },\r\n                ]}\r\n                labelText={'Link Instructions in Bot Signature'}\r\n                input={'sigLinkInstructions'}\r\n                value={sigLinkInstructions}\r\n                renameValueTo={'sigLinkInstructions'}\r\n            />\r\n            You can add custom text to each post by the bot.\r\n            <EditableInput\r\n                checkbox={true}\r\n                configKeys={settingsConfigKeys}\r\n                dispatch={dispatch}\r\n                dispatchBefore={[\r\n                    { type: BotActionTypes.setSigShowText } as BotAction,\r\n                ]}\r\n                dispatchOnFailure={[\r\n                    {\r\n                        type: BotActionTypes.setSigShowText,\r\n                        sigShowText,\r\n                    },\r\n                ]}\r\n                labelText={'Show Bot Signature Text'}\r\n                input=\"sigShowText\"\r\n                value={sigShowText}\r\n                renameValueTo=\"sigShowText\"\r\n            />\r\n            <EditableInput\r\n                dispatch={dispatch}\r\n                dispatchBefore={[\r\n                    { type: BotActionTypes.setSigText } as BotAction,\r\n                ]}\r\n                dispatchOnFailure={[\r\n                    { type: BotActionTypes.setSigText, sigText },\r\n                ]}\r\n                configKeys={settingsConfigKeys}\r\n                labelText={'Bot Signature Text'}\r\n                input={'sigText'}\r\n                renameValueTo={'sigText'}\r\n                value={sigText}\r\n            />\r\n        </Segment>\r\n    );\r\n};\r\n\r\nexport default Signature;\r\n","import React, { useState } from 'react';\r\nimport { Segment, Header } from 'semantic-ui-react';\r\nimport EditableInput from '../EditableInput';\r\nimport { BotAction } from '../../types/types';\r\nimport Cookies from './components/Cookies';\r\nimport LoginButton from './components/LoginButton';\r\nimport BotName from './components/BotName';\r\nimport Signature from './components/Signature';\r\n\r\nexport const settingsConfigKeys = ['settings'];\r\n\r\nconst Credentials = () => {\r\n    const [username, setUsername] = useState('Patient Zero Cool');\r\n    const [password, setPassword] = useState('example password');\r\n\r\n    const configKeys = [...settingsConfigKeys, 'creds'];\r\n\r\n    return (\r\n        <>\r\n            <BotName />\r\n            <Signature />\r\n            <Segment>\r\n                <Header>SA Credentials</Header>\r\n                This is the SA forums username and password that the bot uses.\r\n                <EditableInput\r\n                    configKeys={configKeys}\r\n                    dispatch={({ value }) => setUsername(value)}\r\n                    dispatchBefore={[{} as BotAction]}\r\n                    dispatchOnFailure={[\r\n                        ({ value: username } as any) as BotAction,\r\n                    ]}\r\n                    input=\"username\"\r\n                    labelText=\"Bot SA Username\"\r\n                    value={username}\r\n                />\r\n                <EditableInput\r\n                    configKeys={configKeys}\r\n                    dispatch={({ value }) => setPassword(value)}\r\n                    dispatchBefore={[{} as BotAction]}\r\n                    dispatchOnFailure={[\r\n                        ({ value: password } as any) as BotAction,\r\n                    ]}\r\n                    input=\"password\"\r\n                    labelText=\"Bot SA Password\"\r\n                    password\r\n                    value={password}\r\n                />\r\n                <LoginButton />\r\n            </Segment>\r\n            <Cookies />\r\n        </>\r\n    );\r\n};\r\nexport default Credentials;\r\n","import { Timer } from '../../types/Bot';\r\n\r\nexport const millisToMinutesAndSeconds = (millis: number): Timer => {\r\n    if (!millis || millis < 0)\r\n        return {\r\n            minutes: 0,\r\n            seconds: 0,\r\n        };\r\n    let minutes = Math.floor(millis / 60000);\r\n    let seconds = Number(((millis % 60000) / 1000).toFixed(0));\r\n    if (seconds === 60) {\r\n        minutes = minutes + 1;\r\n        seconds = 0;\r\n    }\r\n    return { minutes, seconds };\r\n};\r\n","import { BotAction, BotActionTypes } from '../../../../types/types';\r\nimport { authFetchJSON } from '../AuthFetch';\r\nimport { millisToMinutesAndSeconds } from '../../../MillisToMinutesAndSeconds';\r\n\r\ninterface TimerResponse {\r\n    timer: number | undefined;\r\n}\r\n\r\ntype TR = TimerResponse | undefined;\r\n\r\n//gets the current settings for the bot\r\nconst getTimer = async () => {\r\n    const route = 'timer';\r\n    const response = ((await authFetchJSON(route)) as TR)?.timer;\r\n    return response && millisToMinutesAndSeconds(response);\r\n};\r\n\r\nexport const loadTimer = async (\r\n    dispatch: React.Dispatch<BotAction>,\r\n    interval?: number\r\n) => {\r\n    const timer = await getTimer();\r\n\r\n    timer\r\n        ? dispatch({ type: BotActionTypes.setTimer, timer })\r\n        : interval &&\r\n          dispatch({\r\n              type: BotActionTypes.setTimer,\r\n              timer: {\r\n                  minutes: interval,\r\n                  seconds: 0,\r\n              },\r\n          });\r\n};\r\n","import { SAUser } from '../../../types/types';\r\n\r\nexport const generateUsers = async () => {\r\n    const url = 'https://randomuser.me/api/?results=10';\r\n    const response = await fetch(url);\r\n    const json = await response?.json();\r\n\r\n    const users = json.results.map((user: any) => {\r\n        const avatar = user.picture.thumbnail;\r\n        const id = user.login.uuid;\r\n        const name = user.login.username;\r\n        const title = `${user.location.street.name} ${user.location.city}`;\r\n        const profile = 'https://forums.somethingawful.com';\r\n        const regDate = new Date(user.registered.date).toLocaleString(\r\n            'default',\r\n            {\r\n                month: 'long',\r\n                day: 'numeric',\r\n                year: 'numeric',\r\n            }\r\n        );\r\n\r\n        const generatedUser: SAUser = {\r\n            avatar,\r\n            id,\r\n            name,\r\n            title,\r\n            profile,\r\n            regDate,\r\n        };\r\n\r\n        return generatedUser;\r\n    });\r\n\r\n    return users;\r\n};\r\n//generates a random SA User\r\nconst userGenerator = async () => {\r\n    const url = 'https://randomuser.me/api/';\r\n    const response = await fetch(url);\r\n    const json = await response?.json();\r\n\r\n    const user = json.results[0];\r\n\r\n    console.log(user.location.street);\r\n\r\n    const avatar = user.picture.thumbnail;\r\n    const id = user.login.uuid;\r\n    const name = user.login.username;\r\n    const title = `${user.location.street.name} ${user.location.city}`;\r\n    const profile = 'https://forums.somethingawful.com';\r\n    const regDate = new Date(user.registered.date).toLocaleString('default', {\r\n        month: 'long',\r\n        day: 'numeric',\r\n        year: 'numeric',\r\n    });\r\n\r\n    const generatedUser: SAUser = {\r\n        avatar,\r\n        id,\r\n        name,\r\n        title,\r\n        profile,\r\n        regDate,\r\n    };\r\n\r\n    return generatedUser;\r\n};\r\n\r\nexport default userGenerator;\r\n","import {\r\n    FrontEndThread,\r\n    EventsActionTypes,\r\n    EventsAction,\r\n    DisplayAction,\r\n} from '../../../types/types';\r\nimport userGenerator, { generateUsers } from '../UserGenerator';\r\n\r\nexport const getRandomInt = (min = 1, max = 100) => {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    max < min && (max = min + 1);\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n};\r\n\r\nconst getDelay = (longer?: boolean) =>\r\n    longer ? 750 + getRandomInt(0, 500) : 450 + getRandomInt(0, 300);\r\n\r\nconst delayedDispatch = async ({\r\n    array,\r\n    dispatch,\r\n}: {\r\n    array: any[];\r\n    dispatch: React.Dispatch<EventsAction>;\r\n}) => {\r\n    for await (const el of array) {\r\n        dispatch({\r\n            type: EventsActionTypes.addEvent,\r\n            event: makeEvent(el),\r\n        });\r\n        await new Promise((resolve) => setTimeout(() => resolve(), 450));\r\n    }\r\n};\r\n\r\nconst addEvent = async (\r\n    data: any,\r\n    dispatch: React.Dispatch<EventsAction>,\r\n    longer?: boolean\r\n) => {\r\n    dispatch({\r\n        type: EventsActionTypes.addEvent,\r\n        event: makeEvent(data),\r\n    });\r\n    await new Promise((resolve) =>\r\n        setTimeout(() => resolve(), getDelay(longer))\r\n    );\r\n};\r\n\r\nexport const makeEvent = (data: string | object, text?: string) =>\r\n    // prettier-ignore\r\n    typeof data === 'string'\r\n        ? { text: data, time: Date() }\r\n        : text\r\n            ? { data, text, time: Date() }\r\n            : { data, time: Date() };\r\n\r\nconst preRun = [\r\n    'Bot running once...',\r\n    { setting: { running: true } },\r\n    'bot has logged in',\r\n    'getting threads...',\r\n];\r\n\r\nconst postRun = [\r\n    'bot has gotten posts and handled the posts',\r\n    'bot finished, logging out',\r\n    { setting: { running: false } },\r\n];\r\n\r\nconst generateInstructionsForThread = async ({\r\n    actions,\r\n    botName,\r\n    dispatch,\r\n    thread,\r\n}: {\r\n    actions: { [key: string]: DisplayAction };\r\n    botName: string;\r\n    dispatch: React.Dispatch<EventsAction>;\r\n    thread: FrontEndThread;\r\n}) => {\r\n    const { unreadPosts } = thread;\r\n\r\n    const numberOfInstructions = unreadPosts\r\n        ? getRandomInt(0, unreadPosts > 3 ? 3 : unreadPosts)\r\n        : 0;\r\n\r\n    if (numberOfInstructions === 0) {\r\n        addEvent(\r\n            `${thread.title} has no instructions. id: ${thread.threadId}`,\r\n            dispatch\r\n        );\r\n        return;\r\n    }\r\n\r\n    const activeActions = Object.entries(actions)\r\n        .map(([key, action]) => action)\r\n        .filter(({ active }) => active);\r\n\r\n    const users = await generateUsers();\r\n\r\n    const randomUser = () => users[getRandomInt(0, users.length - 1)];\r\n\r\n    const text = `There ${\r\n        numberOfInstructions !== 1 ? 'are' : 'is'\r\n    } ${numberOfInstructions} instruction${\r\n        numberOfInstructions !== 1 ? 's' : ''\r\n    } in ${thread.title}, id: ${thread.threadId}`;\r\n\r\n    const instructions = [];\r\n\r\n    for (let i = 0; i < numberOfInstructions; i++) {\r\n        const actionIndex = getRandomInt(0, activeActions.length - 1);\r\n\r\n        const thisAction = activeActions[actionIndex];\r\n\r\n        const trigger =\r\n            thisAction.triggers.filter(\r\n                (trigger) => typeof trigger === 'string'\r\n            )?.[0] || 'do something';\r\n\r\n        const instruction = {\r\n            author: randomUser(),\r\n            body: `${botName}, ${trigger}`,\r\n            date: Date(),\r\n            id: getRandomInt(10000, 500000),\r\n            images: [],\r\n            link: 'https://forums.somethingawful.com/',\r\n            instruction: trigger,\r\n        };\r\n\r\n        instructions.push(instruction);\r\n    }\r\n\r\n    await addEvent({ text, instructions }, dispatch);\r\n\r\n    for await (const instruction of instructions) {\r\n        await Promise.all([\r\n            addEvent(`executing ${instruction.instruction}...`, dispatch, true),\r\n            addEvent(\r\n                {\r\n                    post: {\r\n                        author: {\r\n                            avatar:\r\n                                'https://fi.somethingawful.com/safs/titles/58/73/00226364.0001.jpg',\r\n                            id: 226364,\r\n                            name: botName,\r\n                            profile:\r\n                                'https://forums.somethingawful.com/member.php?action=getinfo&userid=226364',\r\n                            regDate: 'Apr 24, 2020',\r\n                            title: '',\r\n                        },\r\n                        body: `example post for ${instruction.instruction} \\n________________________________\\nHack the planet!!`,\r\n                        date: Date(),\r\n                        id: getRandomInt(10000, 500000),\r\n                        images: [],\r\n                        link: `https://forums.somethingawful.com/showthread.php?threadid=${thread.threadId}`,\r\n                    },\r\n                },\r\n                dispatch,\r\n                true\r\n            ),\r\n        ]);\r\n    }\r\n};\r\n\r\nexport const simulateRunForAllThreads = async ({\r\n    actions,\r\n    botName,\r\n    dispatch,\r\n    threads,\r\n}: {\r\n    actions: { [key: string]: DisplayAction };\r\n    botName: string;\r\n    dispatch: React.Dispatch<EventsAction>;\r\n    threads: FrontEndThread[];\r\n}) => {\r\n    await delayedDispatch({ array: preRun, dispatch });\r\n\r\n    await addEvent(\r\n        {\r\n            text: `bot found ${threads.length} threads`,\r\n            threads,\r\n        },\r\n        dispatch\r\n    );\r\n\r\n    await addEvent('getting posts...', dispatch);\r\n\r\n    const scanningEvents = threads.reduce(\r\n        (acc, { title, threadId, unreadPosts }) => {\r\n            acc.push(`Scanning ${title}, threadId ${threadId}...`);\r\n            acc.push(\r\n                `there are ${unreadPosts} new posts in the ${title} thread`\r\n            );\r\n            return acc;\r\n        },\r\n        <string[]>[]\r\n    );\r\n\r\n    await delayedDispatch({ array: scanningEvents, dispatch });\r\n\r\n    for await (const thread of threads) {\r\n        if (thread.unreadPosts) {\r\n            await generateInstructionsForThread({\r\n                actions,\r\n                botName,\r\n                dispatch,\r\n                thread,\r\n            });\r\n        }\r\n    }\r\n\r\n    //set unread posts\r\n    //turn bot off\r\n    await delayedDispatch({ array: postRun, dispatch });\r\n};\r\n\r\nexport const simulateRunForThread = async ({\r\n    actions,\r\n    botName,\r\n    dispatch,\r\n    thread,\r\n}: {\r\n    actions: { [key: string]: DisplayAction };\r\n    botName: string;\r\n    dispatch: React.Dispatch<EventsAction>;\r\n    thread: FrontEndThread;\r\n}) => {\r\n    const preRunSingle = [\r\n        'Bot running once...',\r\n        { setting: { running: true } },\r\n        'bot has logged in',\r\n    ];\r\n\r\n    await delayedDispatch({ array: preRunSingle, dispatch });\r\n\r\n    await addEvent('getting posts...', dispatch);\r\n\r\n    const { title, threadId, unreadPosts } = thread;\r\n    await addEvent(\r\n        `Scanning ${title}, threadId ${threadId}...`,\r\n        dispatch,\r\n        true\r\n    );\r\n    await addEvent(\r\n        `there are ${unreadPosts} new posts in the ${title} thread`,\r\n        dispatch,\r\n        true\r\n    );\r\n\r\n    if (unreadPosts) {\r\n        await generateInstructionsForThread({\r\n            actions,\r\n            botName,\r\n            dispatch,\r\n            thread,\r\n        });\r\n    }\r\n\r\n    await delayedDispatch({ array: postRun, dispatch });\r\n};\r\n","import React, { createContext, useReducer } from 'react';\r\nimport { FrontEndThread, ThreadsState, ThreadsAction } from '../../types/types';\r\n\r\nconst initialState = {\r\n    threads: [] as FrontEndThread[],\r\n    failed: false,\r\n    fetching: false,\r\n    dispatch: (action: ThreadsAction) => undefined,\r\n} as ThreadsState;\r\n\r\nlet reducer = (state: ThreadsState, action: ThreadsAction) => {\r\n    switch (action.type) {\r\n        case 'addThread': {\r\n            const { thread } = action;\r\n            const threads = state.threads;\r\n\r\n            // prettier-ignore\r\n            const newThreads = threads\r\n                ? threads.concat(thread)\r\n                : Array.isArray(thread)\r\n                    ? [...thread]\r\n                    : [thread];\r\n\r\n            return {\r\n                ...state,\r\n                threads: newThreads,\r\n            };\r\n        }\r\n        case 'currentThread': {\r\n            const { threadId } = action;\r\n            return {\r\n                ...state,\r\n                thread: threadId,\r\n            };\r\n        }\r\n        case 'failed': {\r\n            return {\r\n                ...state,\r\n                failed: true,\r\n                fetching: false,\r\n                threads: [],\r\n            };\r\n        }\r\n        case 'fetchAttempt': {\r\n            return {\r\n                ...state,\r\n                fetching: true,\r\n            };\r\n        }\r\n        case 'setBookmarked': {\r\n            const { threadId, value } = action;\r\n            const { threads } = state;\r\n            const index = threads?.findIndex((t) => t.threadId === threadId);\r\n\r\n            if (!threads || index === undefined || index === -1) return state;\r\n\r\n            const newThread = threads[index];\r\n\r\n            newThread.bookmarked = value;\r\n\r\n            const newThreads = [...threads];\r\n\r\n            newThreads[index] = newThread;\r\n\r\n            return {\r\n                ...state,\r\n                threads: newThreads,\r\n            };\r\n        }\r\n        case 'setName': {\r\n            const { threadId, value } = action;\r\n            const { threads } = state;\r\n            const index = threads?.findIndex((t) => t.threadId === threadId);\r\n\r\n            if (!threads || index === undefined || index === -1) return state;\r\n\r\n            const newThread = threads[index];\r\n\r\n            newThread.name = value;\r\n\r\n            const newThreads = [...threads];\r\n\r\n            newThreads[index] = newThread;\r\n\r\n            return {\r\n                ...state,\r\n                threads: newThreads,\r\n            };\r\n        }\r\n        case 'setThreads': {\r\n            const { threads } = action;\r\n            return {\r\n                ...state,\r\n                failed: false,\r\n                fetching: false,\r\n                threads,\r\n            };\r\n        }\r\n        default: {\r\n            console.log(`threadsContext default`, action);\r\n            //throw new Error();\r\n            return state;\r\n        }\r\n    }\r\n};\r\n\r\nconst ThreadsContext = createContext(initialState);\r\n\r\nconst ThreadsProvider = (props: any) => {\r\n    const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n    //add dispatch to value object and cast to ThreadsState\r\n    const value = {\r\n        ...state,\r\n        dispatch,\r\n    } as ThreadsState;\r\n\r\n    return (\r\n        <ThreadsContext.Provider value={value}>\r\n            {props.children}\r\n        </ThreadsContext.Provider>\r\n    );\r\n};\r\n\r\nexport { ThreadsContext, ThreadsProvider };\r\n","import React, { createContext, useReducer } from 'react';\r\nimport { EventsState, EventsAction } from '../../types/types';\r\n\r\nconst initialState = {\r\n    events: [],\r\n    failed: false,\r\n    listening: false,\r\n    dispatch: (action: EventsAction) => undefined,\r\n} as EventsState;\r\n\r\nlet reducer = (state: EventsState, action: EventsAction) => {\r\n    switch (action.type) {\r\n        case 'addEvent': {\r\n            const { event } = action;\r\n            const events = state.events.concat(event);\r\n            return {\r\n                ...state,\r\n                events,\r\n            };\r\n        }\r\n        case 'failed': {\r\n            return {\r\n                ...state,\r\n                failed: true,\r\n            };\r\n        }\r\n        case 'setListening': {\r\n            const { listening } = action;\r\n            return {\r\n                ...state,\r\n                listening,\r\n            };\r\n        }\r\n        default: {\r\n            console.log(`eventsContext default`, action);\r\n            //throw new Error();\r\n            return state;\r\n        }\r\n    }\r\n};\r\n\r\nconst EventsContext = createContext(initialState);\r\n\r\nconst EventsProvider = (props: any) => {\r\n    const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n    //add dispatch to value object and cast to EventsState\r\n    const value = {\r\n        ...state,\r\n        dispatch,\r\n    } as EventsState;\r\n\r\n    return (\r\n        <EventsContext.Provider value={value}>\r\n            {props.children}\r\n        </EventsContext.Provider>\r\n    );\r\n};\r\n\r\nexport { EventsContext, EventsProvider };\r\n","import React, { useState, useEffect, useContext } from 'react';\r\nimport { Header, Segment } from 'semantic-ui-react';\r\nimport { BotContext } from '../../../../services/BotContext';\r\nimport { BotActionTypes } from '../../../../types/Bot';\r\nimport { loadTimer } from '../../../../services/Api/services/Timer';\r\nimport usePrevious from '../../../../services/UsePrevious';\r\nimport { simulateRunForAllThreads } from '../../../../services/Generators/LogEvents';\r\nimport { ActionsContext } from '../../../../services/ActionsContext';\r\nimport { ThreadsContext } from '../../../../services/ThreadsContext';\r\nimport { EventsContext } from '../../../../services/EventsContext';\r\nimport { runOnce } from '../../../../services/Api';\r\nimport Interval from '../Interval';\r\n\r\n// useEffect(() => {\r\n//     on === false &&\r\n//         interval &&\r\n//         botDispatch({\r\n//             type: BotActionTypes.setTimer,\r\n//             timer: {\r\n//                 minutes: interval,\r\n//                 seconds: 0,\r\n//             },\r\n//         });\r\n// }, [botDispatch, interval, on]);\r\n\r\nconst Timer = () => {\r\n    const { dispatch, settings, timer } = useContext(BotContext);\r\n    const { minutes, seconds } = timer;\r\n    const on = settings?.on;\r\n    const running = settings?.running;\r\n    const [flash, setFlash] = useState(false);\r\n    const prevRunning = usePrevious(running);\r\n    const prevInterval = usePrevious(settings?.interval);\r\n\r\n    const botName = settings?.botName || '';\r\n    const { actions } = useContext(ActionsContext);\r\n    const { threads } = useContext(ThreadsContext);\r\n    const { dispatch: eventsDispatch } = useContext(EventsContext);\r\n\r\n    //load the timer once\r\n    useEffect(() => {\r\n        loadTimer(dispatch);\r\n    }, [dispatch]);\r\n\r\n    useEffect(() => {\r\n        if (\r\n            //if the bot is off, then set timer to interval\r\n            (on === false && settings?.interval) ||\r\n            //if the interval changes, set timer to interval\r\n            (prevInterval &&\r\n                settings?.interval &&\r\n                prevInterval !== settings.interval)\r\n        ) {\r\n            dispatch({\r\n                type: BotActionTypes.setTimer,\r\n                timer: {\r\n                    minutes: settings.interval,\r\n                    seconds: 0,\r\n                },\r\n            });\r\n        }\r\n    }, [dispatch, prevInterval, settings, on]);\r\n\r\n    //when the bot stops running, load the timer\r\n    useEffect(() => {\r\n        if (running === false && prevRunning === true) {\r\n            loadTimer(dispatch);\r\n        }\r\n    }, [running, prevRunning, dispatch]);\r\n\r\n    const doRunOnce = async () => {\r\n        console.log('do run once called');\r\n        runOnce(dispatch);\r\n        await simulateRunForAllThreads({\r\n            actions,\r\n            botName,\r\n            dispatch: eventsDispatch,\r\n            threads: threads || [],\r\n        });\r\n\r\n        dispatch({\r\n            type: BotActionTypes.setRunning,\r\n            running: false,\r\n        });\r\n\r\n        dispatch({\r\n            type: BotActionTypes.setTimer,\r\n            timer: {\r\n                minutes: settings?.interval || 5,\r\n                seconds: 0,\r\n            },\r\n        });\r\n    };\r\n\r\n    //tick the timer down by 1 second\r\n    useEffect(() => {\r\n        if (on) {\r\n            let myInterval = setInterval(() => {\r\n                if (seconds > 0) {\r\n                    dispatch({\r\n                        type: BotActionTypes.setTimer,\r\n                        timer: {\r\n                            minutes,\r\n                            seconds: seconds - 1,\r\n                        },\r\n                    });\r\n                }\r\n\r\n                if (seconds === 0) {\r\n                    if (minutes === 0) {\r\n                        console.log('calling doRunOnce');\r\n                        doRunOnce();\r\n                        myInterval && clearInterval(myInterval);\r\n                    } else {\r\n                        dispatch({\r\n                            type: BotActionTypes.setTimer,\r\n                            timer: {\r\n                                minutes: minutes - 1,\r\n                                seconds: 59,\r\n                            },\r\n                        });\r\n                    }\r\n                }\r\n            }, 1000);\r\n\r\n            return () => {\r\n                clearInterval(myInterval);\r\n            };\r\n        }\r\n    }, [dispatch, minutes, seconds, on]);\r\n\r\n    const noTime = minutes === 0 && seconds === 0;\r\n\r\n    const timeout =\r\n        noTime &&\r\n        running &&\r\n        setTimeout(() => {\r\n            setFlash(!flash);\r\n        }, 300);\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            timeout && clearTimeout(timeout);\r\n        };\r\n    }, [timeout]);\r\n\r\n    useEffect(() => {\r\n        flash && (!noTime || !running) && setFlash(false);\r\n    }, [flash, noTime, running, setFlash]);\r\n\r\n    const getColor = () => {\r\n        if (flash) return 'black';\r\n        if (running && noTime) return 'lightBlue';\r\n        if (on) return 'red';\r\n        return 'gray';\r\n    };\r\n\r\n    useEffect(() => {\r\n        //when a tab loses focus, the browser may suspend javascript operation to save cpu time\r\n        //this means the timer interval events that tick down the seconds stop\r\n        //so when you look again, the timer is wrong\r\n        //listen for the focus event that occurs when the tab gets focus\r\n        //and load the current timer from the api\r\n        window.addEventListener('focus', () => loadTimer(dispatch));\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <Segment style={{ backgroundColor: 'black', width: 120 }}>\r\n            <Header as=\"h1\" style={{ color: getColor() }}>\r\n                {noTime\r\n                    ? '00:00'\r\n                    : `${minutes}:${seconds < 10 ? `0${seconds}` : seconds}`}\r\n            </Header>\r\n        </Segment>\r\n    );\r\n};\r\n\r\nexport default Timer;\r\n","import React from 'react';\r\nimport { motion } from 'framer-motion';\r\nimport { Icon } from 'semantic-ui-react';\r\n\r\ntype IconSizeProp =\r\n    | 'mini'\r\n    | 'tiny'\r\n    | 'small'\r\n    | 'large'\r\n    | 'big'\r\n    | 'huge'\r\n    | 'massive';\r\n\r\nconst RotatingCog = ({ size }: { size: IconSizeProp }) => (\r\n    <motion.div\r\n        animate={{\r\n            rotate: 360,\r\n        }}\r\n        transition={{\r\n            duration: 2,\r\n            ease: 'easeInOut',\r\n            times: [0, 0.2, 0.5, 0.8, 1],\r\n            loop: Infinity,\r\n            repeatDelay: 1,\r\n        }}\r\n        style={{\r\n            display: 'inline-block',\r\n        }}\r\n    >\r\n        <Icon size={size ? size : undefined} name=\"cog\" />\r\n    </motion.div>\r\n);\r\n\r\nexport default RotatingCog;\r\n","import React, { useContext } from 'react';\r\nimport { BotContext } from '../../../../services/BotContext';\r\nimport { Icon, Message, Label, Grid } from 'semantic-ui-react';\r\nimport Timer from '../Timer';\r\nimport RotatingCog from '../../../RotatingCog';\r\n\r\nconst BotStateDisplay = () => {\r\n    const { settings } = useContext(BotContext);\r\n    const on = !!settings?.on;\r\n    const running = !!settings?.running;\r\n\r\n    return (\r\n        <Message>\r\n            <Grid columns=\"2\">\r\n                <Grid.Column width=\"5\">\r\n                    <Message.Header>Bot State</Message.Header>\r\n                    <Label\r\n                        color={running ? 'blue' : on ? 'green' : 'red'}\r\n                        size=\"huge\"\r\n                    >\r\n                        <div>\r\n                            {running ? (\r\n                                <RotatingCog size=\"huge\" />\r\n                            ) : (\r\n                                <Icon size=\"huge\" name={on ? 'play' : 'stop'} />\r\n                            )}\r\n                        </div>\r\n                        {running ? 'On' : on ? 'Idle' : 'Off'}\r\n                    </Label>\r\n                </Grid.Column>\r\n                <Grid.Column width=\"5\">\r\n                    <Message.Header>\r\n                        <Icon name=\"clock\" size=\"big\" />\r\n                        Next Bot Run\r\n                    </Message.Header>\r\n                    <Timer />\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Message>\r\n    );\r\n};\r\n\r\nexport default BotStateDisplay;\r\n","import React, { useContext } from 'react';\r\nimport { BotContext } from '../../../../services/BotContext';\r\nimport { Button, Icon } from 'semantic-ui-react';\r\nimport { startBot, stopBot, runOnce } from '../../../../services/Api';\r\nimport { simulateRunForAllThreads } from '../../../../services/Generators/LogEvents';\r\nimport { ThreadsContext } from '../../../../services/ThreadsContext';\r\nimport { EventsContext } from '../../../../services/EventsContext';\r\nimport { ActionsContext } from '../../../../services/ActionsContext';\r\nimport { BotActionTypes } from '../../../../types/Bot';\r\n\r\nconst ControlButtons = () => {\r\n    const { dispatch, settings } = useContext(BotContext);\r\n    const { dispatch: eventsDispatch } = useContext(EventsContext);\r\n    const { actions } = useContext(ActionsContext);\r\n    const { threads } = useContext(ThreadsContext);\r\n    const on = !!settings?.on;\r\n    const running = !!settings?.running;\r\n    const botName = settings?.botName || '';\r\n\r\n    const doRunOnce = async () => {\r\n        runOnce(dispatch);\r\n        await simulateRunForAllThreads({\r\n            actions,\r\n            botName,\r\n            dispatch: eventsDispatch,\r\n            threads: threads || [],\r\n        });\r\n\r\n        dispatch({\r\n            type: BotActionTypes.setRunning,\r\n            running: false,\r\n        });\r\n    };\r\n    return (\r\n        <div>\r\n            <Button onClick={() => !on && startBot(dispatch)} color=\"green\">\r\n                <Icon name=\"play\" size=\"large\" />\r\n                Start\r\n            </Button>\r\n            <Button\r\n                onClick={() =>\r\n                    (on || running) &&\r\n                    stopBot({\r\n                        dispatch,\r\n                        on,\r\n                        running,\r\n                    })\r\n                }\r\n                color=\"red\"\r\n            >\r\n                <Icon name=\"stop\" size=\"large\" />\r\n                Stop\r\n            </Button>\r\n            <Button\r\n                color=\"blue\"\r\n                onClick={() => {\r\n                    if (!running) {\r\n                        doRunOnce();\r\n                    }\r\n                }}\r\n            >\r\n                <Icon name=\"play circle\" size=\"large\" />\r\n                Run Once\r\n            </Button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ControlButtons;\r\n","import React, { useContext, useState } from 'react';\r\nimport { Button, Input, Message } from 'semantic-ui-react';\r\nimport { BotContext } from '../../../../services/BotContext';\r\nimport { BotActionTypes } from '../../../../types/types';\r\nimport { setBotInterval } from '../../../../services/Api';\r\n\r\nconst Interval = () => {\r\n    const { dispatch, settings } = useContext(BotContext);\r\n    const interval = settings?.interval;\r\n    const [priorValue, setPriorValue] = useState<number | undefined>(undefined);\r\n\r\n    const trySetInterval = async (newInterval: number, resetValue: number) => {\r\n        const didSet = await setBotInterval(newInterval);\r\n\r\n        if (didSet) {\r\n            setPriorValue(undefined);\r\n        } else {\r\n            resetValue &&\r\n                dispatch({\r\n                    type: BotActionTypes.setInterval,\r\n                    interval: resetValue,\r\n                });\r\n            setPriorValue(undefined);\r\n        }\r\n    };\r\n    return (\r\n        <React.Fragment>\r\n            <Message>\r\n                <Message.Header>Interval</Message.Header>\r\n                <p>When the bot is on, it will run every interval.</p>\r\n                <p>\r\n                    You can increase or decrease the interval to a minimum of 2\r\n                    minutes.\r\n                </p>\r\n                <p>Runs Every {interval} Minutes</p>\r\n            </Message>\r\n            <div>\r\n                <Button\r\n                    onClick={() => {\r\n                        if (interval) {\r\n                            if (!priorValue) {\r\n                                setPriorValue(interval);\r\n                            }\r\n                            //increases interval in context\r\n                            dispatch({ type: BotActionTypes.increaseInterval });\r\n                            trySetInterval(\r\n                                interval + 1,\r\n                                priorValue ? priorValue : interval\r\n                            );\r\n                        }\r\n                    }}\r\n                >\r\n                    Increase\r\n                </Button>\r\n                <Button\r\n                    onClick={() => {\r\n                        if (interval && interval > 2) {\r\n                            if (!priorValue) {\r\n                                setPriorValue(interval);\r\n                            }\r\n                            //increases interval in context\r\n                            dispatch({ type: BotActionTypes.decreaseInterval });\r\n                            trySetInterval(\r\n                                interval - 1,\r\n                                priorValue ? priorValue : interval\r\n                            );\r\n                        }\r\n                    }}\r\n                >\r\n                    Decrease\r\n                </Button>\r\n                <Input\r\n                    onKeyDown={async ({\r\n                        key,\r\n                        target,\r\n                    }: {\r\n                        key: string;\r\n                        target: HTMLInputElement;\r\n                    }) => {\r\n                        if (key === 'Enter') {\r\n                            const { value } = target;\r\n                            const newInterval = Number(value);\r\n                            if (\r\n                                interval &&\r\n                                !isNaN(newInterval) &&\r\n                                newInterval > 1 &&\r\n                                newInterval !== interval\r\n                            ) {\r\n                                if (!priorValue) {\r\n                                    setPriorValue(interval);\r\n                                }\r\n                                dispatch({\r\n                                    type: BotActionTypes.setInterval,\r\n                                    interval: newInterval,\r\n                                });\r\n\r\n                                trySetInterval(\r\n                                    newInterval,\r\n                                    priorValue ? priorValue : interval\r\n                                );\r\n                            }\r\n                        }\r\n                    }}\r\n                    onBlur={async (e: InputEvent) => {\r\n                        const target = e.target as HTMLInputElement;\r\n                        const { value } = target;\r\n                        const newInterval = Number(value);\r\n                        if (\r\n                            interval &&\r\n                            !isNaN(newInterval) &&\r\n                            newInterval > 1 &&\r\n                            newInterval !== interval\r\n                        ) {\r\n                            if (!priorValue) {\r\n                                setPriorValue(interval);\r\n                            }\r\n                            dispatch({\r\n                                type: BotActionTypes.setInterval,\r\n                                interval: newInterval,\r\n                            });\r\n\r\n                            trySetInterval(\r\n                                newInterval,\r\n                                priorValue ? priorValue : interval\r\n                            );\r\n                        }\r\n                    }}\r\n                    placeholder=\"Set Interval...\"\r\n                />\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Interval;\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nconst AnimatedEllipse = () => {\r\n    const [number, setNumber] = useState(3);\r\n\r\n    let periods = '';\r\n    for (let i = 0; i < number; i++) {\r\n        periods += '.';\r\n    }\r\n\r\n    const timeout = setTimeout(() => {\r\n        if (number > 2) {\r\n            setNumber(0);\r\n        } else {\r\n            setNumber(number + 1);\r\n        }\r\n    }, 300);\r\n\r\n    useEffect(() => {\r\n        return () => clearTimeout(timeout);\r\n    }, [timeout]);\r\n\r\n    return <span>{periods}</span>;\r\n};\r\n\r\nexport default AnimatedEllipse;\r\n","import React, { useState } from 'react';\r\n\r\nconst ErrorEvent = ({ error, newest }: { error: string; newest: boolean }) => {\r\n    const [visible, setVisible] = useState(true);\r\n\r\n    newest &&\r\n        setTimeout(() => {\r\n            setVisible(!visible);\r\n        }, 300);\r\n\r\n    return (\r\n        <span style={{ color: 'red' }}>\r\n            {!newest || visible ? (\r\n                <span>ERROR </span>\r\n            ) : (\r\n                <span style={{ color: 'black' }}>ERROR </span>\r\n            )}\r\n            {error}\r\n        </span>\r\n    );\r\n};\r\n\r\nexport default ErrorEvent;\r\n","import React, { useState } from 'react';\r\nimport { Icon } from 'semantic-ui-react';\r\nimport getChildren from '../GetChildren';\r\n\r\nconst ArrayDisplay = ({ array, newest }: { array: any[]; newest: boolean }) => {\r\n    const [open, setOpen] = useState(false);\r\n\r\n    return (\r\n        <span>\r\n            <Icon\r\n                name={open ? 'caret down' : 'caret right'}\r\n                onClick={() => setOpen(!open)}\r\n                style={{ cursor: 'pointer' }}\r\n            />\r\n            {open && (\r\n                <div\r\n                    style={{\r\n                        outline: 'solid',\r\n                        outlineColor: 'lime',\r\n                        margin: 10,\r\n                    }}\r\n                >\r\n                    {array.map((el, key) =>\r\n                        // prettier-ignore\r\n                        React.isValidElement(el)\r\n                        ? el\r\n                         : typeof el === 'object'\r\n                            ? Array.isArray(el) \r\n                                ? <ArrayDisplay array={el} newest={newest}/>\r\n                                : getChildren(el, newest)\r\n                            : <div key={key}>{el}</div>\r\n                    )}\r\n                </div>\r\n            )}\r\n        </span>\r\n    );\r\n};\r\n\r\nexport default ArrayDisplay;\r\n","import React, { useState } from 'react';\r\nimport { Icon } from 'semantic-ui-react';\r\nimport ArrayDisplay from '../ArrayDisplay';\r\nimport getChildren from '../GetChildren';\r\n\r\nconst ObjectDisplay = ({\r\n    newest,\r\n    object,\r\n}: {\r\n    newest: boolean;\r\n    object: { [key: string]: any };\r\n}) => {\r\n    const [open, setOpen] = useState(false);\r\n\r\n    return (\r\n        <span>\r\n            <Icon\r\n                name={open ? 'caret down' : 'caret right'}\r\n                onClick={() => setOpen(!open)}\r\n                style={{ cursor: 'pointer' }}\r\n            />\r\n            {open && (\r\n                <div\r\n                    style={{\r\n                        outline: 'solid',\r\n                        outlineColor: 'lime',\r\n                        margin: 10,\r\n                    }}\r\n                >\r\n                    {Object.keys(object).map((key: string) => {\r\n                        const value = object[key];\r\n\r\n                        //                        console.log(`key is ${key}, value is`, value, object);\r\n                        const display =\r\n                            // prettier-ignore\r\n                            value === 'object' \r\n                            ? Array.isArray(value) \r\n                                ? <ArrayDisplay array={value} newest={newest} />\r\n                                : getChildren(object, newest) \r\n                            : `${key}: ${value}`;\r\n\r\n                        return <div key={key}>{display}</div>;\r\n                    })}\r\n                </div>\r\n            )}\r\n        </span>\r\n    );\r\n};\r\n\r\nexport default ObjectDisplay;\r\n","import React, { ReactElement, useState } from 'react';\r\nimport { Icon } from 'semantic-ui-react';\r\n\r\nconst DisplayBox = ({ child }: { child: ReactElement | ReactElement[] }) => {\r\n    const [open, setOpen] = useState(false);\r\n\r\n    return (\r\n        <span>\r\n            <Icon\r\n                name={open ? 'caret down' : 'caret right'}\r\n                onClick={() => setOpen(!open)}\r\n            />\r\n            {open && (\r\n                <div\r\n                    style={{\r\n                        outline: 'solid',\r\n                        outlineColor: 'lime',\r\n                        margin: 10,\r\n                    }}\r\n                >\r\n                    {child}\r\n                </div>\r\n            )}\r\n        </span>\r\n    );\r\n};\r\n\r\nexport default DisplayBox;\r\n","import React from 'react';\r\nimport { Segment, Image } from 'semantic-ui-react';\r\nimport { Post as PostInterface } from '../../types/types';\r\n\r\nconst Post = ({ post }: { post: PostInterface }) => {\r\n    const { body, image } = post;\r\n\r\n    return (\r\n        <Segment>\r\n            {image && <Image size=\"small\" src={image} />}\r\n            {body}\r\n        </Segment>\r\n    );\r\n};\r\n\r\nexport default Post;\r\n","import React from 'react';\r\nimport DisplayBox from '../DisplayBox';\r\nimport { Popup } from 'semantic-ui-react';\r\nimport User from '../../../User';\r\nimport { Instruction } from '../../../../types/types';\r\nimport Post from '../../../Post';\r\n\r\nconst Instructions = ({ instructions }: { instructions: Instruction[] }) => {\r\n    if (instructions.length === 0) return <></>;\r\n    const children = instructions.map((i) => {\r\n        const { author, id, instruction, link } = i;\r\n        return (\r\n            <div>\r\n                <Popup\r\n                    content={<User {...author} />}\r\n                    popperModifiers={{\r\n                        preventOverflow: { boundariesElement: 'window' },\r\n                    }}\r\n                    position=\"top center\"\r\n                    trigger={\r\n                        <a\r\n                            href={author.profile}\r\n                            style={{ color: 'orange' }}\r\n                            target=\"_blank\"\r\n                            rel=\"noopener noreferrer\"\r\n                        >\r\n                            {author.name}\r\n                        </a>\r\n                    }\r\n                />{' '}\r\n                instructs bot \"{instruction}\" at{' '}\r\n                <Popup\r\n                    content={<Post post={i} />}\r\n                    popperModifiers={{\r\n                        preventOverflow: { boundariesElement: 'window' },\r\n                    }}\r\n                    position=\"top center\"\r\n                    trigger={\r\n                        <a\r\n                            href={link}\r\n                            style={{ color: 'lightBlue' }}\r\n                            target=\"_blank\"\r\n                            rel=\"noopener noreferrer\"\r\n                        >\r\n                            post #{id}\r\n                        </a>\r\n                    }\r\n                />\r\n            </div>\r\n        );\r\n    });\r\n    return <DisplayBox child={children} />;\r\n};\r\n\r\nexport default Instructions;\r\n","import React from 'react';\r\nimport { Popup } from 'semantic-ui-react';\r\nimport User from '../../../User';\r\nimport Post from '../../../Post';\r\nimport { Post as SAPost } from '../../../../types/types';\r\n\r\nconst PostMadeByBot = ({ post }: { post: SAPost }) => {\r\n    const { author } = post;\r\n    const { link, id } = post;\r\n\r\n    return (\r\n        <>\r\n            <Popup\r\n                content={<User {...author} />}\r\n                popperModifiers={{\r\n                    preventOverflow: { boundariesElement: 'window' },\r\n                }}\r\n                position=\"top center\"\r\n                trigger={\r\n                    <a\r\n                        href={author.profile}\r\n                        style={{ color: 'orange' }}\r\n                        target=\"_blank\"\r\n                        rel=\"noopener noreferrer\"\r\n                    >\r\n                        {author.name}\r\n                    </a>\r\n                }\r\n            />{' '}\r\n            made{' '}\r\n            <Popup\r\n                content={<Post post={post} />}\r\n                popperModifiers={{\r\n                    preventOverflow: { boundariesElement: 'window' },\r\n                }}\r\n                position=\"top center\"\r\n                trigger={\r\n                    <a\r\n                        href={link}\r\n                        style={{ color: 'lightBlue' }}\r\n                        target=\"_blank\"\r\n                        rel=\"noopener noreferrer\"\r\n                    >\r\n                        post #{id}\r\n                    </a>\r\n                }\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PostMadeByBot;\r\n","import React, { ReactElement } from 'react';\r\nimport {\r\n    KeyStringInterface,\r\n    LogEventTypes,\r\n    FrontEndThread,\r\n} from '../../../../types/types';\r\nimport ErrorEvent from '../ErrorEvent';\r\nimport ArrayDisplay from '../ArrayDisplay';\r\nimport ObjectDisplay from '../ObjectDisplay';\r\nimport Instructions from '../Instructions';\r\nimport PostMadeByBot from '../PostMadeByBot';\r\nimport { millisToMinutesAndSeconds } from '../../../../services/MillisToMinutesAndSeconds';\r\n\r\n//processes LogEvent data, returns react elements for display in the LogViewer\r\nconst getChildren = (object: KeyStringInterface, newest?: boolean) =>\r\n    Object.keys(object).reduce((children, key, index) => {\r\n        switch (key) {\r\n            case LogEventTypes.array: {\r\n                const array = object[key];\r\n                const child = (\r\n                    <ArrayDisplay key={index} array={array} newest={!!newest} />\r\n                );\r\n                children.push(child);\r\n                return children;\r\n            }\r\n            case LogEventTypes.error: {\r\n                const child = (\r\n                    <ErrorEvent\r\n                        key={index}\r\n                        newest={!!newest}\r\n                        error={object[key]}\r\n                    />\r\n                );\r\n                children.push(child);\r\n                return children;\r\n            }\r\n            case LogEventTypes.instructions: {\r\n                const child = (\r\n                    <Instructions key={index} instructions={object[key]} />\r\n                );\r\n                children.push(child);\r\n                return children;\r\n            }\r\n            case LogEventTypes.link: {\r\n                const child = (\r\n                    <a\r\n                        key={index}\r\n                        href={object[key]}\r\n                        style={{ color: 'lightBlue' }}\r\n                        target=\"_blank\"\r\n                        rel=\"noopener noreferrer\"\r\n                    >\r\n                        Link\r\n                    </a>\r\n                );\r\n                children.push(child);\r\n                return children;\r\n            }\r\n            case LogEventTypes.post: {\r\n                const child = <PostMadeByBot post={object[key]} />;\r\n                children.push(child);\r\n                return children;\r\n            }\r\n            case LogEventTypes.setting: {\r\n                const thisSetting = object[key];\r\n                const setting = Object.keys(thisSetting)[0];\r\n                const child = (\r\n                    <span key={index} style={{ color: 'pink' }}>\r\n                        {setting} is {object[key][setting]?.toString()}\r\n                    </span>\r\n                );\r\n\r\n                children.push(child);\r\n\r\n                return children;\r\n            }\r\n            case LogEventTypes.text: {\r\n                children.push(<span key={index}>{object[key]}</span>);\r\n                return children;\r\n            }\r\n\r\n            case LogEventTypes.threads: {\r\n                const threads: FrontEndThread[] = object[key];\r\n                const displayThreads = threads?.map((thread) => {\r\n                    if (!thread) return;\r\n                    const { name, link, title } = thread;\r\n\r\n                    return (\r\n                        <div>\r\n                            <a\r\n                                href={link}\r\n                                style={{ color: 'lightBlue' }}\r\n                                target=\"_blank\"\r\n                                rel=\"noopener noreferrer\"\r\n                            >\r\n                                {name ? name : title}\r\n                            </a>\r\n                        </div>\r\n                    );\r\n                });\r\n\r\n                const child = (\r\n                    <ArrayDisplay\r\n                        key={index}\r\n                        array={displayThreads}\r\n                        newest={!!newest}\r\n                    />\r\n                );\r\n\r\n                children.push(child);\r\n\r\n                return children;\r\n            }\r\n            case LogEventTypes.timeLeft: {\r\n                const { minutes, seconds } = millisToMinutesAndSeconds(\r\n                    object[key]\r\n                );\r\n\r\n                const time = `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;\r\n\r\n                const child = <span>Time until next bot run: {time}</span>;\r\n\r\n                children.push(child);\r\n                return children;\r\n            }\r\n\r\n            default: {\r\n                const value = object[key];\r\n                //the key isn't one of the recognized types, so make a generic display\r\n                //if it's a primitive value, just display it as a key: string pair\r\n                //if it's an array, display using ArrayDisplay\r\n                //object but not array, use ObjectDisplay\r\n                //ArrayDisplay and ObjectDisplay will recursively call getChildren for contents\r\n                const display =\r\n                    // prettier-ignore\r\n                    typeof value === 'object'\r\n                        ? Array.isArray(value)\r\n                            ? <ArrayDisplay array={value} newest={!!newest} />\r\n                            : <ObjectDisplay object={value} newest={!!newest}/>\r\n                        : value;\r\n\r\n                const child = (\r\n                    <span key={index}>\r\n                        {key}: {display}\r\n                    </span>\r\n                );\r\n\r\n                children.push(child);\r\n            }\r\n        }\r\n        return children;\r\n    }, [] as ReactElement[]);\r\n\r\nexport default getChildren;\r\n","import React from 'react';\r\nimport {\r\n    LogEvent as LogEventInterface,\r\n    KeyStringInterface,\r\n} from '../../../../types/types';\r\nimport AnimatedEllipse from '../AnimatedEllipse';\r\nimport getChildren from '../GetChildren';\r\n\r\nfunction assertIsKeyStringInterface(\r\n    data: string | KeyStringInterface\r\n): asserts data is KeyStringInterface {\r\n    if (!(typeof data === 'object')) {\r\n        throw new Error('data is not a KeyStringInterface');\r\n    }\r\n}\r\n\r\n//api message\r\n//link\r\n//post\r\n//image\r\nconst LogEvent = ({\r\n    event,\r\n    newest,\r\n}: {\r\n    //the event from the api\r\n    event: LogEventInterface;\r\n    //if this event is the latest event received\r\n    newest: boolean;\r\n}) => {\r\n    const { data, text } = event;\r\n\r\n    const getPrint = () => {\r\n        if (!data && text) {\r\n            return text;\r\n        } else if (typeof data === 'object') {\r\n            assertIsKeyStringInterface(data);\r\n            const children = getChildren(data, newest);\r\n\r\n            return <>{children}</>;\r\n        }\r\n    };\r\n\r\n    let print = getPrint();\r\n\r\n    const time = new Date(event.time);\r\n\r\n    const parsedTime =\r\n        time &&\r\n        `${(time.getHours() < 10 ? '0' : '') + time.getHours()}:${\r\n            (time.getMinutes() < 10 ? '0' : '') + time.getMinutes()\r\n        }:${(time.getSeconds() < 10 ? '0' : '') + time.getSeconds()}> `;\r\n\r\n    if (newest && typeof print === 'string' && print.slice(-3) === '...') {\r\n        print = (\r\n            <>\r\n                {print.slice(0, -3)}\r\n                <AnimatedEllipse />\r\n            </>\r\n        );\r\n    }\r\n    return (\r\n        <div>\r\n            {time && <span style={{ color: 'yellow' }}>{parsedTime}</span>}\r\n            {print}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LogEvent;\r\n","const getLineHeight = () => {\r\n    //to get the line height\r\n    const root = document.getElementById('root');\r\n    const text = document.createElement('span');\r\n    text.innerHTML = 'Hello';\r\n    //add an element containing some text\r\n    root?.appendChild(text);\r\n\r\n    //find the height\r\n    const lineHeight = parseInt(window.getComputedStyle(text).fontSize, 10);\r\n    //remove the element\r\n    root?.removeChild(text);\r\n    return lineHeight;\r\n};\r\n\r\nexport default getLineHeight;\r\n","import React, { useEffect, useRef, MutableRefObject, useContext } from 'react';\r\nimport { Loader, Segment } from 'semantic-ui-react';\r\nimport LogEvent from './components/LogEvent';\r\nimport { EventsContext } from '../../services/EventsContext';\r\nimport getLineHeight from '../../services/GetLineHeight';\r\n\r\nconst LogViewer = ({ lines }: { lines?: number }) => {\r\n    const { events } = useContext(EventsContext);\r\n\r\n    const eventsEndRef = useRef(null) as MutableRefObject<any>;\r\n\r\n    const scrollToBottom = () => {\r\n        eventsEndRef?.current?.scrollIntoView({\r\n            block: 'end',\r\n            behavior: 'smooth',\r\n        });\r\n    };\r\n\r\n    useEffect(scrollToBottom, [events]);\r\n\r\n    const getHeight = () => {\r\n        if (!lines) return 250;\r\n\r\n        const lineHeight = getLineHeight();\r\n\r\n        //multiply by lines + 1 to get the desired height\r\n        return lineHeight ? lineHeight * (lines + 1) : 250;\r\n    };\r\n\r\n    return (\r\n        <Segment\r\n            style={{\r\n                backgroundColor: 'black',\r\n                color: 'lime',\r\n                height: getHeight(),\r\n                overflow: 'auto',\r\n            }}\r\n        >\r\n            {!events ? (\r\n                <Loader active />\r\n            ) : (\r\n                events.map((event, key) => (\r\n                    <LogEvent\r\n                        event={event}\r\n                        key={key}\r\n                        newest={key === events.length - 1}\r\n                    />\r\n                ))\r\n            )}\r\n            <div ref={eventsEndRef} />\r\n        </Segment>\r\n    );\r\n};\r\n\r\nexport default LogViewer;\r\n","import React from 'react';\r\nimport { Segment } from 'semantic-ui-react';\r\nimport BotStateDisplay from './components/BotStateDisplay';\r\nimport ControlButtons from './components/ControlButtons';\r\nimport Interval from './components/Interval';\r\nimport LogViewer from '../LogViewer/';\r\n\r\nconst Settings = () => {\r\n    return (\r\n        <div>\r\n            <Segment>\r\n                <LogViewer />\r\n            </Segment>\r\n            <Segment>\r\n                <ControlButtons />\r\n                <BotStateDisplay />\r\n                <Interval />\r\n            </Segment>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Settings;\r\n","import React, { useContext } from 'react';\r\nimport { ThreadsActionTypes } from '../../../../types/types';\r\nimport { ThreadsContext } from '../../../../services/ThreadsContext';\r\nimport EditableInput from '../../../EditableInput';\r\n\r\nconst ThreadInput = ({\r\n    threadId,\r\n    callback,\r\n    checkbox,\r\n    input,\r\n    labelText,\r\n    textArea,\r\n    type,\r\n    value,\r\n}: {\r\n    threadId: number;\r\n\r\n    callback?: (args: any) => void;\r\n\r\n    //render a checkbox\r\n    checkbox?: boolean;\r\n\r\n    //the type of action to set the input value\r\n    type?: ThreadsActionTypes;\r\n\r\n    //the input\r\n    input: string;\r\n\r\n    labelText?: string;\r\n\r\n    //render a textarea\r\n    textArea?: boolean;\r\n\r\n    //the old value of the input\r\n    value?: string | boolean;\r\n}) => {\r\n    const { dispatch } = useContext(ThreadsContext);\r\n\r\n    const configKeys = ['threads', threadId.toString()];\r\n\r\n    return (\r\n        <EditableInput\r\n            callback={callback}\r\n            checkbox={checkbox}\r\n            configKeys={configKeys}\r\n            dispatch={dispatch}\r\n            dispatchBefore={type && [{ type, thread: threadId } as any]}\r\n            dispatchOnFailure={\r\n                type && [\r\n                    {\r\n                        type,\r\n                        thread: threadId,\r\n                        value,\r\n                    } as any,\r\n                ]\r\n            }\r\n            input={input}\r\n            labelText={labelText}\r\n            textArea={textArea}\r\n            value={value}\r\n        />\r\n    );\r\n};\r\n\r\nexport default ThreadInput;\r\n","import React, { useContext, useState } from 'react';\r\nimport { Button, Icon, Segment } from 'semantic-ui-react';\r\nimport { BotContext } from '../../../../services/BotContext';\r\nimport { runOnceForThread, runOnce } from '../../../../services/Api';\r\nimport RotatingCog from '../../../RotatingCog';\r\nimport LogViewer from '../../../LogViewer';\r\nimport { simulateRunForThread } from '../../../../services/Generators/LogEvents';\r\nimport { ActionsContext } from '../../../../services/ActionsContext';\r\nimport { EventsContext } from '../../../../services/EventsContext';\r\nimport { ThreadsContext } from '../../../../services/ThreadsContext';\r\nimport { BotActionTypes } from '../../../../types/Bot';\r\n\r\nconst RunOnceForThreadButton = ({ threadId }: { threadId: number }) => {\r\n    const [open, setOpen] = useState(false);\r\n    const { dispatch, settings } = useContext(BotContext);\r\n    const { dispatch: eventsDispatch } = useContext(EventsContext);\r\n    const { threads } = useContext(ThreadsContext);\r\n    const running = !!settings?.running;\r\n    const { actions } = useContext(ActionsContext);\r\n    const botName = settings?.botName || '';\r\n\r\n    const thread = threads?.find((t) => t.threadId === threadId);\r\n\r\n    const doRunOnce = async () => {\r\n        if (thread) {\r\n            runOnce(dispatch);\r\n            await simulateRunForThread({\r\n                actions,\r\n                botName,\r\n                dispatch: eventsDispatch,\r\n                thread,\r\n            });\r\n\r\n            dispatch({\r\n                type: BotActionTypes.setRunning,\r\n                running: false,\r\n            });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Button\r\n                color=\"blue\"\r\n                onClick={() => {\r\n                    setOpen(true);\r\n                    !running && doRunOnce();\r\n                }}\r\n            >\r\n                {running ? (\r\n                    <RotatingCog size=\"large\" />\r\n                ) : (\r\n                    <Icon name=\"play circle\" size=\"large\" />\r\n                )}\r\n                {running ? 'Running' : 'Run Once For This Thread'}\r\n            </Button>\r\n            {open && (\r\n                <Segment>\r\n                    <Button\r\n                        floated=\"right\"\r\n                        icon=\"close\"\r\n                        onClick={() => setOpen(false)}\r\n                    />\r\n                    <LogViewer lines={6} />\r\n                </Segment>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default RunOnceForThreadButton;\r\n","import React, { useContext, useState } from 'react';\r\nimport { ThreadsContext } from '../../../../services/ThreadsContext';\r\nimport { Button, Label } from 'semantic-ui-react';\r\nimport { markLastRead, loadThreads } from '../../../../services/Api';\r\n\r\nconst SetLastRead = ({ threadId }: { threadId: number }) => {\r\n    const { dispatch, threads } = useContext(ThreadsContext);\r\n    const pages = threads?.find((t) => t.threadId === threadId)?.pages || 0;\r\n    const [lastRead, setLastRead] = useState<number | undefined>(undefined);\r\n\r\n    return (\r\n        <div style={{ marginTop: 10, marginBottom: 10 }}>\r\n            <Label size=\"large\" content={'Set Last Read Page: '} />\r\n            <input\r\n                value={lastRead}\r\n                onChange={({ target }) => {\r\n                    const { value } = target;\r\n                    if (!value) {\r\n                        setLastRead(undefined);\r\n                    } else {\r\n                        const number = Number(value.replace(/\\D/, ''));\r\n                        setLastRead(number);\r\n                    }\r\n                }}\r\n            />\r\n            <Button\r\n                disabled={!lastRead || lastRead > pages}\r\n                onClick={async () =>\r\n                    lastRead &&\r\n                    (await markLastRead({\r\n                        page: lastRead,\r\n                        threadId,\r\n                    }))\r\n                }\r\n            >\r\n                Go\r\n            </Button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SetLastRead;\r\n","import React, { useContext } from 'react';\r\nimport { ThreadsContext } from '../../../../services/ThreadsContext';\r\nimport { Segment, Header, Label } from 'semantic-ui-react';\r\nimport ThreadInput from '../ThreadInput';\r\nimport { ThreadsActionTypes } from '../../../../types/types';\r\nimport {\r\n    bookmarkThread,\r\n    unbookmarkThread,\r\n    loadThreads,\r\n} from '../../../../services/Api';\r\nimport RunOnceForThreadButton from '../RunOnceForThreadButton';\r\nimport SetLastRead from '../SetLastRead';\r\n\r\nconst NoThread = () => (\r\n    <Segment>\r\n        <Header>No Thread Selected</Header>\r\n        The bot will automatically grab all threads that are bookmarked by the\r\n        assigned SA forums account.\r\n        <br />\r\n        If you want the bot to watch a thread, log in to SA and bookmark the\r\n        thread.\r\n        <br />\r\n        If you want the bot to stop watching a thread, you can use the\r\n        unbookmark thread button in this control panel.\r\n        <br />\r\n        You can also log in to SA and unbookmark the thread.\r\n        <br />\r\n    </Segment>\r\n);\r\n\r\nconst CurrentThread = () => {\r\n    const { dispatch, thread, threads } = useContext(ThreadsContext);\r\n\r\n    const currentThread = threads?.find((t) => t?.threadId === thread);\r\n    if (!currentThread) return <NoThread />;\r\n\r\n    const {\r\n        bookmarked,\r\n        link,\r\n        name,\r\n        pages,\r\n        threadId,\r\n        title,\r\n        unreadPosts,\r\n    } = currentThread;\r\n\r\n    const style = { marginTop: 10, marginBottom: 10 };\r\n\r\n    return (\r\n        <>\r\n            <Header as=\"h2\">{name ? name : title}</Header>\r\n            <div style={style}>\r\n                <Label size=\"large\" content={'threadId:'} />{' '}\r\n                <a href={link} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                    {threadId}\r\n                </a>\r\n            </div>\r\n            <div style={style}>\r\n                <RunOnceForThreadButton threadId={threadId} />\r\n            </div>\r\n            <ThreadInput\r\n                callback={async () =>\r\n                    bookmarked\r\n                        ? unbookmarkThread({ dispatch, threadId })\r\n                        : await bookmarkThread({ dispatch, threadId })\r\n                }\r\n                checkbox\r\n                input={'bookmarked'}\r\n                threadId={threadId}\r\n                value={bookmarked}\r\n            />\r\n            Forums thread titles can change. <br />\r\n            You can add your own custom name to a thread. <br />\r\n            The thread name will appear in the control panel and the log. <br />\r\n            <ThreadInput\r\n                threadId={threadId}\r\n                input={'name'}\r\n                type={ThreadsActionTypes.setName}\r\n                value={name}\r\n            />\r\n            <div style={style}>\r\n                <Label size=\"large\" content={'Title:'} /> {title}\r\n            </div>\r\n            <div style={style}>\r\n                <Label size=\"large\" content={'Pages:'} />{' '}\r\n                {pages ? pages : '???'}\r\n            </div>\r\n            <div style={style}>\r\n                <Label size=\"large\" content={'Unread Posts:'} />{' '}\r\n                {unreadPosts !== undefined ? unreadPosts : '???'}\r\n            </div>\r\n            {pages && (\r\n                <div>\r\n                    You can set the last page that the bot has read. <br />\r\n                    The bot will only scan posts after the last page it has\r\n                    read.\r\n                </div>\r\n            )}\r\n            {pages && <SetLastRead threadId={threadId} />}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default CurrentThread;\r\n","import React from 'react';\r\nimport { Label, Popup } from 'semantic-ui-react';\r\n\r\nconst SideBarThread = ({\r\n    bookmarked,\r\n    labelColor,\r\n    name,\r\n    selectThread,\r\n    title,\r\n    unreadPosts,\r\n}: {\r\n    bookmarked: boolean;\r\n    labelColor?: 'green' | 'blue';\r\n    name?: string;\r\n    selectThread: () => void;\r\n    title?: string;\r\n    unreadPosts?: number;\r\n}) => (\r\n    <div\r\n        style={{\r\n            cursor: 'pointer',\r\n            padding: 10,\r\n        }}\r\n        onClick={selectThread}\r\n    >\r\n        <Popup\r\n            disabled={!name}\r\n            content={title}\r\n            trigger={<Label color={labelColor}>{name ? name : title}</Label>}\r\n        />\r\n        {bookmarked && (\r\n            <Label\r\n                color={unreadPosts ? 'blue' : undefined}\r\n                content={unreadPosts}\r\n            />\r\n        )}\r\n    </div>\r\n);\r\n\r\nexport default SideBarThread;\r\n","import React, { useContext } from 'react';\r\nimport { ThreadsContext } from '../../../../services/ThreadsContext';\r\nimport { ThreadsActionTypes } from '../../../../types/types';\r\nimport SideBarThread from '../SideBarThread';\r\n\r\nconst SideBarThreads = () => {\r\n    const { dispatch, thread, threads } = useContext(ThreadsContext);\r\n\r\n    if (!threads) return <div>No threads</div>;\r\n\r\n    return (\r\n        <>\r\n            {threads.map((t, index) => {\r\n                const { bookmarked, name, title, threadId, unreadPosts } = t;\r\n\r\n                const selectThread = () =>\r\n                    dispatch({\r\n                        type: ThreadsActionTypes.currentThread,\r\n                        threadId,\r\n                    });\r\n\r\n                const labelColor =\r\n                    threadId === thread\r\n                        ? 'green'\r\n                        : bookmarked\r\n                        ? 'blue'\r\n                        : undefined;\r\n\r\n                return (\r\n                    <SideBarThread\r\n                        key={index}\r\n                        selectThread={selectThread}\r\n                        bookmarked={bookmarked}\r\n                        name={name}\r\n                        title={title}\r\n                        labelColor={labelColor}\r\n                        unreadPosts={unreadPosts}\r\n                    />\r\n                );\r\n            })}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default SideBarThreads;\r\n","import React, { useContext } from 'react';\r\nimport { ThreadsContext } from '../../services/ThreadsContext';\r\nimport { loadThreads } from '../../services/Api/services/Threads';\r\nimport { Grid, Header, Segment, Button } from 'semantic-ui-react';\r\nimport CurrentThread from './components/CurrentThread';\r\nimport SideBarThreads from './components/SideBarThreads';\r\nimport { ThreadsActionTypes } from '../../types/types';\r\n\r\nconst Threads = () => {\r\n    const { dispatch, fetching, threads } = useContext(ThreadsContext);\r\n\r\n    return (\r\n        <Segment>\r\n            <Grid columns={2} divided>\r\n                <Grid.Column width={4}>\r\n                    <Header\r\n                        as=\"h2\"\r\n                        onClick={() =>\r\n                            dispatch({\r\n                                type: ThreadsActionTypes.currentThread,\r\n                                threadId: 0,\r\n                            })\r\n                        }\r\n                        style={{ cursor: 'pointer' }}\r\n                    >\r\n                        Threads{' '}\r\n                        <Button\r\n                            disabled={fetching}\r\n                            onClick={(e) => {\r\n                                e.stopPropagation();\r\n                                loadThreads({\r\n                                    dispatch,\r\n                                    threads: threads || [],\r\n                                });\r\n                            }}\r\n                            floated=\"right\"\r\n                            icon=\"refresh\"\r\n                        />\r\n                    </Header>\r\n                    <SideBarThreads />\r\n                </Grid.Column>\r\n                <Grid.Column width={12}>\r\n                    <CurrentThread />\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    );\r\n};\r\n\r\nexport default Threads;\r\n","import React, { useContext, useEffect } from 'react';\r\nimport { Tab, Message } from 'semantic-ui-react';\r\nimport Actions from '../Actions';\r\nimport Albums from '../Albums';\r\nimport APIs from '../APIs';\r\nimport Credentials from '../Credentials';\r\nimport Settings from '../Settings';\r\nimport Threads from '../Threads';\r\nimport { listenToEvents } from '../../services/Api';\r\nimport { EventsContext } from '../../services/EventsContext';\r\nimport { BotContext } from '../../services/BotContext';\r\nimport { ThreadsContext } from '../../services/ThreadsContext';\r\nimport { EventsActionTypes, FrontEndBotSettings } from '../../types/types';\r\nimport { makeEvent } from '../../services/Generators/LogEvents';\r\nimport { InstructionsContext } from '../../services/InstructionsContext';\r\n\r\n// edit the config.json file that the bot accesses\r\n// input api keys and secrets to config.json file\r\n// Change the bot name\r\n// change the sa userName and password stored in the bot config\r\n// turn responses (keyword and action pairs) on and off\r\n// view logs, including date picker\r\n// view stats\r\n// review images submitted to albums, accept or reject them\r\n// ignore users\r\n// set email addres for error alerts/crashes\r\n// real time viewer- scrolling window of executed instructions, posts made, and errors\r\n// Start and STop button\r\n// Interval timer\r\n// Countdouwn until next time the bot runs\r\n// List of current threads viewed\r\n\r\nconst tabs = [\r\n    {\r\n        menuItem: 'Controls',\r\n        render: () => (\r\n            <Tab.Pane>\r\n                <Settings />\r\n            </Tab.Pane>\r\n        ),\r\n    },\r\n    {\r\n        menuItem: 'Threads',\r\n        render: () => (\r\n            <Tab.Pane>\r\n                <Threads />\r\n            </Tab.Pane>\r\n        ),\r\n    },\r\n    {\r\n        menuItem: 'Credentials',\r\n        render: () => (\r\n            <Tab.Pane>\r\n                <Credentials />\r\n            </Tab.Pane>\r\n        ),\r\n    },\r\n    {\r\n        menuItem: 'Actions',\r\n        render: () => (\r\n            <Tab.Pane>\r\n                <Actions />\r\n            </Tab.Pane>\r\n        ),\r\n    },\r\n    {\r\n        menuItem: 'Image Albums',\r\n        render: () => (\r\n            <Tab.Pane>\r\n                <Albums />\r\n            </Tab.Pane>\r\n        ),\r\n    },\r\n    {\r\n        menuItem: 'APIs',\r\n        render: () => (\r\n            <Tab.Pane>\r\n                <APIs />\r\n            </Tab.Pane>\r\n        ),\r\n    },\r\n];\r\n\r\nconst ControlPanel = () => {\r\n    const { dispatch, listening } = useContext(EventsContext);\r\n    const { threads } = useContext(ThreadsContext);\r\n    const { settings } = useContext(BotContext);\r\n    const { interval, on, running } = settings as FrontEndBotSettings;\r\n\r\n    useEffect(() => {\r\n        if (!listening) {\r\n            dispatch({\r\n                type: EventsActionTypes.setListening,\r\n                listening: true,\r\n            });\r\n            dispatch({\r\n                type: EventsActionTypes.addEvent,\r\n                event: makeEvent('api started'),\r\n            });\r\n            dispatch({\r\n                type: EventsActionTypes.addEvent,\r\n                event: {\r\n                    time: Date(),\r\n                    data: { setting: { interval } },\r\n                },\r\n            });\r\n            dispatch({\r\n                type: EventsActionTypes.addEvent,\r\n                event: { time: Date(), data: { setting: { on } } },\r\n            });\r\n            dispatch({\r\n                type: EventsActionTypes.addEvent,\r\n                event: { time: Date(), data: { setting: { running } } },\r\n            });\r\n        }\r\n    }, [listening, dispatch, interval, on, running]);\r\n\r\n    useEffect(() => {\r\n        if (!!threads && !!threads.length) {\r\n            const threadText = threads\r\n                ? `Watching ${threads.length} thread${\r\n                      threads.length === 1 ? '' : 's'\r\n                  }`\r\n                : 'Not Watching any threads';\r\n\r\n            dispatch({\r\n                type: EventsActionTypes.addEvent,\r\n                event: {\r\n                    time: Date(),\r\n                    data: {\r\n                        text: threadText,\r\n                        threads,\r\n                    },\r\n                },\r\n            });\r\n        }\r\n    }, [dispatch, threads]);\r\n\r\n    return (\r\n        <>\r\n            <Message>\r\n                Welcome to the control panel. This example pulls some\r\n                information from the forums but isn't actually hooked up to an\r\n                instance of the bot. <br />\r\n                Most of the controls will work. <br />\r\n                Try clicking the 'run once' button to see how it looks when the\r\n                bot runs and responds to posts.\r\n            </Message>\r\n            <Tab panes={tabs} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ControlPanel;\r\n","import React, { useState } from 'react';\r\nimport { Segment, Header } from 'semantic-ui-react';\r\nimport ReactMarkdown from '../../../Markdown';\r\nimport useResize from '../../../APIs/components/Instructions/GenericInstructions/services/UseResize';\r\nimport { spacing } from '../../../../services/Spacing';\r\n\r\nexport const Instruction = ({\r\n    input,\r\n    name,\r\n    addChildren,\r\n    forceOpen,\r\n}: {\r\n    forceOpen?: boolean;\r\n    input: string;\r\n    name: string;\r\n    addChildren?: JSX.Element[];\r\n}) => {\r\n    const [open, setOpen] = useState(!!forceOpen);\r\n    const divRef = React.useRef<HTMLDivElement>(null);\r\n    const maxWidth = useResize(divRef);\r\n\r\n    const markdownChild = (\r\n        <div onClick={(e) => !forceOpen && setOpen(false)}>\r\n            <ReactMarkdown\r\n                key=\"markdown\"\r\n                escapeHtml={false}\r\n                source={input}\r\n                maxWidth={maxWidth}\r\n            />\r\n        </div>\r\n    );\r\n\r\n    const inputName = input.split(/\\r?\\n/)[0].replace('#', '').trim();\r\n\r\n    const child = (\r\n        <div\r\n            onClick={(e) => {\r\n                e.preventDefault();\r\n                setOpen(true);\r\n            }}\r\n        >\r\n            <Header as=\"h3\">{inputName ? inputName : name}</Header>\r\n        </div>\r\n    );\r\n\r\n    const children = [open ? markdownChild : child];\r\n\r\n    if (open) {\r\n        addChildren?.forEach((child, index) =>\r\n            children.push({ ...child, key: index.toString() })\r\n        );\r\n    }\r\n\r\n    const style = forceOpen ? spacing : { ...spacing, cursor: 'pointer' };\r\n    return (\r\n        <div ref={divRef} style={style}>\r\n            <Segment children={children} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Instruction;\r\n","import React, { useContext } from 'react';\r\nimport { Header, Segment } from 'semantic-ui-react';\r\nimport { InstructionsContext } from '../../../../services/InstructionsContext';\r\nimport getLineHeight from '../../../../services/GetLineHeight';\r\nimport { ThreadsContext } from '../../../../services/ThreadsContext';\r\n\r\nconst Threads = () => {\r\n    const { botName } = useContext(InstructionsContext);\r\n    const { threads } = useContext(ThreadsContext);\r\n\r\n    const lineHeight = getLineHeight();\r\n\r\n    const lines = 5;\r\n\r\n    const maxHeight = lineHeight ? (lines + 1) * lineHeight : 100;\r\n\r\n    const zero = !threads?.length;\r\n    const singular = threads?.length === 1;\r\n    return (\r\n        <Segment>\r\n            <Header as=\"h2\">\r\n                {botName} is currently {zero ? 'not ' : ''}watching{' '}\r\n                {zero ? 'any ' : threads?.length} thread{singular ? '' : 's'}\r\n            </Header>\r\n            <div style={{ maxHeight, overflow: 'auto' }}>\r\n                {threads?.map((thread, index) => (\r\n                    <div key={index}>\r\n                        <a\r\n                            href={thread.link}\r\n                            target=\"_blank\"\r\n                            rel=\"noopener noreferrer\"\r\n                        >\r\n                            {thread.title}\r\n                        </a>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </Segment>\r\n    );\r\n};\r\n\r\nexport default Threads;\r\n","import React from 'react';\r\nimport ReactMarkdown from '../../../Markdown';\r\nimport useResize from '../../../APIs/components/Instructions/GenericInstructions/services/UseResize';\r\nimport { Segment, Header, Label } from 'semantic-ui-react';\r\nimport { Trigger } from '../../../../types/types';\r\nimport { spacing } from '../../../../services/Spacing';\r\n\r\nexport const RegexTriggerDisplay = ({\r\n    album,\r\n    input,\r\n    triggers,\r\n}: {\r\n    album?: string;\r\n    input?: string;\r\n    triggers: Trigger[];\r\n}) => {\r\n    const divRef = React.useRef<HTMLDivElement>(null);\r\n    const maxWidth = useResize(divRef);\r\n\r\n    if (album) {\r\n        input = input?.replace(/\\${album}/g, album);\r\n    }\r\n\r\n    return (\r\n        <Segment>\r\n            {!!input?.length ? (\r\n                <div ref={divRef}>\r\n                    <ReactMarkdown\r\n                        key=\"markdown\"\r\n                        escapeHtml={false}\r\n                        source={input}\r\n                        maxWidth={maxWidth}\r\n                    />{' '}\r\n                </div>\r\n            ) : (\r\n                <>\r\n                    <Header as=\"h4\">\r\n                        No example given to match regular expression trigger\r\n                    </Header>\r\n                    {triggers\r\n                        .filter((trigger) => trigger instanceof RegExp)\r\n                        .map((trigger, index) => (\r\n                            <div key={index} style={spacing}>\r\n                                <Label color=\"blue\">RegExp</Label>{' '}\r\n                                {trigger.toString()}\r\n                            </div>\r\n                        ))}\r\n                </>\r\n            )}\r\n        </Segment>\r\n    );\r\n};\r\n\r\nexport default RegexTriggerDisplay;\r\n","import React, { useContext } from 'react';\r\nimport { spacing } from '../../../../services/Spacing';\r\nimport { Segment, Header } from 'semantic-ui-react';\r\nimport { Trigger as TriggerType } from '../../../../types/types';\r\nimport RegexTriggerDisplay from '../RegexTriggerDisplay';\r\nimport { InstructionsContext } from '../../../../services/InstructionsContext';\r\n\r\nconst Trigger = ({ trigger }: { trigger: TriggerType }) => {\r\n    const { botName } = useContext(InstructionsContext);\r\n    return (\r\n        <Segment>\r\n            {botName} {trigger.toString()}\r\n        </Segment>\r\n    );\r\n};\r\n\r\nconst TriggerInstruction = ({\r\n    example,\r\n    triggers,\r\n}: {\r\n    example?: string;\r\n    triggers: TriggerType[];\r\n}) => {\r\n    const hasRegExp = triggers.some((el) => el instanceof RegExp);\r\n\r\n    return !!triggers.length ? (\r\n        <Segment>\r\n            <Header as=\"h3\">How to trigger this action</Header>\r\n            <div style={spacing}>\r\n                {triggers.map(\r\n                    (trigger, index) =>\r\n                        !(trigger instanceof RegExp) && (\r\n                            <Trigger key={index} trigger={trigger} />\r\n                        )\r\n                )}\r\n            </div>\r\n            {hasRegExp && (\r\n                <RegexTriggerDisplay input={example} triggers={triggers} />\r\n            )}\r\n        </Segment>\r\n    ) : (\r\n        <Segment>\r\n            <Header as=\"h2\">No triggers set for this action</Header>\r\n        </Segment>\r\n    );\r\n};\r\n\r\nexport default TriggerInstruction;\r\n","import React, { useContext } from 'react';\r\nimport { InstructionsContext } from '../../../../services/InstructionsContext';\r\nimport { Segment, Header } from 'semantic-ui-react';\r\nimport { ActionInstruction } from '../../../../types/types';\r\nimport Instruction from '../Instruction';\r\nimport { Trigger } from '../../../../types/types';\r\nimport RegexTriggerDisplay from '../RegexTriggerDisplay';\r\n\r\nconst AlbumTriggersInstruction = ({\r\n    album,\r\n    description,\r\n    example,\r\n    triggers,\r\n}: {\r\n    album: string;\r\n    description?: string;\r\n    example?: string;\r\n    triggers: Trigger[];\r\n}) => {\r\n    const { botName } = useContext(InstructionsContext);\r\n    const hasRegex = triggers.some((trigger) => trigger instanceof RegExp);\r\n\r\n    const stringChildren = triggers\r\n        .filter((trigger) => !(trigger instanceof RegExp))\r\n        .map((trigger, key) => (\r\n            <Segment key={key}>\r\n                <div>\r\n                    {botName} {trigger} {album}\r\n                </div>\r\n            </Segment>\r\n        ));\r\n\r\n    return (\r\n        <>\r\n            <Header as=\"h4\">\r\n                {album} {description ? `- ${description}` : ''}\r\n            </Header>\r\n            {hasRegex && (\r\n                <RegexTriggerDisplay\r\n                    album={album}\r\n                    input={example}\r\n                    triggers={triggers}\r\n                />\r\n            )}\r\n            {stringChildren}\r\n        </>\r\n    );\r\n};\r\n\r\n//instruction for an action that deals with albums\r\nconst AlbumActionInstruction = ({\r\n    actionInstruction,\r\n}: {\r\n    actionInstruction: ActionInstruction;\r\n}) => {\r\n    const { albums } = useContext(InstructionsContext);\r\n\r\n    const { example, instructions, key, name, triggers } = actionInstruction;\r\n\r\n    const addChildren = !!albums.length\r\n        ? albums.map(({ album, description }, key) => (\r\n              <AlbumTriggersInstruction\r\n                  key={key}\r\n                  album={album}\r\n                  description={description}\r\n                  example={example}\r\n                  triggers={triggers}\r\n              />\r\n          ))\r\n        : [\r\n              <AlbumTriggersInstruction\r\n                  key=\"placeholder\"\r\n                  album={'placeHolder'}\r\n                  description={\r\n                      'This bot has no active albums. This placeholder is here as an example'\r\n                  }\r\n                  example={example}\r\n                  triggers={triggers}\r\n              />,\r\n          ];\r\n\r\n    return (\r\n        <Instruction\r\n            addChildren={addChildren}\r\n            input={instructions || ''}\r\n            key={key}\r\n            name={name}\r\n        />\r\n    );\r\n};\r\n\r\nexport default AlbumActionInstruction;\r\n","import React, { useContext } from 'react';\r\nimport { Segment, Header } from 'semantic-ui-react';\r\nimport { InstructionsContext } from '../../../../services/InstructionsContext';\r\nimport TriggerInstruction from '../TriggerInstruction';\r\nimport Instruction from '../Instruction';\r\nimport AlbumActionInstruction from '../AlbumActionInstruction';\r\n\r\nconst ActionsInstructions = () => {\r\n    const { actions } = useContext(InstructionsContext);\r\n\r\n    const albumActions = actions.filter((action) => action.albums);\r\n    const notAlbumActions = actions.filter((action) => !action.albums);\r\n\r\n    return (\r\n        <Segment>\r\n            <Header as=\"h2\">Actions - click for description</Header>\r\n            {albumActions.map((actionInstruction) => (\r\n                <AlbumActionInstruction actionInstruction={actionInstruction} />\r\n            ))}\r\n            {notAlbumActions?.map(\r\n                ({ example, instructions, key, name, triggers }) => (\r\n                    <Instruction\r\n                        input={instructions || ''}\r\n                        key={key}\r\n                        name={name}\r\n                        addChildren={[\r\n                            <TriggerInstruction\r\n                                example={example}\r\n                                triggers={triggers}\r\n                            />,\r\n                        ]}\r\n                    />\r\n                )\r\n            )}\r\n        </Segment>\r\n    );\r\n};\r\n\r\nexport default ActionsInstructions;\r\n","import React, { useEffect, useContext, useCallback } from 'react';\r\nimport { Loader, Message, Grid, Icon } from 'semantic-ui-react';\r\nimport { Container } from 'semantic-ui-react';\r\nimport Instruction from './components/Instruction';\r\nimport { getInstructions, getBotName } from '../../services/Api';\r\nimport { InstructionsContext } from '../../services/InstructionsContext';\r\nimport { InstructionsActionTypes } from '../../types/types';\r\nimport User from '../User';\r\nimport Threads from './components/Threads';\r\nimport ActionsInstructions from './components/ActionsInstructions';\r\n\r\nconst Instructions = () => {\r\n    const {\r\n        dispatch,\r\n        actions,\r\n        bot,\r\n        done,\r\n        fetching,\r\n        failed,\r\n        general,\r\n    } = useContext(InstructionsContext);\r\n\r\n    useEffect(() => {\r\n        !fetching && !done && !failed && getInstructions(dispatch);\r\n    }, [actions, dispatch, done, failed, fetching]);\r\n\r\n    // const loadBotName = useCallback(async () => {\r\n    //     const botName = await getBotName();\r\n    //     botName &&\r\n    //         dispatch({ type: InstructionsActionTypes.setBotName, botName });\r\n    // }, [dispatch]);\r\n\r\n    // useEffect(() => {\r\n    //     loadBotName();\r\n    // }, [loadBotName]);\r\n\r\n    if (!actions && fetching) return <Loader active />;\r\n\r\n    if (!actions && done)\r\n        return <Message warning>Failed to load Instructions</Message>;\r\n\r\n    return (\r\n        <>\r\n            <Message>\r\n                This is an example of how the forums bot control panel looks.\r\n                Click the cog icon <Icon name=\"cog\" /> in the upper left to see\r\n                the control panel.\r\n            </Message>\r\n            <Grid>\r\n                <Grid.Column width={3}>{bot && <User {...bot} />}</Grid.Column>\r\n                <Grid.Column width={13}>\r\n                    <Container>\r\n                        {general ? (\r\n                            <>\r\n                                <Instruction\r\n                                    name=\"\"\r\n                                    input={general}\r\n                                    forceOpen={true}\r\n                                />\r\n                                <Threads />\r\n                                <ActionsInstructions />\r\n                            </>\r\n                        ) : (\r\n                            <Loader active />\r\n                        )}\r\n                    </Container>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Instructions;\r\n","import React from 'react';\r\nimport { ApiProvider } from '../../services/ApiContext';\r\nimport { AlbumsProvider } from '../../services/AlbumsContext';\r\nimport { BotProvider } from '../../services/BotContext';\r\nimport { EventsProvider } from '../../services/EventsContext';\r\nimport { LoginProvider } from '../../services/LoginContext';\r\nimport { ThreadsProvider } from '../../services/ThreadsContext';\r\nimport { ActionsProvider } from '../../services/ActionsContext';\r\nimport { InstructionsProvider } from '../../services/InstructionsContext';\r\n\r\nconst Providers = (props: any) => (\r\n    <ActionsProvider>\r\n        <ApiProvider>\r\n            <AlbumsProvider>\r\n                <BotProvider>\r\n                    <EventsProvider>\r\n                        <InstructionsProvider>\r\n                            <LoginProvider>\r\n                                <ThreadsProvider {...props} />\r\n                            </LoginProvider>\r\n                        </InstructionsProvider>\r\n                    </EventsProvider>\r\n                </BotProvider>\r\n            </AlbumsProvider>\r\n        </ApiProvider>\r\n    </ActionsProvider>\r\n);\r\n\r\nexport default Providers;\r\n","import { getToken } from '../Token';\r\n\r\nexport const getHeaders = () => {\r\n    const token = getToken();\r\n    return token\r\n        ? new Headers({\r\n              Accept: 'application/json',\r\n              Authorization: 'Bearer ' + token,\r\n              'Content-Type': 'application/json',\r\n          })\r\n        : undefined;\r\n};\r\n","import * as cheerio from 'cheerio';\r\nimport { FrontEndThread } from '../../../types/types';\r\n\r\nconst getRandomInt = (min = 1, max = 100) => {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    max < min && (max = min + 1);\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n};\r\n\r\nconst proxyurl = 'https://cors-anywhere.herokuapp.com/';\r\n\r\nconst threadsGenerator = async () => {\r\n    const baseUrl = 'https://forums.somethingawful.com';\r\n\r\n    const url =\r\n        'https://forums.somethingawful.com/forumdisplay.php?forumid=273&daysprune=1000&perpage=40&posticon=0&sortorder=desc&sortfield=lastpost&pagenumber=2';\r\n    const response = await fetch(proxyurl + url);\r\n\r\n    const text = await response.text();\r\n\r\n    const $ = cheerio.load(text);\r\n\r\n    let threads = $('.thread')\r\n        .map((i: number, thread: CheerioElement) => {\r\n            const titleElement = $(thread).find('.thread_title');\r\n            const title = $(titleElement).text();\r\n\r\n            const link = `${baseUrl}/${$(titleElement).attr('href')}`;\r\n\r\n            const threadId = Number(titleElement.attr('href')?.split('=')[1]);\r\n\r\n            //sometimes announcements or ads are put in the bookmark list\r\n            //these aren't threads, don't have a threadId\r\n            //so don't put them in the thread array!\r\n            if (isNaN(threadId)) return;\r\n\r\n            const pageNumbers = $(thread).find('.pagenumber');\r\n            const pages = Number(\r\n                $(pageNumbers[pageNumbers.length - 1])\r\n                    .text()\r\n                    .toLowerCase() === 'last post'\r\n                    ? $(pageNumbers[pageNumbers.length - 2]).text()\r\n                    : $(pageNumbers[pageNumbers.length - 1]).text()\r\n            );\r\n\r\n            const unreadPages = getRandomInt(0, 3);\r\n\r\n            const unreadPosts = unreadPages\r\n                ? (unreadPages - 1) * 40 + getRandomInt(0, 40)\r\n                : getRandomInt(0, 40);\r\n\r\n            return {\r\n                bookmarked: true,\r\n                link,\r\n                title,\r\n                threadId,\r\n                pages: pages ? pages : 1,\r\n                unreadPosts,\r\n            } as FrontEndThread;\r\n        })\r\n        .toArray();\r\n\r\n    const returnThreads: FrontEndThread[] = [];\r\n\r\n    const numberOfThreads = getRandomInt(2, 5);\r\n\r\n    for (let i = 0; i < numberOfThreads; i++) {\r\n        const thread = threads.splice(getRandomInt(0, threads.length), 1)[0];\r\n        //@ts-ignore\r\n        returnThreads.push(thread as FrontEndThread);\r\n    }\r\n\r\n    console.log(returnThreads);\r\n    return returnThreads;\r\n};\r\n\r\nexport default threadsGenerator;\r\n","import React, { useContext, useEffect, useState, useCallback } from 'react';\r\nimport './App.css';\r\nimport TopBar from './components/TopBar';\r\nimport ControlPanel from './components/ControlPanel';\r\nimport { Container } from 'semantic-ui-react';\r\nimport Instructions from './components/Instructions';\r\nimport { LoginContext } from './services/LoginContext';\r\nimport Providers from './components/Providers';\r\nimport { getHeaders } from './services/Api/services/Headers';\r\nimport {\r\n    ImageReviewStatus,\r\n    LoginActionTypes,\r\n    ThreadsActionTypes,\r\n    AlbumsAction,\r\n    AlbumsActionTypes,\r\n} from './types/types';\r\nimport { ThreadsContext } from './services/ThreadsContext';\r\nimport threadsGenerator from './services/Generators/ThreadsGenerator';\r\nimport { generateUsers } from './services/Generators/UserGenerator';\r\nimport { getRandomInt } from './services/Generators/LogEvents';\r\nimport { AlbumsContext } from './services/AlbumsContext';\r\n\r\nconst App2 = () => {\r\n    const { isLoggedIn, dispatch } = useContext(LoginContext);\r\n    const { dispatch: threadsDispatch } = useContext(ThreadsContext);\r\n    const { dispatch: albumsDispatch } = useContext(AlbumsContext);\r\n\r\n    const [hasMounted, setHasMounted] = useState(false);\r\n\r\n    const checkToken = useCallback(async () => {\r\n        const token = getHeaders();\r\n        token\r\n            ? dispatch({ type: LoginActionTypes.success })\r\n            : dispatch({ type: LoginActionTypes.logout });\r\n    }, [dispatch]);\r\n\r\n    const loadThreads = useCallback(async () => {\r\n        const threads = await threadsGenerator();\r\n        threadsDispatch({\r\n            type: ThreadsActionTypes.setThreads,\r\n            threads,\r\n        });\r\n    }, [threadsDispatch]);\r\n\r\n    const loadImageQueue = useCallback(async () => {\r\n        const users = await generateUsers();\r\n        const randomUser = () => users[getRandomInt(0, 9)];\r\n\r\n        const makeImage = (album: string, image: string) => ({\r\n            album,\r\n            hash: getRandomInt(),\r\n            image,\r\n            submittedAt: Date(),\r\n            submittedBy: randomUser(),\r\n            status: ImageReviewStatus.pending,\r\n        });\r\n        const imageQueue = [\r\n            makeImage(\r\n                'Schnorkles',\r\n                'http://www.fulltable.com/VTS/p/pr/l/im/74.jpg'\r\n            ),\r\n            makeImage(\r\n                'Schnorkles',\r\n                'https://pbs.twimg.com/profile_images/722643164478234624/l4N8ZoOx_400x400.jpg'\r\n            ),\r\n            makeImage(\r\n                'Snoo',\r\n                'https://img0.etsystatic.com/136/0/10948157/il_340x270.1032580150_snoo.jpg'\r\n            ),\r\n            makeImage('Corn', 'https://i.imgur.com/mWW6MMf.jpg'),\r\n            makeImage('Corn', 'https://i.imgur.com/fV6OKlN.jpg'),\r\n        ];\r\n\r\n        albumsDispatch({\r\n            type: AlbumsActionTypes.setImageQueue,\r\n            imageQueue,\r\n        });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (!hasMounted) {\r\n            setHasMounted(true);\r\n            loadThreads();\r\n            checkToken();\r\n            loadImageQueue();\r\n        }\r\n    }, [hasMounted, loadThreads, setHasMounted, checkToken]);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <TopBar />\r\n            <Container text={!isLoggedIn}>\r\n                {isLoggedIn ? <ControlPanel /> : <Instructions />}\r\n            </Container>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nconst App = () => (\r\n    <Providers>\r\n        <App2 />\r\n    </Providers>\r\n);\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}